{"version":3,"sources":["solvers/edges/solveWhiteCross.js","solvers/corners/solveWhiteCorners.js","solvers/edges/solveMiddleEdges.js","solvers/edges/solveYellowCross.js","solvers/edges/alignYellowCross.js","solvers/corners/solveYellowCorners.js","solvers/corners/alignYellowCorners.js","solvers/middles/white.js","solvers/middles/yellow.js","solvers/middles/blue.js","solvers/middles/green.js","solvers/middles/orange.js","solvers/edges/solveFrontEdgeSegments.js","solvers/edges/solveBackEdgeSegments.js","solvers/edges/solveMiddleEdgeSegements.js","components/Navbar/Navbar.js","components/Speeds.js","components/MoveInput.js","components/MobileView.js","cubeFunctions/algorithms.js","cubeFunctions/cube.js","components/MenuOptions/MenuOptions.js","components/MenuOptionsOther/MenuOptionsOther.js","components/Controls.js","components/ColorPicker.js","components/SolverUI/SolverUI.js","components/View.js","components/MenuWrapper/MenuWrapper.js","solvers/solveMiddleLogic.js","solvers/solveMiddles.js","solvers/solveEdgeLogic.js","solvers/solveEdges.js","solvers/solver.js","App.js","serviceWorker.js","index.js"],"names":["inMiddle","coord","maxCoord","minCoord","module","exports","rubiksObject","cubeDimension","moveStringToArray","edges","moveString","cube","space","solvedEdges","solveState","fourEdgeSections","splitEdges","edgeSegments","length","segmentsPerSection","temp","i","push","sectionSpliter","pieceOne","pieceTwo","pieceThree","pieceFour","includes","emptyCount","whiteSide","cubeX","cubeY","cubeZ","j","moveArray","moveSet","corners","solvedCorners","dim","moveFromMiddle212","moveFromMiddle210","moveFromMiddle010","edgeOne","edgeTwo","edgeThree","edgeFour","blueSide","greenSide","recipe","cubeIndex","cubeAtIndex","skip","counter","solveMoves","solveAlgo","obj","moveLog","currentFunc","solveCount","move","depth","side","current","solved","index","currentSide","row","Math","floor","column","x","y","z","middle","isOddCube","console","log","extractFromFront","moveFromMiddleToBack","flipPieceOnBack","solveFromBackToFront","yellowSide","displace","solve","replace","flip","firstEdge","secondEdge","thirdEdge","Navbar","props","className","style","color","title","DropdownButton","aria-label","id","type","data-toggle","onClick","changeSettings","state","showStats","showMoveInput","defaultChecked","showHints","isLocal","Dropdown","Item","href","backgroundColor","float","trigger","close","zIndex","width","height","margin","transform","fontSize","marginBottom","marginTop","textAlign","paddingTop","paddingBottom","target","value","position","top","left","Speeds","isDisabled","defaultValue","min","max","step","disabled","onChange","onSliderChange","MoveInput","handle","defaultPosition","grid","scale","onStart","handleStart","onDrag","handleDrag","onStop","handleStop","placeholder","onKeyDown","e","key","algorithm","document","getElementById","stopPropagation","borderRadius","border","Mobile","algorithms","name","moves","worksFor","generateSolved","_x","_y","_z","tempArr","middles","tempMiddles","tempEdges","k","side0","side1","side2","side3","side4","side5","edgeType","middleType","tempCount","tempType","generateBlank","generateButtonData","size","numLayers","centerLayer","ceil","faces","buttons","center","single","multi","clockwise","data","baseNameSingle","baseNameMulti","toLowerCase","face","rotatePoint","c1","c2","direction","p1","p2","rotation","theta","PI","cos","sin","rotatePieces","rotate","tempCubes","setState","centerPoint","cubes","turnDirection","speed","start","cubeDepth","isMulti","newPoint","round","reload","rotatePoint2","rotateFace","cubeFace","cD","object","degrees","tempFace","React","memo","baseOptions","optionClick","algorithmSet","classList","contains","querySelector","display","activeMenu","solvedSet","hoverData","prevSet","isValidConfig","targetSolveIndex","autoPlay","autoRewind","autoTarget","playOne","activeAlgo","remove","currentFunct","add","beginColorPicker","beginSolve","solveOnce","forEach","algo","algoSet","generated","split","solveable","solvedSetIndex","algoStart","otherOptionClick","beginScramble","centerButtons","singleButtons","multiButtons","singleCols","multiCols","namesToColors","bgc","Controls","marginRight","generatedButtons","element","onMouseDown","rotateOneFace","onMouseEnter","mouseEnter","onMouseLeave","mouseLeave","colors","lengthBtns","lengthBtns1","ColorPicker","li","cpErrors","error","listStyle","lineHeight","Row","overflowX","overflowY","endColorPicker","Col","colorPicked","changeColor","setColorPickedCube","SolverUI","nextProps","rewindOne","this","autoScroll","scrollIntoView","solverSet","jumperButtons","preSetTarget","setTarget","el","marginLeft","solveAll","alt","src","fastforward","rewindAll","pause","parseInt","prevSetNew","slice","moveSetNew","forwardMoves","autoJump","backwardMoves","map","reverse","stopSolve","leave","paddingRight","solveTime","Component","View","nextState","padding","opacity","xs","overflow","Menu","window","innerWidth","MobileView","solveMiddleLogic","cubeDimensions","rubiksObjectAtIndex","faceColor","whiteSolver","yellowSolver","blueSolver","orangeSolver","greenSolver","solveMiddles","oddTopMiddleIndex","trim","rubiksIndex","indexOf","solveEdgeLogic","edgeLength","section","frontEdges","backEdges","middleEdges","solveEdges","CONSTANTS","solver","solveWhiteCross","solveWhiteCorners","solveMiddleEdges","solveYellowCross","alignYellowCross","alignYellowCorners","solveYellowCorners","App","blackObject","rotationSpeed","end","cameraX","cameraY","cameraZ","angle","currentSpeed","facePosX","facePosY","facePosZ","faceSide","mouseFace","mouseDown","mousePos","undoIndex","blockMoveLog","previousPiece","showControls","showGuideArrows","activeDragsInput","deltaPositionInput","controlledPositionInput","activeDragsControls","deltaPositionControls","controlledPositionControls","isVisible","showSolveController","generateAllMoves","keyBinds","toUpperCase","keyHandling","keyCode","changeSpeed","_speed","_rotationSpeed","_name","bypass","changeFaceColor","pos","tempObj","tempCube","reloadTurnedPieces","checkColors","success","rubiks","newGenerated","checked","otherChecked","pieceIndex","piece","rubik","validPiece","sort","checkValidMatch","checkOccurences","a1","a2","failedColors","count","amount","rubiksLength","whiteCount","blueCount","redCount","yellowCount","orangeCount","greenCount","duplicateFace","duplicateColors","matchedCount","validAmount","res","tempColors","invalidAmounts","join","solveData","generateAllSolveMoves","undefined","undo","redo","backwardsMove","substring","err","vals","rotateCubeFace","rotateCamera","tempMove","moveName","reset","generateMove","maxDepth","randFace","random","randTurn","randIsMulti","randDepth","convertDataToMove","toString","concat","blank","rewindSolve","newMoveSet","tempMoveSet","tempPrev","lastEl","popped","pop","rewindAllSolve","lastElArray","poppedArray","handleDragInput","ui","deltaX","deltaY","onStartInput","onStopInput","handleDragControls","onStartControls","onStopControls","convertMoveToData","mouseOver","str","tempArray","parseMoveArray","shifted","shift","tempDirection","tempDepth","tempIsMulti","material","THREE","menuSetState","tempState","JSON","parse","stringify","moveData","beforeObject","currentIndex","previousIndex","indexOccurence","splitSet","splice","dataMove","moveSetLength","alert","windowResized","resized","event","_piece","blue","red","yellow","manualPiece","newValidPiece","convertToBlueWhiteEdge","newManualPiece","settingToChange","newVals","body","children","removeEventListener","checkLocal","parts","location","checkID","substr","coord1","compare1","coord2","compare2","piece1","piece2","dir1","dir2","abs","calculated","previous","pieceFace","turn","dif","calculateTurnAtFace","getSizeFromUrl","stats","Stats","groups","previousMousePos","piecePos","intersected","scene","camera","innerHeight","renderer","antialias","alpha","raycaster","mouse","cubeGeometry","geometry","loader","load","loader1","transparent","tanFOV","tan","fov","windowHeight","addEventListener","clientX","clientY","bind","onMouseUp","aspect","atan","updateProjectionMatrix","lookAt","setSize","render","setClearColor","domElement","appendChild","showPanel","dom","anisotropy","capabilities","getMaxAnisotropy","cubeMaterials","translateX","translateY","translateZ","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","autoRotate","minDistance","maxDistance","keys","LEFT","UP","RIGHT","BOTTOM","tempGroup","tempGroupOther","tempPlane","tempPlaneOther","rotateZ","rotateX","visible","rotateY","group","animate","enabled","begin","requestAnimationFrame","hFace","hDir","hDepth","hMulti","setFromCamera","intersects","intersectObjects","faceInteresected","faceIndex","tempIndex","point","calculateTurn","tempVal","tempRubiks","a","performance","now","b","toFixed","update","right","disableHover","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46641491.chunk.js","sourcesContent":["function inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = 0; i < edgeSegments;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction solveWhiteCross(rubiksObject,cubeDimension,moveStringToArray,edges){\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let space = \"\";\n    let solvedEdges = 0;\n\n    let dim = cubeDimension;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n\n    if(dim === 2) {return {solveState : 2};}\n\n    let fourEdgeSections = sectionSpliter(edges);\n\n    let pieceOne = fourEdgeSections[0][0];\n    let pieceTwo = fourEdgeSections[3][0];\n    let pieceThree = fourEdgeSections[1][0];\n    let pieceFour = fourEdgeSections[2][0];\n\n    for(let i = 0; i < cube.length; i++){\n      if(moveString.length) space = \" \";\n      if(cube[i].includes(\"white\")){\n\n        let emptyCount = 0;\n        let whiteSide = -1;\n        let cubeX = cube[i][6];\n        let cubeY = cube[i][7];\n        let cubeZ = cube[i][8];\n        \n\n        for(let j = 0; j < 6; j++){\n          if (cube[i][j] === \"black\") emptyCount++;\n          else {\n            if(cube[i][j] === \"white\") whiteSide = j;\n          }\n        }\n\n        // If edge piece\n        if(emptyCount === 4) {\n          if(i===pieceOne && solvedEdges === 0 ){\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===maxCoord)\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01U' 01R' 01F'\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01F'\" : moveString+= space + \"01R 01U\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01F2\" : moveString+= space + \"01D 01R 01F'\";\n\n            else if(cubeX===minCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01F\" : moveString+= space + \"01L' 01U'\";\n\n            //If piece one is in y section 1\n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01L 01F\" : moveString+= space + \"01U'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01R' 01F'\" : moveString+= space + \"01U\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01D' 01F2\" : moveString+= space + \"01R 01F'\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01D 01F2\" : moveString+= space + \"01L' 01F\";\n            \n\n            //If piece one is in y section 2\n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01U2\" : moveString+= space + \"01B 01L 01U'\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01R2 01F'\" : moveString+= space + \"01R' 01U\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01B2 01U2\" : moveString+= space + \"01B' 01L 01U'\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B' 01U2\" : moveString+= space + \"01L 01U'\";\n            \n          }\n          if(i===pieceTwo && solvedEdges === 1){\n            \n            if(cubeX===minCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01L' 01R 01U' 01R'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01D' 01F' 01D 01F\" : moveString+= space + \"01D' 01L'\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01R 01F2 01R' 01F2\" : moveString+= space + \"01R 01F 01U 01F'\";\n            \n\n            //If piece two is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01L\" : moveString+= space + \"01F 01U' 01F'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F2 01R' 01F2\" : moveString+= space + \"01U 01F' 01U'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01F' 01D' 01F\" : moveString+= space + \"01F2 01R 01F2\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01F' 01D 01F\" : moveString+= space + \"01L'\";\n            \n\n            //If piece two is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F 01U2 01F'\" : moveString+= space + \"01U' 01L 01U\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B2 01L2\" : moveString+= space + \"01R' 01F 01U 01F'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01F' 01D2 01F\" : moveString+= space + \"01D 01L'\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01L2\" : moveString+= space + \"01B' 01U' 01L 01U\";\n            \n          }\n          if(i===pieceThree && solvedEdges === 2){\n  \n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01D 01F 01D' 01F'\" : moveString+= space + \"01D 01R\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01R 01F' 01U 01F\";\n            \n            \n            //If piece three is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F2 01L 01F2\" : moveString+= space + \"01F' 01U' 01F\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01R'\" : moveString+= space + \"01F' 01U 01F\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01F 01D' 01F'\" : moveString+= space + \"01R\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01F 01D 01F'\" : moveString+= space + \"01F2 01L' 01F2\";\n            \n\n            //If piece three is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F' 01U2 01F\" : moveString+= space + \"01U 01R' 01U'\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01R2\" : moveString+= space + \"01R' 01F' 01U 01F\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01F 01D2 01F'\" : moveString+= space + \"01D' 01L\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B2 01R2\" : moveString+= space + \"01B' 01U 01R' 01U'\";\n            \n          }\n          if(i===pieceFour && solvedEdges === 3){\n  \n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01D 01F' 01R 01F\";\n            \n            //If piece four is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F 01L 01F'\" : moveString+= space + \"01F2 01U' 01F2\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F' 01R' 01F\" : moveString+= space + \"01F2 01U 01F2\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01D'\" : moveString+= space + \"01F' 01R 01F\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01D\" : moveString+= space + \"01F 01L' 01F'\";\n            \n\n            //If piece four is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F2 01U2 01F2\" : moveString+= space + \"01B 01L' 01D 01L\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01F' 01R2 01F\" : moveString+= space + \"01R 01D' 01R'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01D2\" : moveString+= space + \"01D' 01F' 01R 01F\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01F 01L2 01F'\" : moveString+= space + \"01L' 01D 01L\";\n            \n          }\n        }\n      }\n    }\n    \n    const moveArray = moveStringToArray(moveString);\n\n    if(solvedEdges < 4){\n        return {moveSet : moveArray};\n    } else{\n        return {solveState : 2}\n    }\n}\n\nmodule.exports = solveWhiteCross;","  // Solves white (front) corners\n  function solveWhiteCorners(rubiksObject,cubeDimension,moveStringToArray,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let solvedCorners = 0;\n\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[0]\n    let pieceTwo = corners[1]\n    let pieceThree = corners[2]\n    let pieceFour = corners[3]\n\n    for(let i = 0; i < cube.length; i++){\n      let whiteSide = -1;\n      let cubeX = cube[i][6];\n      let cubeY = cube[i][7];\n      let cubeZ = cube[i][8];\n\n      for(let j = 0; j < 6; j++){\n        if(cube[i][j] === \"white\") whiteSide = j;\n      }\n\n      if(i===pieceOne && solvedCorners === 0 ){\n        //Front\n        if(cubeX===minCoord && cubeY===minCoord && cubeZ===maxCoord){\n          if(whiteSide===0){solvedCorners++}\n          else if(whiteSide===1) moveString=\"01L' 01B 01L 01B' 01L' 01B 01L\";\n          else moveString=\"01L' 01B' 01L 01B2 01U 01B' 01U'\";\n        }\n        else if(cubeX===maxCoord && cubeY===minCoord && cubeZ===maxCoord) moveString=\"01R 01L' 01B 01L 01R'\"\n        else if(cubeX===maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01R' 01B' 01R 01U 01B' 01U'\";\n        else if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01D' 01U 01B 01U' 01D\"\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01U 01B 01U'\"\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01L' 01B 01L\"\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01L' 01B2 01L\"\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01U 01B' 01U'\"\n      }\n\n      if(i===pieceTwo && solvedCorners === 1 ){\n        if(cubeX===maxCoord && cubeY===minCoord && cubeZ===maxCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide===1) moveString =\"01R 01B' 01R' 01B 01R 01B' 01R'\";\n          else moveString =\"01U' 01B 01U 01B' 01U' 01B 01U\";\n        }\n        else if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01U' 01D 01B 01D' 01U\";\n        else if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01L 01R 01B2 01R' 01L'\";\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01R 01B' 01R'\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01B 01R 01B' 01R'\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01B2 01R 01B' 01R'\";\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01R 01B2 01R'\";\n      }\n      \n      if(i===pieceThree && solvedCorners === 2 ){\n        if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide === 4) moveString =\"01D' 01B 01D 01B' 01D' 01B 01D\";\n          else moveString =\"01L 01B' 01L' 01B 01L 01B' 01L'\";\n        }\n        else if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01R' 01L 01B' 01L' 01R\";\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01D' 01B 01D\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01D' 01B2 01D\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01B' 01D' 01B' 01D\";\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01D' 01B' 01D\";\n      }\n      if(i===pieceFour && solvedCorners === 3 ){ \n        if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide === 2) moveString =\"01D 01B' 01D' 01B 01D 01B' 01D'\";\n          else moveString =\"01R' 01B 01R 01B' 01R' 01B 01R\";\n        }\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) {moveString=\" 01R' 01B2 01R\";}\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) {moveString=\"01D 01B' 01D'\";}\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) {moveString=\"01B 01D 01B' 01D'\";}\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) {moveString=\"01R' 01B 01R\";}\n      }\n\n\n    }\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(solvedCorners < 4){\n        return {moveSet : moveArray};\n    }\n    else{\n      if(dim === 2){\n        return {solveState : 6};\n      }\n      else{\n        return {solveState : 3};\n      }\n    }\n  }\n\n  module.exports = solveWhiteCorners;","function inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = edgeSegments*2; i < edgeSegments*3;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction solveMiddleEdges(rubiksObject,moveStringToArray,edges,dim){\n  let moveString = \"\";\n  let cube = rubiksObject;\n  let space = \"\";\n  let solvedEdges = 0;\n  let moveFromMiddle012 = \"01B 01U 01B' 01U' 01B' 01L' 01B 01L\";\n  let moveFromMiddle212 = \"01B 01R 01B' 01R' 01B' 01U' 01B 01U\";\n  let moveFromMiddle210 = \"01B 01D 01B' 01D' 01B' 01R' 01B 01R\";\n  let moveFromMiddle010 = \"01B 01L 01B' 01L' 01B' 01D' 01B 01D\";\n\n  let minCoord = 0;\n  let maxCoord = dim-1;\n\n  let fourEdgeSections = sectionSpliter(edges);\n\n  let edgeOne = fourEdgeSections[0][0];\n  let edgeTwo = fourEdgeSections[1][0];\n  let edgeThree = fourEdgeSections[3][0];\n  let edgeFour = fourEdgeSections[2][0];\n\n\n  // console.log(\"\\n\\n\",fourEdgeSections);\n  for(let i = 0; i < cube.length; i++){\n    if(moveString.length) space = \" \";\n    //if(cube[i].includes(\"green\") || cube[i].includes(\"blue\")){\n      //let emptyCount = 0;\n      let blueSide = -1;\n      let greenSide = -1;\n      let cubeX = cube[i][6];\n      let cubeY = cube[i][7];\n      let cubeZ = cube[i][8];\n\n      for(let j = 0; j < 6; j++){\n        if (cube[i][j] === \"black\");\n        else {\n          if(cube[i][j] === \"blue\") blueSide = j;\n          else if(cube[i][j] === \"green\") greenSide = j;\n        }\n      }\n\n      // //if(emptyCount === 4){\n      //   console.log(\"Cube:\",cube[i]);\n      //   console.log(\"i:\",i);\n      //   console.log(\"Solved Edges:\",solvedEdges);\n        if(i===edgeOne && solvedEdges === 0){\n          //Front\n          if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord)\n            blueSide === 1 ? solvedEdges++ : moveString+= space + moveFromMiddle012;\n          \n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord) moveString+= space + moveFromMiddle212;\n          else if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle010;\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) {\n            blueSide === 3 ? moveString+= space + moveFromMiddle012 : moveString+= space + \"01B2 01L' 01B' 01L 01B 01U 01B 01U'\";\n          }\n          else if(inMiddle(cubeX,maxCoord,minCoord)&& cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B\";\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B2\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B'\";\n        }\n        if(i===edgeTwo && solvedEdges === 1){\n          //Front\n          if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord){\n            blueSide === 1 ? solvedEdges++ : moveString+= space + moveFromMiddle212;\n          }\n          else if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle010;\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) {\n            blueSide === 1 ? moveString+= space + moveFromMiddle212 : moveString+= space + \"01B2 01U' 01B' 01U 01B 01R 01B 01R'\";\n          }\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B2\";\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B'\";\n        }\n        if(i===edgeThree && solvedEdges === 2){\n          //Front\n          if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord){\n            greenSide === 5 ? solvedEdges++ : moveString+= space + moveFromMiddle010;\n          }\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord){\n            greenSide === 5 ? moveString+= space + moveFromMiddle010 : moveString+= space + \"01B2 01D' 01B' 01D 01B 01L 01B 01L'\";\n          }\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B2\";\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B'\";\n        }\n        if(i===edgeFour && solvedEdges === 3){\n          //Front\n          if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord){\n            greenSide === 5 ? solvedEdges++ : moveString+= space + moveFromMiddle210;\n          }\n          //Back\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)){\n            greenSide === 3 ? moveString+= space + moveFromMiddle210 : moveString+= space + \"01B2 01R' 01B' 01R 01B 01D 01B 01D'\";\n          }\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B\";\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B2\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B'\"; \n        }\n      //}\n    //}\n  }\n\n  const moveArray = moveStringToArray(moveString);\n\n  if(solvedEdges < 4 ) return {moveSet : moveArray};\n  else return {solveState : 4};\n}\n\nmodule.exports = solveMiddleEdges;","function sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = edgeSegments; i < edgeSegments*2;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction solveYellowCross(rubiksObject,moveStringToArray,edges,dim){\n\n    if(dim === 2) {return {solveState : 5};}\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let recipe = \"01U 01R 01B 01R' 01B' 01U'\";\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let fourEdgeSections = sectionSpliter(edges);\n    //console.log(edges);\n    let cubeIndex = [fourEdgeSections[0][0],fourEdgeSections[3][0],fourEdgeSections[1][0],fourEdgeSections[2][0]];\n    //console.log(cubeIndex);\n    let cubeAtIndex = [];\n\n    for(let i = 0; i < 4; i++){\n      if(inMiddle(cube[cubeIndex[i]][6],maxCoord,minCoord) && \n         cube[cubeIndex[i]][7] === maxCoord &&\n         cube[cubeIndex[i]][8] === maxCoord) cubeAtIndex[0] = cube[cubeIndex[i]][3];\n      else if (cube[cubeIndex[i]][6] === minCoord && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        inMiddle(cube[cubeIndex[i]][8],maxCoord,minCoord)) cubeAtIndex[1] = cube[cubeIndex[i]][3];\n      else if (cube[cubeIndex[i]][6] === maxCoord && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        inMiddle(cube[cubeIndex[i]][8],maxCoord,minCoord)) cubeAtIndex[2] = cube[cubeIndex[i]][3];\n      else if (inMiddle(cube[cubeIndex[i]][6],maxCoord,minCoord) && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        cube[cubeIndex[i]][8] === minCoord) cubeAtIndex[3] = cube[cubeIndex[i]][3];\n    }\n\n    let skip = false;\n\n    if(dim===4){\n      let counter = 0;\n      for(let i = 0; i < 4; i++){\n        if(cube[cubeIndex[i]][3] === \"yellow\") counter++;\n      }\n      if(counter%2){\n        //console.log(\"fix implemented\");\n        skip=true;\n        moveString=\"02r 01B2 02r' 01B2 02r 01B2 02r 01B2 02l' 01B2 02r 01B2 02r' 01B2 01D2 02r2 01D2 04r'\";\n      };\n    }\n\n    if(!skip){\n      if(cube[cubeIndex[0]][3] === \"yellow\" &&\n        cube[cubeIndex[1]][3] === \"yellow\" &&\n        cube[cubeIndex[2]][3] === \"yellow\" &&\n        cube[cubeIndex[3]][3] === \"yellow\" \n        ); \n\n      //Line\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[3] === \"yellow\" ) {moveString = \"01B \" + recipe; }\n      else if (cubeAtIndex[1] === \"yellow\" && cubeAtIndex[2] === \"yellow\" ) {moveString = recipe;}\n\n      //L-Shape\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[2] === \"yellow\" ) {moveString = \"01B2 \" + recipe + \" \" + recipe;}\n      else if (cubeAtIndex[1] === \"yellow\" && cubeAtIndex[3] === \"yellow\" ) {moveString = recipe + \" \" + recipe;}\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[1] === \"yellow\" ) {moveString = \"01B \" + recipe + \" \" + recipe;}\n      else if (cubeAtIndex[2] === \"yellow\" && cubeAtIndex[3] ) {moveString = \"01B' \" + recipe + \" \" + recipe;}\n\n      else {moveString = recipe;}\n    }\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray}; \n    else return {solveState:5};\n  }\n\n  module.exports = solveYellowCross;","function sectionSpliter(edges){\n    let splitEdges = [];\n    let edgeSegments = edges.length/3;\n    const edgeSections = 4;\n    let segmentsPerSection = edgeSegments/edgeSections;\n  \n    let temp = [];\n    for(let i = edgeSegments; i < edgeSegments*2;i++){\n      temp.push(edges[i]);\n      if(temp.length===segmentsPerSection){\n        splitEdges.push(temp);\n        temp=[];\n      }\n    }\n  \n    return splitEdges;\n}\n\nfunction inMiddle(coord,maxCoord,minCoord){\n    return coord>minCoord&&coord<maxCoord;\n}\n\nfunction alignYellowCross(rubiksObject,moveStringToArray,edges,dim){\n\n    if(dim === 2) {return {solveState : 6};}\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let fourEdgeSections = sectionSpliter(edges);\n    let cubeIndex = [fourEdgeSections[0][0],fourEdgeSections[3][0],fourEdgeSections[1][0],fourEdgeSections[2][0]];\n\n    if(inMiddle(cube[cubeIndex[0]][6],maxCoord,minCoord) && cube[cubeIndex[0]][7] === maxCoord && cube[cubeIndex[0]][8] === maxCoord){\n        //Check if other pieces are in place\n        if(cube[cubeIndex[1]][6] === minCoord && inMiddle(cube[cubeIndex[1]][8],maxCoord,minCoord)&&\n            cube[cubeIndex[2]][6] === maxCoord && inMiddle(cube[cubeIndex[2]][8],maxCoord,minCoord));\n\n        else if(cube[cubeIndex[1]][6] === maxCoord && inMiddle(cube[cubeIndex[2]][8],maxCoord,minCoord) &&\n        inMiddle(cube[cubeIndex[3]][6],maxCoord,minCoord) && cube[cubeIndex[3]][8] === minCoord) moveString = \"01D 01B 01D' 01B 01D 01B2 01D' 01B2 01L 01B 01L' 01B 01L 01B2 01L' 01B\";\n\n        else if(cube[cubeIndex[3]][6] === maxCoord && inMiddle(cube[cubeIndex[3]][8],maxCoord,minCoord)) moveString = \"01R 01B 01R' 01B 01R 01B2 01R' 01B\";\n\n        else if(cube[cubeIndex[3]][6] === minCoord && inMiddle(cube[cubeIndex[3]][8],maxCoord,minCoord)) moveString = \"01R 01B 01R' 01B 01R 01B2 01R' 01B\";\n\n\n        //Make moves\n    }\n    else if(cube[cubeIndex[0]][6] === maxCoord && cube[cubeIndex[0]][7] === maxCoord && inMiddle(cube[cubeIndex[0]][8],maxCoord,minCoord)){\n        moveString = \"01B\";\n    }\n    else moveString = \"01B'\"\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray};\n    else return{solveState:6};\n}\n\nmodule.exports = alignYellowCross;","function solveYellowCorners(rubiksObject,cubeDimension,moveStringToArray,solveMoves,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let solveAlgo = \"01U' 01F' 01U 01F 01U' 01F' 01U 01F\";\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[4];\n    let pieceTwo = corners[5];\n    let pieceThree = corners[6];\n    let pieceFour = corners[7];\n\n    let moveArray;\n\n    if(cube[pieceOne][3] === \"yellow\" &&\n       cube[pieceTwo][3] === \"yellow\" &&\n       cube[pieceThree][3] === \"yellow\" &&\n       cube[pieceFour][3] === \"yellow\"){\n      if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord);\n      else moveString = \"01B\";\n    }\n\n    else if(cube[pieceOne][3]!== \"yellow\"){\n      //console.log(cube[pieceOne]);\n      moveString = solveAlgo;\n    }\n\n    else if(cube[pieceTwo][3]!== \"yellow\"){\n      if(cube[pieceTwo][6] === minCoord && cube[pieceTwo][8] === maxCoord) {\n        //console.log(cube[pieceTwo]);\n        moveString = solveAlgo;\n      }\n      else {\n        moveString = \"01B\";\n      }\n    }\n    else if(cube[pieceFour][3]!== \"yellow\"){\n      if(cube[pieceFour][6] === minCoord && cube[pieceFour][8] === maxCoord) {\n        //console.log(cube[pieceFour]);\n        moveString = solveAlgo;\n      }\n      else{\n        moveString = \"01B\";\n      }\n    }\n    else if(cube[pieceThree][3]!== \"yellow\"){\n      if(cube[pieceThree][6] === minCoord && cube[pieceThree][8] === maxCoord) {\n        //console.log(cube[pieceThree]);\n        moveString = solveAlgo;\n      }\n      else {\n        moveString = \"01B\";\n      }\n    }\n\n    moveArray = moveStringToArray(moveString);\n\n    if(moveString.length){\n      return {moveSet:moveArray};\n    }\n    else{\n      //check for anomoly\n      if(dim === 2) {\n\n        if(cube[pieceOne][6]===minCoord && cube[pieceOne][8]===maxCoord) {\n          if(cube[pieceTwo][6]===maxCoord && cube[pieceTwo][8]===maxCoord){\n            if(cube[pieceThree][6]===minCoord && cube[pieceThree][8]===minCoord){\n              let obj = {moveLog : \"\",currentFunc: \"None\",moveSet:[],solveState:-1};\n              if(solveMoves.length){\n                obj.solveMoves = \"\";\n                return obj;\n              }\n              return obj;\n            }\n            else {\n              moveString = \"01R 01D' 01R' 01F' 01R' 01F 01D\";\n              moveArray = moveStringToArray(moveString);\n              return {moveSet:moveArray};\n            }\n          }\n        }\n        else {\n          moveString = \"01B\";\n          moveArray = moveStringToArray(moveString);\n          return {moveSet:moveArray};\n        }\n      }\n      else if(dim>3){\n        if(cube[pieceOne][6]===minCoord && cube[pieceOne][8]===maxCoord) {\n          if(cube[pieceTwo][6]===maxCoord && cube[pieceTwo][8]===maxCoord){\n            if(cube[pieceThree][6]===minCoord && cube[pieceThree][8]===minCoord){\n              let obj = {moveLog : \"\",currentFunc: \"None\",moveSet:[],solveState:-1};\n              if(solveMoves.length){\n                obj.solveMoves = \"\";\n                return obj;\n              }\n              return obj;\n            }\n            else {\n              moveString = \"02R2 01B2 02R2 01B2 02B2 02R2 02B2\";\n              moveArray = moveStringToArray(moveString);\n              return {moveSet:moveArray,solveState:4};\n            }\n          }\n        }\n      }\n      else {\n        let obj = {moveLog : \"\",currentFunc: \"None\",moveSet:[],solveState:-1};\n        if(solveMoves.length){\n          obj.solveMoves = \"\";\n          return obj;\n        }\n        \n        return obj;\n      }\n    }\n  }\n  module.exports = solveYellowCorners;\n","function alignYellowCorners(rubiksObject,cubeDimension,moveStringToArray,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[4];\n    let pieceTwo = corners[5];\n    let pieceThree = corners[6];\n    let pieceFour = corners[7];\n\n    let solveCount = 0;\n\n    \n    if(cube[pieceOne][6]===cube[pieceOne][9] && cube[pieceOne][7]===cube[pieceOne][10] && cube[pieceOne][8]===cube[pieceOne][11]) solveCount++;\n    if(cube[pieceTwo][6]===cube[pieceTwo][9] && cube[pieceTwo][7]===cube[pieceTwo][10] && cube[pieceTwo][8]===cube[pieceTwo][11]) solveCount++;\n    if(cube[pieceThree][6]===cube[pieceThree][9] && cube[pieceThree][7]===cube[pieceThree][10] && cube[pieceThree][8]===cube[pieceThree][11]) solveCount++;\n    if(cube[pieceFour][6]===cube[pieceFour][9] && cube[pieceFour][7]===cube[pieceFour][10] && cube[pieceFour][8]===cube[pieceFour][11]) solveCount++;\n    \n\n    if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord &&\n       cube[pieceTwo][6] === maxCoord && cube[pieceTwo][8] === maxCoord);\n\n   else if(solveCount === 2 && dim > 3) {\n      //console.log(\"another parity encountered brother\");\n      moveString = \"02D2 01B2 02D2 02b2 02D2 02b2\";\n      const moveArray = moveStringToArray(moveString);\n      if(moveString.length) return {moveSet : moveArray,solveState:5};\n   }\n\n    else if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord) moveString = \"01B 01U 01B' 01D' 01B 01U' 01B' 01D\";\n    else if(cube[pieceTwo][6] === maxCoord && cube[pieceTwo][8] === maxCoord) moveString = \"01B 01R 01B' 01L' 01B 01R' 01B' 01L\";\n    else if(cube[pieceThree][6] === minCoord && cube[pieceThree][8] === minCoord) moveString = \"01B 01L 01B' 01R' 01B 01L' 01B' 01R\";\n    else if(cube[pieceFour][6] === maxCoord && cube[pieceFour][8] === minCoord) moveString = \"01B 01D 01B' 01U' 01B 01D' 01B' 01U\";\n\n    else moveString = \"01B 01U 01B' 01D' 01B 01U' 01B' 01D\";\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray};\n    else return {solveState:7};\n  }\n\n  module.exports = alignYellowCorners;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      white.js\n *      Started: Friday, December 13, 2019\n *      Finished: Saturday, December 14, 2019\n *      Note: Redo this function so it works similarly to other solvers (no row or columns)\n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveWhiteMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    let row = Math.floor(index/(dim-2));\n    let column = index%(dim-2);\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n    if(solved.x===1){\n        if(dim-solved.z === 2){\n            if(currentSide===\"F\"){\n                moveString=\"01F\";\n            }\n            else if(currentSide!==\"D\"&&currentSide!==\"U\"){\n                if(current.z!==dim-2){\n                    moveString= \"01\" + currentSide;\n                }\n                else{\n                    moveString= move(\"\",dim-current.z,\"U\");\n                }\n            }\n            else {\n                if(current.x!==solved.x){\n                    moveString = \"01\" + currentSide;\n                }\n                else{\n                    moveString = \"02L\";\n                }\n            }\n        }\n        else{\n            if(currentSide===\"F\"){\n                moveString = move(\"\",current.z+1,\"D'\");\n            }\n            else if(currentSide===\"B\"){\n                if(current.z<=solved.z){\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n                else moveString = \"01B\";\n            }\n            else if(currentSide===\"L\"){\n                if(current.y!==dim-2){\n                    moveString= \"01L\";\n                }\n                else if(current.z!==solved.z){\n                    moveString= \"01L\";\n                }\n                else {\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n            }\n            else moveString = move(\"\",current.y+1,\"F'\");\n        }\n    }\n    else{\n        if(row===0){\n            if(currentSide===\"F\"){\n                if(current.z < solved.z && current.x >=solved.x){\n                    moveString = move(\"\",dim-current.x,\"R\");\n                }\n                else{\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n            }\n            else if(currentSide===\"B\"){\n                if(current.x === solved.x && current.z!== solved.z){\n                    moveString = move(\"\",column+2,\"L2\");\n                }\n                else {\n                    moveString = \"01B\"\n                };\n            }\n            else{\n                if(current.y===dim-2){\n                    if(current.z !== dim-1){\n                        moveString = move(\"\",row+2,\"B\")\n                    }\n                    else{\n                        if(current.x !== solved.x){\n                            moveString = \"01U\";\n                        }\n                        else {\n                            moveString = move(\"\",column+2,\"L\");\n                        };\n                    }\n                }\n                else{\n                    moveString = \"01\" + currentSide;\n                }\n            }\n        }\n        else{\n            if(currentSide===\"F\"){\n                if(current.z<solved.z){\n                    moveString = move(\"\",dim-current.z,\"U\");\n                }\n                else {\n                    moveString = move(\"\",dim-current.z,\"U\");\n                    moveString += move(\" \",dim-current.x,\"F'\");\n                    moveString += move(\" \",dim-current.z,\"U'\");\n                }\n                \n            }\n            else if(currentSide===\"B\"){\n                if(current.z===solved.z){\n                    if(solved.x===current.x){\n                        moveString = move(\"\",dim-current.z,\"U\");\n                        moveString += move(\" \",current.x+1,\"B\");\n                        moveString += move(\" \",dim-current.z,\"U'\");\n                    }\n                    else {\n                        moveString = move(\"\",dim-current.z,\"U\");\n                        moveString += \" 01R\";\n                        moveString += move(\" \",dim-current.z,\"U'\");\n                    }\n                }\n                else moveString = \"01B\";\n            }\n            else{\n                if(currentSide!==\"U\"){\n                    //console.log(\"Moving to top\")\n                    moveString += move(\" \",current.y+1,\"F\");\n                }\n                else{\n                    if(current.x!==solved.x || current.y!==solved.z){\n                        moveString = \"01U\";\n                    }\n                    else{\n                        moveString = \"01U'\";\n                        moveString += move(\" \",dim-solved.z,\"U'\");\n                        moveString += move(\" \",current.x+1,\"F\");\n                        moveString += move(\" \",dim-solved.z,\"U\");\n                    }\n                }\n            }\n        }\n    }\n    return moveString;\n}\n\nmodule.exports = solveWhiteMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      yellow.js\n *      Started: Saturday, December 14, 2019\n *      Finished: Saturday, December 21, 2019\n *  \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveYellowMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    let middle = Math.floor(dim/2);\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n    \n    //let opposite = \"01L'\";\n\n    // This can be written smarter. Has a small flaw with extracting pieces from the back\n    if(currentSide===\"B\"){\n        // moveString += move(\" \",current.z+1,\"D'\");\n\n        // if(current.z!==solved.z){\n        //     if(current.z === middle){\n        //         moveString += \" 01R\";\n        //     }\n        //     else moveString += \" 01R2\";\n        // }\n\n        // else {\n        //     if(current.x===current.z){\n        //         moveString += \" 01L'\";\n        //         opposite = \"01L\";\n        //     }\n        //     else if(((current.x>= middle &&current.z>=middle))  ||\n        //         (current.x< middle &&current.z<middle) ||\n        //         (current.x> middle &&current.z<middle))\n        //         moveString += \" 01L\";\n        //     else{\n        //         moveString += \" 01L'\";\n        //         opposite = \"01L\";\n        //     }\n\n        //     moveString += move(\" \",dim-current.x,\"F\");\n        //     moveString += \" \" + opposite;\n            \n        // }\n        // moveString += move(\" \",current.z+1,\"D\");\n        moveString += move(\" \",current.z+1,\"D'\");\n\n        moveString += (dim%2&&current.z===middle)? \" 01R\" : \" 01R2\";\n\n        moveString += move(\" \",current.z+1,\"D\");\n\n        moveString += move(\" \",current.x+1,\"F\")\n\n        moveString += move(\" \",current.z+1,\"D'\");\n\n        moveString += (dim%2&&current.z===middle)? \" 01R'\" : \" 01R2\";\n\n        moveString += move(\" \",current.z+1,\"D\");\n    }\n    else{\n        if(currentSide!==\"R\"){\n            moveString= move(\"\",current.y+1,\"F\");\n        }\n        else {\n            if(current.y!==dim-(solved.x+1)||current.z!==solved.z){\n                moveString = \"01R\";\n            }\n            else {\n                moveString = move(\"\",current.y+1,\"F'\");\n                moveString += move(\" \",current.z+1,\"D'\");\n                if((current.y>= middle&&current.z>=middle) ||\n                   (current.y< middle&&current.z<middle))\n                    moveString += \" 01L\"\n                else\n                    moveString += \" 01L'\"\n\n                moveString += move(\" \",current.y+1,\"F\");\n                \n                if((current.y>= middle&&current.z>=middle) ||\n                   (current.y< middle&&current.z<middle))\n                    moveString += \" 01L'\"\n                else\n                    moveString += \" 01L\"\n\n                moveString += move(\" \",current.z+1,\"D\");\n            }\n        }\n    }\n\n    return moveString\n}\n\nmodule.exports = solveYellowMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      blue.js\n *      Started: Saturday, December 14, 2019\n *      Finished: Friday, February 7, 2020\n * \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveBlueMiddle = (current,solved,dim) => {\n\n    let currentSide = \"F\";\n    let middle = Math.floor(dim/2);\n    let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    \n    //console.log(`Currently on side: ${currentSide}`);\n    //console.log(`Current position: ${JSON.stringify(current)}`);\n    //console.log(`Solved position: ${JSON.stringify(solved)}`);\n\n    if(currentSide===\"U\"){\n\n        moveString = move(\"\",current.y+1,\"F\");//1\n        moveString += move(\" \",current.x+1,\"U2\");//2\n\n        if( isOddCube && current.y===middle) moveString+= \" 01L'\";//2.1\n\n        moveString += move(\" \",current.y+1,\"F'\");//3\n\n        if( isOddCube && current.y===middle) moveString+= \" 01L\";//3.1\n\n        moveString += move(\" \",current.x+1,\"U2\");//4\n    }\n\n    else if(currentSide===\"R\"){\n        \n        if((dim-current.z)===(solved.x+1) && current.y===solved.y){\n\n            moveString = move(\"\",solved.x+1,\"U2\");//6\n\n            if(isOddCube && solved.y===middle) moveString += \" 01L'\";//6.1\n\n            moveString += move(\" \",solved.y+1,\"F\");//7\n\n            if(isOddCube && solved.y===middle) moveString += \" 01L\";//7.1\n\n            moveString += move(\" \",solved.x+1,\"U2\");//8\n            moveString += move(\" \",solved.y+1,\"F'\");//9\n            \n        } else {\n\n            moveString = \"01R'\"//5\n            \n        }\n    }\n\n    else if(currentSide===\"L\"){\n        //console.log(\"solve from left side to top side\");\n\n        if(current.z===solved.x && current.y===solved.y){\n            //console.log(\"in place for step 6-9\");\n\n            moveString = move(\"\",current.z+1,\"D2\");//6\n            if(isOddCube && solved.y===middle) moveString += \" 01R\";//6.1\n            moveString += move(\" \",solved.y+1,\"F'\");//7\n            if(isOddCube && solved.y===middle) moveString += \" 01R'\";//7.1\n            moveString += move(\" \",current.z+1,\"D2\");//8\n            moveString += move(\" \",solved.y+1,\"F\");//9\n            \n        } else {\n            //console.log(\"rotating left side\");\n\n            moveString = \"01L\"//5\n        }\n    }\n\n    else {\n        //console.log(\"move from back side to right side\");\n\n        if(current.y!==solved.y){\n            moveString = \"01D\";\n        }\n        else{\n            moveString = move(\"\",solved.y+1,\"F'\");\n            moveString += \" 01R\";\n            moveString += move(\" \",solved.y+1,\"F\");\n        }\n    }\n\n    return moveString;\n}\n\nmodule.exports = solveBlueMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      green.js\n *      Started: Saturday February 8, 2020\n *      Finished:Saturday February 8, 2020\n *      \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveGreenMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    // let middle = Math.floor(dim/2);\n    // let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n\n    // Temp 4x4 solver\n    if(dim===4){\n        if(currentSide === \"D\"){\n            if(index===16){\n                if(solved.x===current.x&&solved.y===current.y);\n                else moveString = \"01D\"\n            }\n\n            else if(index===17){\n                //console.log(\"on side D\")\n                if(solved.x===current.x&&solved.y===current.y);\n                else {\n                    moveString = move(\"\",current.y+1,\"F'\");\n                    moveString += \" 01R2\"\n                    moveString += move(\" \",current.y+1,\"F\");\n                }\n            }\n            else if(index===18){\n                // console.log(\"DID THIS SOLVE IT\")\n                moveString = move(\"\",dim-1,\"F'\");\n                moveString += \" 01R'\"\n                moveString += move(\" \",dim-1,\"F\");\n            }\n        }\n\n        if(currentSide === \"R\"){\n            if(index===16){\n                moveString = move(\"\",current.y+1,\"F\");\n                moveString += \" 01D2\"\n                moveString += move(\" \",current.y+1,\"F'\");\n            }\n\n            else if(index===17){\n                // console.log(\"solved from red to green\");\n                // console.log(current);\n                if(current.y===2 && current.z===2){\n                    // console.log(\"solve it\");\n                    moveString = \"01D\";\n                    moveString += move(\" \", dim-1, \"F\");\n                    moveString += \" 01D'\";\n                    moveString += move(\" \", dim-1, \"F'\");\n                    \n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n            \n            else if(index===18){\n                if(current.y===2 && current.z===1){\n                    // console.log(\"solve it\");\n                    moveString = \"01R\";\n                    moveString += move(\" \",dim-1,\"F'\");\n                    moveString += \" 01R'\";\n                    moveString += move(\" \",dim-1,\"F\");\n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n            else if(index===19){\n                // console.log(\"calculating move\");\n                if(current.y===1 && current.z===2){\n                    moveString=\"03F'\";\n                    moveString+=\" 01R'\";\n                    moveString+=\" 03F\";\n                    moveString+=\" 01R\";\n                    moveString+=\" 03F'\";\n                    moveString+=\" 01R\";\n                    moveString+=\" 03F\";\n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n        }\n    }\n\n    // ORIGINAL SIDE 4 code.\n    // Leaves opposite sides as last 2 faces, code left incase revisited\n\n    // if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R'\";\n    //         else moveString += \" 01R\";\n    //     }\n\n    //     moveString += move(\" \",current.x+1,\"U2\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R1\";\n    //         else moveString += \" 01R\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n\n    //     moveString += move(\" \",current.y+1,\"F'\");\n    //     moveString += move(\" \",current.x+1,\"U2\");\n    // }\n\n    // else if (currentSide===\"R\"){\n    //     if(current.y===solved.y&&current.z===solved.x){\n    //         moveString = move(\"\",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a'\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01R'\"\n    // }\n\n    // else if (currentSide===\"L\"){\n    //     if(current.y===solved.y&&current.z===(dim-(solved.x+1))){\n    //         moveString = move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a'\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01L\"\n    // }\n\n    return moveString;\n}\n\nmodule.exports = solveGreenMiddle;\n\n","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      red.js\n *      Started: \n * \n *    \n */\n\nfunction move(space,depth,side){\n    return (space + (depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveOrangeMiddle = (current,solved,dim) => {\n\n    let currentSide = \"F\";\n    // let middle = Math.floor(dim/2);\n    // let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    \n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n\n    if(dim===4){\n        //console.log(\"4x4 orange middle solver here\");\n        switch(currentSide){\n            case 'L':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=\"01L\";\n                }\n                else if(solved.x === 0 && solved.y === 1 && solved.z === 1){\n                    moveString+=move(\"\",current.y+1,\"F'\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F\");\n                }\n                else if(solved.x === 0 && solved.y === 2 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F'\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F\");\n                }\n                break;\n            case 'D':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F\");\n                    moveString+=\" 01L2\";\n                    moveString+=move(\" \",current.y+1,\"F'\");\n                }\n                else if(solved.x === 0 && solved.y === 1 && solved.z === 1){\n                    if(current.x===2 && current.y===2){\n                        moveString=\"01L\"\n                        moveString+=\" 02F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 02F\";\n                    }\n                    else{\n                        moveString+=\"01D\";\n                    }\n                }\n                else if(solved.x === 0 && solved.y === 2 && solved.z === 2){\n                    if(current.y===1 && current.x===1){\n                        moveString+=\"03F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 03F\";\n                    }\n                    else{\n                        moveString=\"01D\";\n                    }\n                }\n                else {\n                    if(current.y===1 && current.x===2){\n                        moveString+=\"03F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 03F\";\n                        moveString+=\" 01D\";\n                        moveString+=\" 03F'\";\n                        moveString+=\" 01D\";\n                        moveString+=\" 03F\";\n                    }\n                    else{\n                        moveString=\"01D\";\n                    }\n                }\n                break;\n            case 'R':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F2\");\n                    moveString+=\" 01L2\";\n                    moveString+=move(\" \",current.y+1,\"F2\");\n                }\n                else {\n                    moveString+=move(\"\",current.y+1,\"F\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F'\");\n                }\n                break;\n            default:\n                console.log(\"Something broke\");\n        }\n    }\n    else if(dim===5){\n        //console.log(\"5x5 orange middle solver here\");\n    }\n    else {\n        //console.log(\"6x6 and greater orange middle solver here\");\n    }\n\n    // if((current.x===0 && current.y===middle && current.z===middle && isOddCube)|| \n    //     (current.x===solved.x && current.y===solved.y && current.z===solved.z)){\n    //     return moveString;\n    // }\n    // else if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R'\";\n    //         else moveString += \" 01R\";\n    //     }\n\n    //     moveString += move(\" \",current.x+1,\"U2\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R1\";\n    //         else moveString += \" 01R\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n\n    //     moveString += move(\" \",current.y+1,\"F'\");\n    //     moveString += move(\" \",current.x+1,\"U2\");\n    // }\n\n    // else if (currentSide===\"R\"){\n    //     if(current.y===solved.y&&current.z===solved.x){\n    //         moveString = move(\"\",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a'\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01R'\"\n    // }\n\n    // else if (currentSide===\"L\"){\n    //     if(current.y===solved.y&&current.z===(dim-(solved.x+1))){\n    //         moveString = move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a'\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01L\"\n    // }\n\n// ############################################################\n\n    // if(currentSide===\"L\"){\n    //     if(solved.y===current.y){\n    //         moveString = move(\"\",current.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D' \";\n    //         } else { moveString += \" 01D2 \"; }\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n                \n    //         } else {\n    //             moveString += \" 01D \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += \" 01R2\";\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n                \n    //         } else {\n    //             moveString += \" 01D' \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D \";\n    //         } else {\n    //             moveString += \" 01D2 \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //     }\n    //     else{\n    //         moveString = move(\"\",current.y+1,\"F'\");\n    //         moveString += \" 01D\";\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //     }\n\n    // }\n    // if(currentSide===\"R\"){\n    //     // this solver is hard. console.log the moves but return an empty string so you can see the move it's trying\n    //     if(current.y===solved.y && solved.z === dim-(current.z+1)){\n    //         moveString = move(\"\",solved.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D\";\n    //         } else { moveString += \" 01D2\"; }\n\n    //         moveString += move(\" \",solved.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D'\";\n    //         } else { moveString += \" 01D2\"; }\n\n    //         moveString += \" 01R\"\n    //         moveString += \" 01D\"\n\n    //         moveString += move(\" \",current.z+1,\"F\");\n\n    //         if(current.y>middle){\n    //             moveString += \" 01D\";\n    //         } else {moveString += \" 01D'\";}\n\n    //         moveString += move(\" \",current.z+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //         } else {moveString += \" 01D\";}\n\n    //         moveString += move(\" \",solved.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D'\";\n    //         } else {moveString += \" 01D2\";}\n\n    //         moveString += move(\" \",solved.y+1,\"F\");\n\n    //         console.log(\"Test moves: \",moveString);\n    //         moveString = \"\";\n    //         // piece should be in place on displaced solved row on D (column d)\n    //         //               d\n    //         // D = [ 0 0 0 0 0 0 0 ]\n    //         //     [ 0 n n n P n 0 ]\n    //         //   x [ 0 n n n U n 0 ]\n    //         //     [ 0 n n X U n 0 ]\n    //         //     [ 0 n n n U n 0 ]\n    //         //     [ 0 n n n U n 0 ]\n    //         //     [ 0 0 0 0 0 0 0 ]\n\n    //         // Idea : find way to figure out what d and x will be, will make next 3 steps easier\n    //         // \n    //         // \n\n    //         // Rotate D to avoid misplacements when putting blue back in place (row x)\n\n    //         // Rotate D to move out of blue path onto L\n\n    //         // Rotate D into path so solved row gets replaced when blue gets moved from L to U\n            \n\n    //     }\n    //     else {\n    //         moveString = \"01R\"\n    //     }\n    // }\n    // if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F'\");\n\n    //     if(isOddCube && current.y===middle){\n    //         moveString += \" 01R'\";\n    //     } else {moveString += \" 01R2\";}\n\n    //     moveString += move(\" \",current.y+1,\"F\");\n    // }\n\n\n\n\n    return moveString;\n\n}\n\nmodule.exports = solveOrangeMiddle;","function move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nfunction extractFromFront(current,maxCoord,minCoord){\n    if(current.z===maxCoord){\n        return `${move(\"\",current.x+1,\"L'\")} 01B' 01R 01B ${move(\"\",current.x+1,\"L\")} 01R'`\n    }\n    else if(current.x===maxCoord){\n        return `${move(\"\",current.z+1,\"D\")} 01B' 01D 01B ${move(\"\",current.z+1,\"D'\")} 01D'`\n    }\n    else if(current.z===minCoord){\n        return `${move(\"\",current.x+1,\"L\")} 01B' 01L 01B ${move(\"\",current.x+1,\"L'\")} 01L'`\n    }\n    else if(current.x===minCoord){\n        return `${move(\"\",current.z+1,\"D'\")} 01B' 01U 01B ${move(\"\",current.z+1,\"D\")} 01U'`\n    }\n}\n\nfunction moveFromMiddleToBack(current,maxCoord,minCoord,whiteSide){\n    if(current.x===maxCoord && current.z===maxCoord){// Top Right\n        if(whiteSide===1){\n            return `01U' 01B 01U`\n        }\n        else{\n            return `01R 01B 01R'`\n        }\n    }\n    if(current.x===minCoord && current.z===maxCoord){// Top Left\n        if(whiteSide===1){\n            return `01U 01B 01U'`\n        }\n        else {\n            return `01L' 01B 01L`\n        }\n    }\n    if(current.x===maxCoord && current.z===minCoord){// Bottom Right\n        if(whiteSide===5){\n            return `01D 01B 01D'`\n        }\n        else {\n            return `01R' 01B 01R`\n        }\n    }\n    if(current.x===minCoord && current.z===minCoord){// Bottom Left\n        if(whiteSide===1){\n            return `01D' 01B 01U`\n        }\n        else {\n            return `01L 01B 01L'`\n        }\n    }\n}\n\nfunction flipPieceOnBack(current,maxCoord,minCoord){\n    if(current.z===maxCoord){//top\n        return `01U 01R 01B2 01R' 01U' 01B'`\n    }\n    else if(current.x===maxCoord){//right\n        return `01R 01D 01B2 01D' 01R' 01B'`\n    }\n    else if(current.z===minCoord){//down\n        return `01D 01L 01B2 01L' 01D' 01B'`\n    }\n    else if(current.x===minCoord){//left\n        return `01L 01U 01B2 01U' 01L' 01B'`\n    }\n}\n\nfunction solveFromBackToFront(current,solved,maxCoord,minCoord){\n    if(current.z===maxCoord&&solved.z===maxCoord){\n        return `${move(\"\",current.x+1,\"L\")} 01F 01R' 01F' ${move(\"\",current.x+1,\"L'\")} 01F 01R 01F'`\n    }\n    else if(current.x===maxCoord && solved.x===maxCoord){\n        return `${move(\"\",current.z+1,\"D'\")} 01F 01D' 01F' ${move(\"\",current.z+1,\"D\")} 01F 01D 01F'`\n    }\n    else if(current.z===minCoord && solved.z===minCoord){\n        return `${move(\"\",current.x+1,\"L'\")} 01F 01L' 01F' ${move(\"\",current.x+1,\"L\")} 01F 01L 01F'`\n    }\n    else if(current.x===minCoord && solved.x===minCoord){\n        return `${move(\"\",current.z+1,\"D\")} 01F 01U' 01F' ${move(\"\",current.z+1,\"D'\")} 01F 01U 01F'`\n    }\n    else return ``\n}\n\n\n\nlet solveFrontEdgeSegments = (current,solved,dim,whiteSide) => {\n    const BACK=3;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n    let moveString = \"\";\n    // let solvedPosition = \"top\";\n\n    // if(solved.x===maxCoord) {solvedPosition = \"right\";}\n    // else if(solved.z===minCoord) {solvedPosition = \"bottom\";}\n    // else if(solved.x===minCoord) {solvedPosition = \"left\";}\n    \n    if(current.y===minCoord){\n        moveString = extractFromFront(current,maxCoord,minCoord);\n    }\n    else if(current.y>minCoord&&current.y<maxCoord){\n        moveString = moveFromMiddleToBack(current,maxCoord,minCoord,whiteSide);\n    }\n    else if(current.y===maxCoord && whiteSide===BACK){\n        moveString = flipPieceOnBack(current,maxCoord,minCoord);\n    }\n    else if(current.z===solved.z&&current.x===solved.x){\n        moveString = solveFromBackToFront(current,solved,maxCoord,minCoord);\n    }\n    else {\n        moveString = `01B`;\n    }\n        \n    \n\n    return moveString;\n}\n\nmodule.exports = solveFrontEdgeSegments;","function move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveBackEdgeSegments = (current,solved,dim,yellowSide) => {\n    const UP=1,RIGHT=2,LEFT=4,DOWN=5;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n    let moveString = \"\";\n    // let solvedPosition = \"top\";\n    // let inMiddleSection = current.y > minCoord && current.y < maxCoord;\n\n    // if(solved.x===maxCoord) {solvedPosition = \"right\";}\n    // else if(solved.z===minCoord) {solvedPosition = \"bottom\";}\n    // else if(solved.x===minCoord) {solvedPosition = \"left\";}\n\n    // Solves top back edge\n    if(solved.z===maxCoord){\n        // top right middle edge\n        if(current.y<maxCoord && current.z===maxCoord && current.x===maxCoord){ //a\n            // if yellow side is on the right face (red center)\n            if(yellowSide===RIGHT){//a.1\n                //console.log(\"solve it\");\n                moveString = `01L' 01B 01L ${move(\"\",current.y+1,\"F'\")} 01L' 01B 01L 01B2 ${move(\"\",current.y+1,\"F\")}`;\n            }\n            // if yellow side is on the upward face (blue center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01R 01B 01R' 01B' 01U' 01B 01U`;\n            }\n        }\n        // top back edge (wrong position)\n        else if(current.z===solved.z && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01L' 01B 01L ${move(\"\",dim-(current.x),\"F'\")} 01L' 01B 01L 01B2 ${move(\"\",dim-(current.x),\"F\")}`;\n        }\n        // back edge that isn't top\n        else if(current.y===maxCoord && !(current.z===maxCoord)){ // c\n            moveString = `01U' 01B 01U`;\n        }\n        // middle edge that isn't top right (just places piece on back edges)\n        else if(current.y!==maxCoord){ // d\n            if(current.z===maxCoord && current.x===minCoord){\n                moveString = `01L' 01B' 01L 01B`\n            }\n            else if(current.z===minCoord && current.x===minCoord){\n                moveString = `01L 01B' 01L' 01B`\n            }\n            else if(current.z===minCoord && current.x===maxCoord){\n                moveString = `01R' 01B 01R 01B'`\n            }\n        }\n    }\n    // Solves right back edge\n    else if(solved.x===maxCoord){\n        if(current.y<maxCoord && current.z===minCoord && current.x===maxCoord){ //a\n            // if yellow side is on the down face (green center)\n            if(yellowSide===DOWN){//a.1\n                //console.log(\"solve it\");\n\n                // 01U' 01B 01U (02F' c.y+1) 01U' 01B 01U 01B2 (02F c.y+1) // converted\n                moveString = `01U' 01B 01U ${move(\"\",current.y+1,\"F'\")} 01U' 01B 01U 01B2 ${move(\"\",current.y+1,\"F\")} 01R' 01B2 01R`;\n            }\n            // if yellow side is on the right face (red center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01D 01B 01D' 01B' 01R' 01B 01R2 01B' 01R'`;\n            }\n        }\n\n        // b // change coords + small mod to algo\n        else if(current.x===solved.x && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01U' 01B 01U ${move(\"\",current.z+1,\"F'\")} 01U' 01B 01U 01B2 ${move(\"\",current.z+1,\"F\")} 01R' 01B2 01R`;\n        }\n\n\n        // c // hard code those instead of generalizing\n        else if(current.y===maxCoord){\n            if(current.z===minCoord){\n                moveString = `01R' 01B 01R2 01B' 01R'`;\n            } else if(current.x===minCoord){\n                moveString = `01R' 01B2 01R2 01B2 01R'`;\n            }\n        }\n\n        // d // change coords\n        else if(current.y!==maxCoord){\n            if(current.x===maxCoord && current.z===maxCoord){\n                moveString = `01B 01R 01B 01R' 01B2`\n            }\n            else if(current.x===minCoord && current.z===maxCoord){\n                moveString = `01L' 01B' 01L 01B`\n            }\n            else if(current.x===minCoord && current.z===minCoord){\n                moveString = `01D' 01B 01D 01B'`\n            }\n        }\n    }\n    // Solves bottom back edge\n    else if(solved.z===minCoord){\n        if(current.y<maxCoord && current.z===minCoord && current.x===minCoord){ //a\n            // if yellow side is on the left face (orange center)\n            if(yellowSide===LEFT){//a.1\n                //console.log(\"solve it\");\n                moveString = `01R' 01B 01R ${move(\"\",current.y+1,\"F'\")} 01R' 01B 01R 01B2 ${move(\"\",current.y+1,\"F\")} 01D 01U' 01B2 01D' 01U`;\n            }\n            // if yellow side is on the down face (green center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01L 01B 01L' 01B' 01D' 01B 01D2 01B' 01D' 01B' 01R' 01B' 01R 01B2`;\n            }\n        }\n\n        // b // change coords + small mod to algo\n        else if(current.z===solved.z && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01R' 01B 01R ${move(\"\",current.x+1,\"F'\")} 01R' 01B 01R 01B2 ${move(\"\",current.x+1,\"F\")} 01D 01U' 01B2 01D' 01U`;\n        }\n\n        else if(current.y===maxCoord){ // c\n            moveString = `01D' 01B 01D2 01B' 01D'`;\n        }\n        else if(current.y<maxCoord){\n            moveString = `01D 01R 01U 01B 01U' 01R' 01D'`;\n        }\n        // permutations of the original algo should work\n    }\n    else if(solved.x===minCoord){\n        const displace = `01R 01B' 01R' 01B 01U 01B 01U' 01B'`;\n        const solve = `01D' 01B 01D ${move(\"\",current.y+1,\"F'\")} 01D' 01B 01D 01B2 ${move(\"\",current.y+1,\"F\")} 01L 01R' 01B2 01R 01L'`;\n        const replace = `01B 01U 01B' 01U' 01B' 01R 01B 01R'`\n        const flip = `01R 01B 01R' 01B' 01U' 01B 01U2 01B' 01U' 01B' 01L' 01B' 01L 01B2`\n\n        if(current.y<maxCoord && current.z===maxCoord && current.x===maxCoord){ //a\n            // if yellow side is on the left face (orange center)\n            if(yellowSide===RIGHT){//a.1\n                //console.log(\"solve it\");\n                moveString = `${displace} ${solve} ${replace}`;\n            }\n            // if yellow side is on the down face (green center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `${flip}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===maxCoord && current.x===minCoord){ //a\n            if(yellowSide===UP){//a.1\n                //console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f'\")}`;\n            }\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f\")} ${flip} ${move(\"\",dim-1,\"f'\")}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===minCoord && current.x===minCoord){ //a\n            if(yellowSide===LEFT){//a.1\n                // console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f2\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f2\")}`;\n            }\n            else {//a.2\n                // console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f2\")} ${flip} ${move(\"\",dim-1,\"f2\")}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===minCoord && current.x===maxCoord){ //a\n            if(yellowSide===DOWN){//a.1\n                // console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f'\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f\")}`;\n            }\n            else {//a.2\n                // console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f'\")} ${flip} ${move(\"\",dim-1,\"f\")}`;\n            }\n        }\n\n        else if(current.x===solved.x && current.y===solved.y){ // b\n            // console.log(\"remove it\");\n            moveString = `${displace} 01D' 01B 01D ${move(\"\",dim-current.z,\"F'\")} 01D' 01B 01D 01B2 ${move(\"\",dim-current.z,\"F\")} 01L 01R' 01B2 01L' 01R 01L 01D 01R 01B 01R' 01D' 01L'`;\n        }\n    }\n\n\n    return moveString;\n}\n\nmodule.exports = solveBackEdgeSegments;","// function move(space,depth,side){\n//     return (space+(depth<10? \"0\":\"\") + depth + side);\n// }\n\nlet solveMiddleEdgeSegments = (current,solved,dim,blueSide,greenSide) => {\n    const maxCoord = dim-1;\n    const minCoord = 0;\n\n    let moveString = \"\";\n\n    // where blue and orange meet\n    let firstEdge = (solved.x===minCoord && solved.z===maxCoord);\n    // where blue and red meet\n    let secondEdge = (solved.x===maxCoord && solved.z===maxCoord);\n    // where green and red meet\n    let thirdEdge = (solved.x===maxCoord && solved.z===minCoord);\n\n    // flip edge segment in place\n    let flip = \"01R 01U' 01B 01R' 01U\";\n    // move solved edge to flip location to flip and then return\n    let firstPieceFlip = \"01U2 01R 01U' 01B 01R' 01U'\";\n\n    let flip2 = \"01D 01R' 01B 01D' 01R\";\n    let firstPieceFlip2 = \"01R2 01D 01R' 01B 01D' 01R'\";\n\n    let flip3 = \"01L 01D' 01B 01L' 01D\";\n    let firstPieceFlip3 = \"01D2 01L 01D' 01B 01L' 01D'\";\n\n    // solves piece diagonally to solved location\n    let solveUp = \"01F 02F 01R 01U' 01B 01R' 01U 01F' 02F'\";\n    let solveDown = \"03F 04F 01R 01U' 01B 01R' 01U 03F' 04F'\";\n\n    let solveUp2 = \"01F 02F 01D 01R' 01B 01D' 01R 01F' 02F'\";\n    let solveDown2 = \"03F 04F 01D 01R' 01B 01D' 01R 03F' 04F'\";\n\n    let solveUp3 = \"01F 02F 01L 01D' 01B 01L' 01D 01F' 02F'\";\n    let solveDown3 = \"03F 04F 01L 01D' 01B 01L' 01D 03F' 04F'\";\n\n    if(dim===4){\n        if(firstEdge){\n            if(current.x===minCoord&&current.z===maxCoord){\n                moveString=firstPieceFlip;\n            }\n            else if(current.x===maxCoord&&current.z===maxCoord){\n                if(current.y===solved.y){\n                    moveString=flip;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp;\n                    }\n                    else{\n                        moveString=solveDown;\n                    }\n                }\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                moveString=\"01D2 01R2\";\n            }\n            else if(current.x===maxCoord&&current.z===minCoord){\n                moveString=\"01R2\";\n            }\n        }\n        else if(secondEdge){\n            if(current.x===maxCoord&&current.z===maxCoord){\n                moveString=firstPieceFlip2;\n            }\n            else if(current.x===maxCoord&&current.z===minCoord){\n                if(current.y===solved.y){\n                    moveString=flip2;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp2;\n                    }\n                    else{\n                        moveString=solveDown2;\n                    }\n                }\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                moveString=\"01D2\";\n            }\n        }\n        else if(thirdEdge){\n            if(current.x===maxCoord&&current.z===minCoord){\n                moveString=firstPieceFlip3;\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                if(current.y===solved.y){\n                    moveString=flip3;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp3;\n                    }\n                    else{\n                        moveString=solveDown3;\n                    }\n                }\n            }\n        }\n    }\n    return moveString;\n}\n\nmodule.exports = solveMiddleEdgeSegments;","import React from \"react\";\nimport \"./Nav.css\";\nimport {DropdownButton,Dropdown} from 'react-bootstrap'\nimport 'react-dropdown/style.css'\nimport Popup from \"reactjs-popup\";\n\nconst Navbar = props => (\n  <nav className=\"navbar navbar-dark fixed-top bg-dark\">\n    <ul className=\"nav nav-justified mr-auto\">\n      <li className=\"nav-item nav-fix-for-edge\">\n        <p className=\"navbar-brand\" style={{color:\"lightgray\"}}><b>{props.title}</b></p>\n\n          {/*Open model here. Show bunch of settings. Pass changeSettings down to component to apply changes*/}\n          <DropdownButton className=\"settings\" aria-label=\"settings\" id=\"settings\" title={<i className='fa fa-cog'></i>}>\n          <ul>\n            <li>\n              \n              Stats <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" data-toggle=\"toggle\" onClick={() => props.changeSettings('displayStats')}></input>\n                {props.state.showStats ? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n\n            <li>\n              \n              Move Input <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" data-toggle=\"toggle\" onClick={() => props.changeSettings('displayMoveInput')}></input>\n                {props.state.showMoveInput ? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n\n            <li>\n              \n              Move Hints <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" defaultChecked data-toggle=\"toggle\" onClick={() => props.changeSettings('displayHints')}></input>\n                {props.state.showHints? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n            \n          </ul>\n\n        </DropdownButton>\n        <DropdownButton title=\"Cubes\" className=\"cubes\">\n\n          {props.isLocal ?\n          <>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=2\" style={{backgroundColor:\"lightgrey\"}}>2 X 2 X 2</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=3\">3 X 3 X 3</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=4\" style={{backgroundColor:\"lightgrey\"}}>4 X 4 X 4</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=5\">5 X 5 X 5</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=6\" style={{backgroundColor:\"lightgrey\"}}>6 X 6 X 6</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=7\">7 X 7 X 7</Dropdown.Item>\n          </>:\n          <>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=2\" style={{backgroundColor:\"lightgrey\"}}>2 X 2 X 2</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=3\">3 X 3 X 3</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=4\" style={{backgroundColor:\"lightgrey\"}}>4 X 4 X 4</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=5\">5 X 5 X 5</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=6\" style={{backgroundColor:\"lightgrey\"}}>6 X 6 X 6</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=7\">7 X 7 X 7</Dropdown.Item>\n          </>}\n\n          \n        </DropdownButton>\n        \n      </li>\n    </ul>\n    <div style={{float:\"right\"}} >\n    <Popup trigger={<button id=\"triggerBtn\">Info</button>}>\n        {close => (\n          <div style={{zIndex:\"100\",width:\"100%\",height:\"100%\"}}>\n            <div className=\"shadeBackground\" style={{backgroundColor:\"black\",zIndex:\"101\"}} onClick={close}></div>\n            <div style={{zIndex:\"102\",width:\"max-content\",margin:\"auto\",transform:\"translateX(-50%)\"}} className=\"popupDiv\">\n              <b style={{fontSize: \"2rem\"}}>Instructions</b>\n              <button className=\"close\" id=\"closeBtn\" onClick={close}>\n                &times;\n              </button>\n              <hr style={{backgroundColor:\"#007bff\",marginBottom:\"0\"}}></hr>\n              <div style={{backgroundColor:\"black\",marginTop:\"0\",color:\"#00C000\",fontSize:\"1rem\",textAlign:\"left\"}}>\n                <div style={{paddingTop: \"1rem\"}}>> Click and drag anywhere not on the cube to rotate.</div>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <div>> 1. Click and drag anywhere on the cube to make a move or</div>\n                <div>> 2. Use buttons(Moves) or keyboard to make turns: <br></br>\n                  <div style={{width:\"100%\",textAlign:\"center\"}}>\n                  <b style={{color: \"white\",backgroundColor:\"black\"}}> F, </b><b style={{color: \"white\",backgroundColor:\"black\"}}>f,</b>\n                  <b style={{color: \"blue\",backgroundColor:\"black\"}}> U, </b><b style={{color: \"blue\",backgroundColor:\"black\"}}>u,</b>\n                  <b style={{color: \"red\",backgroundColor:\"black\"}}> R, </b><b style={{color: \"red\",backgroundColor:\"black\"}}>r,</b>\n                  <b style={{color: \"yellow\",backgroundColor:\"black\"}}> B, </b><b style={{color: \"yellow\",backgroundColor:\"black\"}}>b,</b>\n                  <b style={{color: \"orange\",backgroundColor:\"black\"}}> L, </b><b style={{color: \"orange\",backgroundColor:\"black\"}}>l,</b>\n                  <b style={{color: \"green\",backgroundColor:\"black\"}}> D, </b><b style={{color: \"green\",backgroundColor:\"black\"}}>d </b> \n                  <p style={{width:\"100%\",textAlign:\"center\"}}>(lower case is clockwise, upper case is counterclockwise)</p>\n                  </div>\n                </div>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <div style={{marginBottom: \"0\",paddingBottom:\"1rem\"}}>> Author: Sasha Peters, <a target=\"#\" href=\"https://www.github.com/merpig\">github</a>, <a target=\"#\" href=\"https://www.github.com/merpig/RubiksProgram\">Project Repo</a></div>\n                <hr style={{backgroundColor:\"lightgrey\"}}></hr>\n                  <div style={{color: \"white\",backgroundColor:\"black\",textAlign:\"center\"}}>\n                  site design / cube © 2020 RubiksProgram\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Popup> {\" \"}\n      <button id=\"fullscreenBtn\" value=\"true\">Fullscreen</button>\n      \n      {/*<button className=\"btn btn-primary btn-circle btn-circle-sm m-1\" onClick={() => props.changeSettings([1],[\"Hello\"])}><i className=\"fa fa-cog\"></i></button> */}\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","import 'rc-slider/assets/index.css';\n\nimport React from 'react';\nimport Slider from 'rc-slider'\n\nconst style = { width: 100, position: \"fixed\", top: \"80px\", left: \"10px\",fontSize:\"1rem\"};\n\nconst Speeds = props => (\n\n    <div className=\"sliderDiv\" style = {style}>\n\n        {props.isDisabled ?\n        <Slider \n            defaultValue={40} \n            min={0} max={70} \n            step={10}\n            disabled\n        />\n        :\n        <Slider \n            defaultValue={40} \n            min={0} max={70} \n            step={10}\n            onChange={props.onSliderChange}\n        />}\n\n    </div>\n);\n\n\n\nexport default Speeds;","import React from \"react\";\nimport Draggable from 'react-draggable';\n\nconst MoveInput = (props) => {\n    const instructTurn = (e) => {\n        if(e.key==='Enter'){\n            props.algorithm(document.getElementById('moveInput').value,'Custom');\n        }\n        e.stopPropagation();\n    };\n\n    return (\n        <div style={{position: \"absolute\", zIndex: \"99\"}}>\n            <Draggable\n                handle=\".handle\"\n                defaultPosition={{x:/*window.innerWidth-220*/0 , y: 150}}\n                position={null}\n                grid={[50, 50]}\n                scale={1}\n                onStart={props.handleStart}\n                onDrag={props.handleDrag}\n                onStop={props.handleStop}>\n                <div>\n                    <div className=\"handle\" style={{color:\"grey\"}}>Drag from here</div>\n                    <div>\n                        <input placeholder=\"type moves here\" id=\"moveInput\" onKeyDown={instructTurn} style={{borderRadius: \"4px\", margin: \"1px\",border: \"1.5px solid #007bff\",width:\"200px\"}}></input>\n                        <button id=\"moveSubmit\" onClick={() => props.algorithm(document.getElementById('moveInput').value,'Custom')}>Enter</button>\n                    </div>\n                </div>\n            </Draggable>\n        </div>\n    );\n};\n\nexport default MoveInput;","import React from \"react\";\nimport \"./MenuWrapper/MenuWrapper.css\";\n\nconst Mobile = props => {\n\n        return (\n        <div className=\"menuWrapper\">\n            <div className=\"mobileLeftPanel\">\n\n            </div>\n            <div className=\"mobileRightPanel\">\n                \n            </div>\n        </div>)\n\n}\n\nexport default Mobile;","let algorithms = [\n    {\n        name : \"Cross\",\n        moves: \"01R 01R 01L' 01D 01F 01F 01R' 01D' 01R' 01L 01U' 01D 01R 01D 01B 01B 01R' 01U 01D 01D\",\n        worksFor: [3,4]\n    },\n    {\n        name : \"Cube x2\",\n        moves: \"01F 01L 01F 01U' 01R 01U 01F 01F 01L 01L 01U' 01L' 01B 01D' 01B' 01L 01L 01U\",\n        worksFor: [2,3,4]\n    },\n    {\n        name : \"Cube x2\",\n        moves: \"02f 02f 02r 02r 02u' 02f' 04d 02b' 02u 02u 02b 02u' 02r' 03R 03R 02b 02b 03R 03R 03f 03f 03L 03L 03B 03B\",\n        worksFor: [6]\n    },\n    {\n        name : \"Cube x3\",\n        moves: \"01U' 01L' 01U' 01F' 01R 01R 01B' 01R 01F 01U 01B 01B 01U 01B' 01L 01U' 01F 01U 01R 01F'\",\n        worksFor: [3]\n    },\n    {\n        name : \"Cube x4\",\n        moves: \"01B' 02R 02R 02L 02L 01U 01U 02R 02R 02L 02L 01B 01F 01F 01R 01U' 01R 01U 01R 01R 01U 01R 01R 01F' 01U 01F' 01U 02U 01L 02L 01U' 02U' 01F 01F 02F 02F 01D 02D 01R' 02R' 01U 02U 01F 02F 01D 01D 02D 02D 01R 01R 02R 02R\",\n        worksFor: [4]\n    },\n    {\n        name : \"Cube x5\",\n        moves: \"01F 01U' 01B 01L 01U' 01F 01F 01U 01U 01F 01U 01F' 01U 01U 01D' 01B 01D 01L 01L 01B 01B 01U 02f 02u' 02b 02l 02u' 02f 02f 02u 02u 02f 02u 02f' 02u 02u 02d' 02b 02d 02l 02l 02b 02b 02u\",\n        worksFor: [5]\n    },\n    {\n        name : \"Six Spots\",\n        moves : \"01U 01D' 01R 01L' 01F 01B' 01U 01D'\",\n        worksFor: [3,4]\n    },\n    {\n        name : \"CheckerBoard\",\n        moves : \"01U 01U 01D 01D 01R 01R 01L 01L 01F 01F 01B 01B\",\n        worksFor: [3]\n    },\n    {\n        name : \"Checkerboard1\",\n        moves : \"01U' 01R 01R 01L 01L 01F 01F 01B 01B 01U' 01R 01L 01F 01B' 01U 01F 01F 01D 01D 01R 01R 01L 01L 01F 01F 01U 01U 01F 01F 01U' 01F 01F\",\n        worksFor: [3]\n    },\n    {\n        name: \"Checkerboard2\",\n        moves : \"01B 01D 01F' 01B' 01D 01L 01L 01U 01L 01U' 01B 01D' 01R 01B 01R 01D' 01R 01L' 01F 01U 01U 01D\",\n        worksFor: [3]\n    },\n    {\n        name: \"Anaconda\",\n        moves : \"01L 01U 01B' 01U' 01R 01L' 01B 01R' 01F 01B' 01D 01R 01D' 01F'\",\n        worksFor: [3]\n    },\n    {\n        name: \"Python\",\n        moves : \"01F 01F 01R' 01B' 01U 01R' 01L 01F' 01L 01F' 01B 01D' 01R 01B 01L 01L\",\n        worksFor: [3]\n    },\n    {\n        name: \"Rings\",\n        moves: \"02R 03R 04R 05R 02B' 03B' 04B' 01L 01L 02F 02B 01L 01L 02B' 02D' 03D' 04D' 05D' 02F' 01L 01L 02F 02B 01L 01L 02B' 02D 02D 03D 03D 04D 04D 05D 05D 03R 04R 01U' 03R' 04R' 02D' 03D' 04D' 05D' 03R 04R 01U 02R' 03R' 04R' 05R' 03F' 04F' 03R' 04R' 03F 04F 02F 03F 04F 05F 02L 02L 03L 03L 04L 04L 02F 02F 03R 03R 04R 04R 02B 02B 03B 03B 04B 04B 02L 02L\",\n        worksFor: [6]\n    },\n    {\n        name: \"Test f depth:2 multi turn\",\n        moves: \"02f 02f'\",\n        worksFor: []\n    },\n    {\n        name: \"Test u depth:2 multi turn\",\n        moves: \"02u 02u'\",\n        worksFor: []\n    },\n    {\n        name: \"Test r depth:2 multi turn\",\n        moves: \"02r 02r'\",\n        worksFor: []\n    },\n    {\n        name: \"Test b depth:2 multi turn\",\n        moves: \"02b 02b'\",\n        worksFor: []\n    },\n    {\n        name: \"Test d depth:2 multi turn\",\n        moves: \"02d 02d'\",\n        worksFor: []\n    },\n    {\n        name: \"Test l depth:2 multi turn\",\n        moves: \"02l 02l'\",\n        worksFor: []\n    },\n]\n\nexport default algorithms;","// Functions to generate/manipulate cube\n\nconst cube = {\n    // Generates the inital solved state of rubiksObject\n    generateSolved : function (_x,_y,_z){\n        const tempArr = [];\n        const middles = [];\n        const edges = [];\n        const corners = [];\n        const tempMiddles = [\n          [], // white\n          [], // yellow\n          [], // blue\n          [], // green\n          [], // orange\n          []  // red\n        ];\n        const tempEdges = [\n          [[],[],[],[]], // white edges\n          [[],[],[],[]], // middle edges\n          [[],[],[],[]]\n        ]\n    \n        for(let j = 0; j < _y; j++){      // Move back along the y-axis\n          for(let k = _z-1; k >= 0; k--){ // Move down through the z-axis\n            for(let i = 0; i < _x; i++){  // Traverse across the x-axis\n              let side0 = \"black\";\n              let side1 = \"black\";\n              let side2 = \"black\";\n              let side3 = \"black\";\n              let side4 = \"black\";\n              let side5 = \"black\";\n              let edgeType = null;\n              let middleType = null;\n              if(i===_x-1) side2 = \"red\";\n              else if (i===0) side4 =\"orange\";\n              if(j===_y-1) side3 = \"yellow\";\n              else if (j===0) side0 =\"white\";\n              if(k===_z-1) side1 = \"blue\";\n              else if (k===0) side5 =\"green\";\n              let tempCount = 0;\n              if(j===0 || j === _y-1) tempCount++;\n              if(k===0 || k === _z-1) tempCount++;\n              if(i===0 || i === _x-1) tempCount ++;\n              let tempType = \"none\";\n    \n              if(tempCount===1) {\n                tempType = \"middle\";\n                if(j===0) {tempMiddles[0].push(tempArr.length);middleType=tempMiddles[0].length+1}\n                if(j===_y-1) {tempMiddles[1].push(tempArr.length);middleType=tempMiddles[1].length+1}\n                if(k===_z-1) {tempMiddles[2].push(tempArr.length);middleType=tempMiddles[2].length+1}\n                if(i===0) {tempMiddles[3].push(tempArr.length);middleType=tempMiddles[3].length+1}\n                if(k===0) {tempMiddles[4].push(tempArr.length);middleType=tempMiddles[4].length+1}\n                if(i===_x-1) {tempMiddles[5].push(tempArr.length);middleType=tempMiddles[5].length+1}\n              }\n    \n              else if(tempCount===2) {\n                // do stuff in here to populate edges\n                tempType = \"edge\";\n                if(j === 0){\n                  if(k===_z-1){\n                    if(tempEdges[0][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][0].length+1);\n                    }\n                    tempEdges[0][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[0][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][1].length+1);\n                    }\n                    tempEdges[0][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[0][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][2].length+1);\n                    }\n                    tempEdges[0][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[0][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][3].length+1);\n                    }\n                    tempEdges[0][3].push(tempArr.length);\n                  }\n                } else if(j === _y-1){\n                  if(k===_z-1){\n                    if(tempEdges[1][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][0].length+1);\n                    }\n                    tempEdges[1][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[1][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][1].length+1);\n                    }\n                    tempEdges[1][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[1][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][2].length+1);\n                    }\n                    tempEdges[1][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[1][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][3].length+1);\n                    }\n                    tempEdges[1][3].push(tempArr.length);\n                  }\n                } else {\n                  if(k===_z-1 && i===0){\n                    if(tempEdges[2][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[2][0].length+1);\n                    }\n                    tempEdges[2][0].push(tempArr.length);\n                  }\n                  else if(k===_z-1 && i===_x-1){\n                    if(tempEdges[2][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][1].length+1);\n                    }\n                    tempEdges[2][1].push(tempArr.length);\n                  }\n                  else if(k===0 && i===_x-1){\n                    if(tempEdges[2][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][2].length+1);\n                    }\n                    tempEdges[2][2].push(tempArr.length);\n                  }\n                  else if(k===0 && i===0){\n                    if(tempEdges[2][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][3].length+1);\n                    }\n                    tempEdges[2][3].push(tempArr.length);\n                  }\n                }\n              }\n              else if(tempCount===3) {\n                tempType = \"corner\";\n                corners.push(tempArr.length);\n              }\n    \n              tempArr.push([side0,side1,side2,side3,side4,side5, // piece colors\n                            i,j,k, // Current position x,y,z\n                            i,j,k, // Solved position x,y,z\n                            tempType,\n                            edgeType,\n                            middleType\n                          ]);\n            }\n          }\n        }\n        \n        for(let i = 0; i < 6; i++){\n          for(let j = 0; j < (_x-2)*(_x-2); j++){\n            middles.push(tempMiddles[i][j]);\n          }\n        }\n\n        for(let i = 0; i < 3; i++){\n          for(let j = 0; j < 4; j++){\n            edges.push(...tempEdges[i][j]);\n          }\n        }\n        //console.log(tempArr);\n        return {tempArr,middles,edges,corners};\n    },\n\n    generateBlank : function (_x,_y,_z){\n      const tempArr = [];\n      // const middles = [];\n      // const edges = [];\n      const corners = [];\n      const tempMiddles = [\n        [], // white\n        [], // yellow\n        [], // blue\n        [], // green\n        [], // orange\n        []  // red\n      ];\n      const tempEdges = [\n        [[],[],[],[]], // white edges\n        [[],[],[],[]], // middle edges\n        [[],[],[],[]]\n      ]\n  \n      for(let j = 0; j < _y; j++){      // Move back along the y-axis\n        for(let k = _z-1; k >= 0; k--){ // Move down through the z-axis\n          for(let i = 0; i < _x; i++){  // Traverse across the x-axis\n            let side0 = \"black\";\n            let side1 = \"black\";\n            let side2 = \"black\";\n            let side3 = \"black\";\n            let side4 = \"black\";\n            let side5 = \"black\";\n            let edgeType = null;\n            let middleType = null;\n              if(i===_x-1) side2 = \"white\";\n              else if (i===0) side4 =\"white\";\n              if(j===_y-1) side3 = \"white\";\n              else if (j===0) side0 =\"white\";\n              if(k===_z-1) side1 = \"white\";\n              else if (k===0) side5 =\"white\";\n              let tempCount = 0;\n              if(j===0 || j === _y-1) tempCount++;\n              if(k===0 || k === _z-1) tempCount++;\n              if(i===0 || i === _x-1) tempCount ++;\n              let tempType = \"none\";\n    \n              if(tempCount===1) {\n                tempType = \"middle\";\n                if(j===0) {tempMiddles[0].push(tempArr.length);middleType=tempMiddles[0].length+1}\n                if(j===_y-1) {tempMiddles[1].push(tempArr.length);middleType=tempMiddles[1].length+1}\n                if(k===_z-1) {tempMiddles[2].push(tempArr.length);middleType=tempMiddles[2].length+1}\n                if(i===0) {tempMiddles[3].push(tempArr.length);middleType=tempMiddles[3].length+1}\n                if(k===0) {tempMiddles[4].push(tempArr.length);middleType=tempMiddles[4].length+1}\n                if(i===_x-1) {tempMiddles[5].push(tempArr.length);middleType=tempMiddles[5].length+1}\n              }\n    \n              else if(tempCount===2) {\n                // do stuff in here to populate edges\n                tempType = \"edge\";\n                if(j === 0){\n                  if(k===_z-1){\n                    if(tempEdges[0][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][0].length+1);\n                    }\n                    tempEdges[0][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[0][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][1].length+1);\n                    }\n                    tempEdges[0][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[0][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][2].length+1);\n                    }\n                    tempEdges[0][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[0][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[0][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[0][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[0][3].length+1);\n                    }\n                    tempEdges[0][3].push(tempArr.length);\n                  }\n                } else if(j === _y-1){\n                  if(k===_z-1){\n                    if(tempEdges[1][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][0].length+1);\n                    }\n                    tempEdges[1][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[1][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][1].length+1);\n                    }\n                    tempEdges[1][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[1][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][2].length+1);\n                    }\n                    tempEdges[1][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[1][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[1][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[1][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[1][3].length+1);\n                    }\n                    tempEdges[1][3].push(tempArr.length);\n                  }\n                } else {\n                  if(k===_z-1 && i===0){\n                    if(tempEdges[2][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][0].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\"+(tempEdges[2][0].length+1);\n                    }\n                    tempEdges[2][0].push(tempArr.length);\n                  }\n                  else if(k===_z-1 && i===_x-1){\n                    if(tempEdges[2][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][1].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][1].length+1);\n                    }\n                    tempEdges[2][1].push(tempArr.length);\n                  }\n                  else if(k===0 && i===_x-1){\n                    if(tempEdges[2][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][2].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][2].length+1);\n                    }\n                    tempEdges[2][2].push(tempArr.length);\n                  }\n                  else if(k===0 && i===0){\n                    if(tempEdges[2][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\"+(tempEdges[2][3].length+1);\n                    }\n                    else if(_x%2&&tempEdges[2][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                      edgeType=\"secondHalf\"+(tempEdges[2][3].length+1);\n                    }\n                    tempEdges[2][3].push(tempArr.length);\n                  }\n                }\n              }\n              else if(tempCount===3) {\n                tempType = \"corner\";\n                corners.push(tempArr.length);\n              }\n  \n            tempArr.push([side0,side1,side2,side3,side4,side5, // piece colors\n                          i,j,k, // Current position x,y,z\n                          i,j,k, // solved position x,y,z\n                          tempType,\n                          edgeType,\n                          middleType\n                        ]);\n          }\n        }\n      }\n      //console.log(tempArr);\n      return tempArr;\n    },\n\n    generateButtonData : function(size){\n        let numLayers = Math.floor(size/2);\n        let centerLayer = Math.ceil(size/2);\n        const faces = ['F','U','R','B','L','D'];\n        const buttons = {\n          center : [], // Center rotations\n          single : [], // Single layer\n          multi : []  // Multi layer\n        };\n\n        if(size%2)\n          buttons.center.push(\n            {clockwise: {name:\"C1\",data:[0,-1,centerLayer,false]},\n             counter: {name:\"C1'\",data:[0,0,centerLayer,false]}},\n            {clockwise: {name:\"C2\",data:[1,-1,centerLayer,false]},\n            counter: {name:\"C2'\",data:[1,0,centerLayer,false]}},\n            {clockwise: {name:\"C3\",data:[2,-1,centerLayer,false]},\n            counter: {name:\"C3'\",data:[2,0,centerLayer,false]}}\n          )\n\n        for (let i = 0; i < numLayers; i++){\n          for(let j = 0; j < faces.length; j++){\n            let baseNameSingle = ((i<10? \"0\" : \"\") + (i+1) + faces[j]);\n            let baseNameMulti = ((i<10? \"0\" : \"\") + (i+1) + faces[j].toLowerCase());\n\n            buttons.single.push({\n              clockwise: {face:faces[j], name:baseNameSingle, data:[j,-1,i+1,false]},\n              counter: {face:faces[j], name:baseNameSingle+\"'\",data:[j,0,i+1,false]}\n            });\n            if(i>0){\n              buttons.multi.push({\n                clockwise: {face:faces[j],name:baseNameMulti, data:[j,-1,i+1,true]},\n                counter: {face:faces[j],name:baseNameMulti+\"'\",data:[j,0,i+1,true]}\n              });\n            }\n          }\n        }\n\n        return buttons;\n    },\n\n    // For visual cube\n    rotatePoint : function (c1,c2,direction,p1,p2,rotation){\n        let theta = rotation*Math.PI/180;\n        if(direction < 0) theta*=-1; \n        return { p1 : (Math.cos(theta) * (p1-c1) - Math.sin(theta) * (p2-c2) + c1),\n                 p2 : (Math.sin(theta) * (p1-c1) + Math.cos(theta) * (p2-c2) + c2)}\n    },\n\n    // rotate pieces attached to face (visual cube)\n    /**\n     * \n     * Possible Optimization!\n     * \n     * Instead of turning each piece individually,\n     * group the pieces to be turned and then turn the group.\n     * - Pros\n     *    - Less Code\n     *    - Easier on the renderer\n     * \n     * - Cons\n     *    - Not sure where to attempt implementation\n     * \n     * Development Stage: Trial\n     * \n     * - Resources\n     *    - https://jsfiddle.net/of1vfhzz/1/\n     *    - https://stackoverflow.com/questions/37779104/how-can-i-rotate-around-the-center-of-a-group-in-three-js\n     */\n    rotatePieces : function (rotate,tempCubes,state,setState){\n\n      // state variables asigned for shorter names\n      let centerPoint = state.cubeDimension/2-.5;\n      let cubes = state.cubes;\n      let turnDirection = state.turnDirection;\n      let speed = state.speed;\n      let start = state.start;\n      let face = state.face;\n      let cubeDepth = state.cubeDepth;\n      let isMulti = state.isMulti;\n\n      \n      //Rotate white center piece Face\n      if(face === 0){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n\n          //implement isMulti for all of these comparisons\n          if((isMulti || cubes[i].position.y > cubeDepth-2) && cubes[i].position.y < cubeDepth){\n            \n            // Turn piece based on rotation direction\n            turnDirection<0 ? cubes[i].rotation.y += .1745*speed/10 : cubes[i].rotation.y -= .1745*speed/10;\n\n            // Calculate circular movement\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,cubes[i].position.x,cubes[i].position.z,speed);\n\n            // corrects rounding errors\n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            \n            // set new locations for face 0\n            cubes[i].position.x = newPoint.p1;\n            cubes[i].position.z = newPoint.p2;\n          }\n        }     \n      }\n      // blue\n      if(face === 1){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n          if((isMulti || cubes[i].position.z < state.cubeDimension + 1 - cubeDepth) && cubes[i].position.z > state.cubeDimension - 1 - cubeDepth){\n            turnDirection<0 ? cubes[i].rotation.z -= .1745*speed/10 : cubes[i].rotation.z += .1745*speed/10;\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,cubes[i].position.x,cubes[i].position.y,10*speed/10);\n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            cubes[i].position.x = newPoint.p1;\n            cubes[i].position.y = newPoint.p2;\n          }\n        }\n      }\n      // red\n      if(face === 2){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n          if((isMulti || tempCubes[i].position.x < state.cubeDimension + 1 - cubeDepth) && cubes[i].position.x > state.cubeDimension - 1 - cubeDepth){\n            turnDirection<0 ? tempCubes[i].rotation.x -= .1745*speed/10 : tempCubes[i].rotation.x += .1745*speed/10;\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.y,tempCubes[i].position.z,10*speed/10);\n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            tempCubes[i].position.y = newPoint.p1;\n            tempCubes[i].position.z = newPoint.p2;\n          }\n        }\n      }\n      // yellow\n      if(face === 3){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n          if((isMulti || tempCubes[i].position.y < state.cubeDimension + 1 - cubeDepth) && cubes[i].position.y > state.cubeDimension - 1 - cubeDepth){\n            turnDirection<0 ? tempCubes[i].rotation.y += .1745*speed/10 : tempCubes[i].rotation.y -= .1745*speed/10;\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.x,tempCubes[i].position.z,10*speed/10);\n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            tempCubes[i].position.x = newPoint.p1;\n            tempCubes[i].position.z = newPoint.p2;\n          }\n        }\n      }\n      // orange\n      if(face === 4){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n          if((isMulti || tempCubes[i].position.x > cubeDepth-2) && cubes[i].position.x < cubeDepth){\n            turnDirection<0 ? tempCubes[i].rotation.x -= .1745*speed/10 : tempCubes[i].rotation.x += .1745*speed/10;\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.y,tempCubes[i].position.z,10*speed/10);              \n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            tempCubes[i].position.y = newPoint.p1;\n            tempCubes[i].position.z = newPoint.p2;\n          }\n        }\n      }\n      // green\n      if(face === 5){\n        for(let i = 0; i<state.rubiksObject.length;i++){\n          if((isMulti || tempCubes[i].position.z > cubeDepth-2) && cubes[i].position.z < cubeDepth){\n            turnDirection<0 ? tempCubes[i].rotation.z -= .1745*speed/10 : tempCubes[i].rotation.z += .1745*speed/10;\n            let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.x,tempCubes[i].position.y,10*speed/10);\n            if(start % 90 === 0){\n              newPoint.p1 = Math.round(newPoint.p1);\n              newPoint.p2 = Math.round(newPoint.p2);\n            }\n            tempCubes[i].position.x = newPoint.p1;\n            tempCubes[i].position.y = newPoint.p2;\n          }\n        }\n      } \n\n      return {start : start+speed,reload : true};\n    },\n    \n    // For memory cube\n    rotatePoint2 : function (c1,c2,direction,p1,p2){\n        let theta = Math.PI/2;\n        if(direction < 0) theta*=-1; \n        return { p1 : (- Math.sin(theta) * (p2-c2) + c1),\n                 p2 :   (Math.sin(theta) * (p1-c1) + c2)}\n    },\n\n    // Memory cube rotation (only rotates by 90 degrees at a time)\n    rotateFace : function (cubeFace,direction,cubeDepth,isMulti,cD,object){\n      let cubeDimension = cD;\n      let centerPoint = cD/2-.5;\n      let rubiksObject = [...object];\n      let degrees = 90;\n  \n      if(direction < 0)  degrees *=-1;\n  \n      // Side 0 (white center piece)\n      if (cubeFace === 0){ \n          for(let i = 0; i < rubiksObject.length; i++){\n  \n              // white side is y===0.\n              if ((isMulti || rubiksObject[i][7] > cubeDepth-2) &&\n                  rubiksObject[i][7] < cubeDepth){\n  \n                  // Rotate rubiksObject pieces to new location generated by rotatePoint2\n                  let newPoint = cube.rotatePoint2(centerPoint,\n                                                   centerPoint,\n                                                   degrees,\n                                                   rubiksObject[i][6],\n                                                   rubiksObject[i][8]);\n                  rubiksObject[i][6] = newPoint.p1;\n                  rubiksObject[i][8] = newPoint.p2;\n  \n                  // Unfortunately chunky\n                  // Swaps colors around on the face to match rotations\n                  if(direction === 0){\n                      let tempFace = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][2];\n                      rubiksObject[i][2] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][4];\n                      rubiksObject[i][4] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][4];\n                      rubiksObject[i][4] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][2];\n                      rubiksObject[i][2] = tempFace;\n                  }\n              }\n          }\n      }\n  \n      // Side 1 (blue center piece)\n      if (cubeFace === 1){\n          for(let i = 0; i < rubiksObject.length; i++){\n              if ((isMulti || rubiksObject[i][8] < cubeDimension+1-cubeDepth) &&\n                  rubiksObject[i][8]>cubeDimension-1-cubeDepth){\n                  let newPoint = cube.rotatePoint2(centerPoint,\n                                                   centerPoint,\n                                                   degrees,\n                                                   rubiksObject[i][6],\n                                                   rubiksObject[i][7]);\n                  rubiksObject[i][6] = newPoint.p1;\n                  rubiksObject[i][7] = newPoint.p2;\n                  if(direction === 0){\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][2];\n                      rubiksObject[i][2] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][4];\n                      rubiksObject[i][4] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][4];\n                      rubiksObject[i][4] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][2];\n                      rubiksObject[i][2] = tempFace;\n                  }\n              }\n          }\n      }\n      // Side 2 (red center piece)\n      if (cubeFace === 2){\n          for(let i = 0; i < rubiksObject.length; i++){\n              if ((isMulti || rubiksObject[i][6] < cubeDimension+1-cubeDepth) &&\n                  rubiksObject[i][6]>cubeDimension-1-cubeDepth){\n                  let newPoint = cube.rotatePoint2(centerPoint,\n                                                   centerPoint,\n                                                   degrees,\n                                                   rubiksObject[i][7],\n                                                   rubiksObject[i][8]);\n                  rubiksObject[i][7] = newPoint.p1;\n                  rubiksObject[i][8] = newPoint.p2;\n                  if(direction === 0){\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][1];\n                      rubiksObject[i][1] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][5];\n                      rubiksObject[i][5] = tempFace;\n                  }\n              }\n          }\n      }\n      // Side 3 (yellow center piece)\n      if (cubeFace === 3){\n          for(let i = 0; i < rubiksObject.length; i++){\n              if ((isMulti || rubiksObject[i][7] < cubeDimension+1-cubeDepth) && rubiksObject[i][7]>cubeDimension-1-cubeDepth){\n                  let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][6],rubiksObject[i][8]);\n                  rubiksObject[i][6] = newPoint.p1;\n                  rubiksObject[i][8] = newPoint.p2;\n                  if(direction === -1){\n                      let tempFace = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][4];\n                      rubiksObject[i][4] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][2];\n                      rubiksObject[i][2] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][2];\n                      rubiksObject[i][2] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][4];\n                      rubiksObject[i][4] = tempFace;\n                  }\n              }\n          }\n      }\n      // Side 4 (orange center piece)\n      if (cubeFace === 4){\n          for(let i = 0; i < rubiksObject.length; i++){\n              if ((isMulti || rubiksObject[i][6] > cubeDepth-2) && rubiksObject[i][6] < cubeDepth){\n                  let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][7],rubiksObject[i][8]);\n                  rubiksObject[i][7] = newPoint.p1;\n                  rubiksObject[i][8] = newPoint.p2;\n                  if(direction === -1){\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][1];\n                      rubiksObject[i][1] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][5];\n                      rubiksObject[i][5] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][5];\n                      rubiksObject[i][5] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][1];\n                      rubiksObject[i][1] = tempFace;\n                  }\n              }\n          } \n      }\n      // Side 5 (green center piece)\n      if (cubeFace === 5){\n          for(let i = 0; i < rubiksObject.length; i++){\n              if ((isMulti || rubiksObject[i][8] > cubeDepth-2) && rubiksObject[i][8] < cubeDepth){\n                  let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][6],rubiksObject[i][7]);\n                  rubiksObject[i][6] = newPoint.p1;\n                  rubiksObject[i][7] = newPoint.p2;\n                  if(direction === -1){\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][4];\n                      rubiksObject[i][4] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][2];\n                      rubiksObject[i][2] = tempFace;\n                  } else {\n                      let tempFace = rubiksObject[i][3];\n                      rubiksObject[i][3] = rubiksObject[i][2];\n                      rubiksObject[i][2] = rubiksObject[i][0];\n                      rubiksObject[i][0] = rubiksObject[i][4];\n                      rubiksObject[i][4] = tempFace;\n                  }\n              }\n          } \n      }\n  \n      //add the move updates to state\n      // setState({rubiksObject : rubiksObject}, () =>{\n      // });\n      return rubiksObject;\n    }\n}\n\nexport default cube;","import React from \"react\";\nimport \"./MenuOptions.css\"\nimport algorithms from \"../../cubeFunctions/algorithms\";\nimport cube from '../../cubeFunctions/cube';\n\nconst MenuOptions = props => {\n\n        const baseOptions = <>\n           <button id=\"Moves\" data=\"None\" onClick={optionClick} className=\"cpButton\">Moves</button>\n           <button id=\"ColorPicker\" data=\"Color Picker\" onClick={optionClick} className=\"cpButton\">Color Picker</button>\n           <button id=\"Solver\" data=\"Solving\" onClick={optionClick} className=\"cpButton\">Solver</button>\n           <button id=\"Algorithms\" data=\"None\" onClick={optionClick} className=\"cpButton\">Algorithms</button>\n        </>\n\n        let algorithmSet = [];\n                \n        algorithms.forEach(algo=>algo.worksFor.includes(props.state.cubeDimension)?\n            algorithmSet.push(<button id={algo.name} key={algo.name} className={props.state.activeAlgo===algo.name?\n                \"algoButton algoActive\":\"algoButton\"} onClick={(e)=>algoStart(e,props)}>{algo.name}</button>)\n                :\"\")\n        //console.log(algorithmSet);\n\n        function algoStart(e,props){\n            let cD = props.state.cubeDimension;\n            let algo = e.target.id;\n            let algoSet = [];\n            let generated = cube.generateSolved(cD,cD,cD);\n            algorithms.forEach(e=>{\n                if(e.name===algo&&e.worksFor.includes(cD)) algoSet.push(...e.moves.split(\" \"));\n            })\n            //console.log(algoSet);\n            props.setState({activeAlgo:algo,moveSet:[...algoSet],rubiksObject : generated.tempArr,solveable:true,solvedSet:[...algoSet],solvedSetIndex:0});\n        }\n\n        function optionClick(e){\n            // Already selected button (turns off)\n            if(e.target.classList.contains(\"activeMenu\")){\n                \n                switch(props.state.currentFunc){\n                    case \"Color Picker\":\n                        document.querySelector(\".warningPopup\").style.display=\"block\";\n                        break;\n                    case \"Solving\":\n                        document.querySelector(\".warningPopupSolver\").style.display=\"block\";\n                        break;\n                    case \"Algorithms\":\n                        //this.setState({currentFunc : \"None\",solveState : -1,autoPlay : false, playOne : false, isVisible : false, hoverData : [], solveMoves : \"\", prevSet : [], moveSet : [],targetSolveIndex:-1,solvedSet:[]});\n                        props.setState({activeMenu:\"\",currentFunc:\"Reset\",solvedSet:[],hoverData:[],prevSet:[],moveSet:[],isValidConfig:false,targetSolveIndex:-1, solveMoves : \"\",autoPlay:false,autoRewind:false,autoTarget: false,playOne : false,activeAlgo:\"none\"});\n                        break;\n                    default:\n                        document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n                        props.setState({activeMenu:\"\",currentFunct:\"None\"});\n                }\n            }\n            else {\n                if(props.state.currentFunc===\"None\") {\n                    if(props.state.activeMenu!==\"\"&&props.state.activeMenu!==null&&document.querySelector(\".activeMenu\")!==null) {\n                        document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n                    }\n                    e.target.classList.add(\"activeMenu\");\n                    if(e.target.id===\"ColorPicker\"){\n                        \n                        props.setState({activeMenu:e.target.id});\n                        props.beginColorPicker();\n                    }\n                    else if(e.target.id===\"Solver\"){\n                        props.setState({activeMenu:e.target.id});\n                        props.beginSolve();\n                    }\n                    else if(e.target.id===\"Algorithms\"){\n                        props.setState({activeMenu:e.target.id,currentFunc:\"Algorithms\",solveOnce:false,solvedSet:[],prevSet:[],moveSet:[]});\n                    }\n                    else props.setState({activeMenu:e.target.id,currentFunc:\"None\"});\n                }\n            }\n        }\n        return (\n        <div className=\"menuOptionsWrapper\">\n           {props.state.currentFunc===\"Solving\"?<><div style={{height:\"45%\"}}></div>\n           <button id=\"Solver\" data=\"Solving\" onClick={optionClick} className=\"cpButton activeMenu\">Exit</button></>:\n           props.state.currentFunc===\"Color Picker\"?<><div style={{paddingTop:\"45%\"}}></div>\n           <button id=\"ColorPicker\" data=\"Color Picker\" onClick={optionClick} className=\"cpButton activeMenu\">Exit</button></>:\n           props.state.currentFunc===\"Algorithms\"?<>\n           <div className=\"algoList\">\n                {algorithmSet}  \n            </div>\n           <button id=\"Algorithms\" data=\"Algorithms\" onClick={optionClick} className=\"cpButton activeMenu\">Exit</button></>:baseOptions}\n        </div>)\n\n}\n\nexport default React.memo(MenuOptions);","import React from \"react\";\nimport \"../MenuOptions/MenuOptions.css\"\n\nconst MenuOptionsOther = props => {\n\n    const baseOptions = <>\n        <div style={{width:\"100%\",height:\"13vh\"}}></div>\n        <button id=\"Scramble\" onClick={otherOptionClick} className=\"cpButton scramble\">\n            Scramble\n        </button>\n        <button id=\"Reset\" onClick={otherOptionClick} className=\"cpButton reset\">\n            Reset\n        </button>\n    </>\n\n    function otherOptionClick(e){\n        switch(e.target.id){\n            case 'Reset':\n                props.setState({activeMenu:\"\",currentFunc:\"Reset\"});\n                break;\n            case 'Scramble':\n                if(props.state.currentFunc===\"None\"){\n                    props.beginScramble();\n                }\n                break;\n            default:\n        }\n    }\n\n    return (\n        <div className=\"menuOptionsWrapper\">\n            {props.state.currentFunc===\"Solving\"||props.state.currentFunc===\"Color Picker\"||props.state.currentFunc===\"Algorithms\"?<><div style={{paddingTop:\"45%\"}}></div>\n                </>:baseOptions}\n        </div>\n    )\n\n}\n\nexport default React.memo(MenuOptionsOther);","import React from 'react';\nimport \"./Controls.css\";\n\n\nlet centerButtons=[];\nlet singleButtons=[];\nlet multiButtons=[];\nlet singleCols=[];\nlet multiCols=[];\nlet key=0;\n\nfunction namesToColors(face){\n    switch(face){\n        case 'F':\n            return {\n                bgc: 'white',\n                color: 'black',\n            }\n        case 'U':\n            return {\n                bgc: 'blue',\n                color: 'white',\n            }\n        case 'R':\n            return {\n                bgc: 'red',\n                color: 'white',\n            }\n        case 'B':\n            return {\n                bgc: 'yellow',\n                color: 'black',\n            }\n        case 'L':\n            return {\n                bgc: 'orange',\n                color: 'black',\n            }\n        case 'D':\n            return {\n                bgc: 'green',\n                color: 'white',\n            }\n        default:\n    }\n\n}\n\n//generate data for buttons and pass down to props. Better than trying to do in here\nconst Controls = props => {\n    centerButtons=[];\n    singleButtons=[];\n    multiButtons=[];\n    singleCols=[];\n    multiCols=[];\n\n    return (\n        <div id=\"controlsDiv\">\n            {\n                props.size%2 ? \n                <div className=\"centerMoves\" style={{marginRight: \"5px\"}}>\n                    <div className='centerLayerColumns'>\n                    {\n                        props.generatedButtons.center.forEach(element => {\n                            centerButtons.push(\n                                <div className=\"moveBtn\" \n                                        key={key} \n                                        onMouseDown={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                        style={{position:\"relative\", left: \"0px\",backgroundColor: \"magenta\",width:\"45px\"}}\n                                        onMouseEnter={(e)=>props.mouseEnter(element.clockwise.name,element.clockwise.data,e)}\n                                        onMouseLeave={()=>props.mouseLeave()}\n                                        >\n                                        \n                                    {element.clockwise.name}\n                                </div>\n                            );\n                            key+=1\n                            centerButtons.push(\n                                <div className=\"moveBtn\" \n                                        key={key} \n                                        onMouseDown={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                        style={{position:\"relative\", left: \"0px\",backgroundColor: \"magenta\",width:\"45px\"}}\n                                        onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                        onMouseLeave={()=>props.mouseLeave()}\n                                        >\n                                    {element.counter.name}\n                                </div>\n                            );\n                            key+=1\n                        })\n                    }\n                    {centerButtons}\n                    </div>\n                </div> : \"\"\n            }\n            <div className=\"singleLayerMoves\" style={{marginRight: \"5px\"}}>\n                {\n                    props.generatedButtons.single.forEach(element => {\n                        let colors = namesToColors(element.counter.face);\n                        if(element.counter.face === 'F') singleButtons.push([],[]);\n                        let lengthBtns = singleButtons.length-2;\n                        let lengthBtns1 = singleButtons.length-1;\n                        singleButtons[lengthBtns].push(\n                            <div className=\"moveBtn\" \n                                    key={key} \n                                    onMouseDown={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                    style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                    onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                    onMouseLeave={()=>props.mouseLeave()}\n                                    >\n                                {element.counter.name}\n                            </div>\n                        )\n                        key+=1;\n                        singleButtons[lengthBtns1].push(\n                            <div className=\"moveBtn\" \n                                key={key} \n                                onMouseDown={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                onMouseEnter={()=>props.mouseEnter(element.clockwise.name,element.clockwise.data)}\n                                onMouseLeave={()=>props.mouseLeave()}\n                                >\n                                {element.clockwise.name}\n                            </div>\n                        )\n                        key+=1;\n                    })\n\n                }\n                {\n                    singleButtons.forEach(element =>{\n                        key+=1;\n                        singleCols.push(\n                            <div key={key} className='singleLayerColumns'>\n                                {element}\n                            </div>\n                        )\n                    })\n                }\n                {\n                    singleCols\n                }\n            </div>\n            <div className=\"multiLayerMoves\">\n            {\n                    props.generatedButtons.multi.forEach(element => {\n                        let colors = namesToColors(element.counter.face);\n                        if(element.counter.face === 'F') multiButtons.push([],[]);\n                        let lengthBtns = multiButtons.length-2;\n                        let lengthBtns1 = multiButtons.length-1;\n                        multiButtons[lengthBtns].push(\n                            <div className=\"moveBtn\" \n                                key={key} \n                                onMouseDown={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                onMouseLeave={()=>props.mouseLeave()}\n                                >\n                                {element.counter.name}\n                            </div>\n                        )\n                        key+=1;\n                        multiButtons[lengthBtns1].push(\n                            <div className=\"moveBtn\" \n                                key={key} \n                                onMouseDown={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                onMouseEnter={()=>props.mouseEnter(element.clockwise.name,element.clockwise.data)}\n                                onMouseLeave={()=>props.mouseLeave()}\n                                >\n                                {element.clockwise.name}\n                            </div>\n                        )\n                        key+=1;\n                    })\n\n                }\n                {\n                    multiButtons.forEach(element =>{\n                        key+=1;\n                        multiCols.push(\n                            <div key={key} className='multiLayerColumns'>\n                                {element}\n                            </div>\n                        )\n                    })\n                }\n                {\n                    multiCols\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Controls;","import React from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport \"./ColorPicker.css\";\n\nconst ColorPicker = (props) => {\n    let li = [];\n    props.cpErrors.forEach(function(error,i){\n        li.push(<p key={i} style={{color:\"red\",fontSize:\".8rem\",textAlign:\"left\",listStyle:\"none\",margin:\"2px\",lineHeight: \"15px\"}}>\n            {\"- \"+error}\n        </p>);\n    });\n    function leave(){\n        //console.log(document.querySelector(\"#cpChangeData\").data)\n        props.endColorPicker();\n\n        if( document.querySelector(\".activeMenu\")){\n            document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n        }\n\n        if(document.querySelector(\"#cpChangeData\").data){\n            let data = document.querySelector(\"#cpChangeData\").data.split(\",\");\n            if(data[0]===\"Solver\") {\n                props.setState({activeMenu:\"\",currentFunct:\"None\",isValidConfig:false});\n                document.querySelector(\"#cpChangeData\").data=\"\";\n                return;\n            }\n            document.querySelector(`#${data[0]}`).classList.add(\"activeMenu\");\n            document.querySelector(\"#cpChangeData\").data=\"\";\n\n            props.setState({activeMenu:data[0],currentFunc:data[1],isValidConfig:false},()=>props.beginSolve());\n        }\n        else{\n            props.setState({activeMenu:\"\",currentFunct:\"None\",isValidConfig:false});\n        }\n    }\n    function stay(){\n        document.querySelector(\".warningPopup\").style.display=\"none\";\n    }\n    return (\n        <Row className=\"cp-container\" style={{height:\"98%\",width:\"100%\", overflowX:\"hidden!important\",overflowY:\"hidden!important\",margin:\"0px\"}}>\n            <div className=\"warningPopup\">\n                <div id=\"cpChangeData\" data=\"\"></div>\n                <div className=\"cpMessage\">Are you sure you want to leave Color Picker? Changes will not be saved.</div>\n                <button onClick={stay} className=\"cpLeaveStay\">Stay</button><button onClick={leave} className=\"cpLeaveStay\">Leave</button>\n            </div>\n\n            <Col style={{width:\"50%\"}}>\n                {props.colorPicked===\"yellow\"||props.colorPicked===\"white\"?\n                    <div style={{backgroundColor:props.colorPicked, borderRadius: \".25rem\",height:\"25%\",fontSize:\"1.5rem\",color:\"#343a40\",width:\"93%\",margin:\"auto\",border:\"1px solid #343a40\"}}>Selected</div>:\n                    <div style={{backgroundColor:props.colorPicked, borderRadius: \".25rem\",height:\"25%\",fontSize:\"1.5rem\",color:\"lightgrey\",width:\"93%\",margin:\"auto\",border:\"1px solid #343a40\"}}>Selected</div>\n                }\n                <div className=\"cpButton\" style={{color:'lightgrey',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('white')}>1 : White</div>\n                <div className=\"cpButton\" style={{color:'blue',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('blue')}>2 : Blue</div>\n                <div className=\"cpButton\" style={{color:'red',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('red')}>3 : Red</div>\n                <div className=\"cpButton\" style={{color:'yellow',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('yellow')}>4 : Yellow</div>\n                <div className=\"cpButton\" style={{color:'orange',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('orange')}>5 : Orange</div>\n                <div className=\"cpButton\" style={{color:'green',width:\"45%\",display:\"inline-block\",height:\"20%\", margin:\"4px\"}} onClick={()=>props.changeColor('green')}>6 : Green</div>\n                \n            </Col>\n            <Col style={{width:\"50%\"}}>\n                {props.isValidConfig?<div id=\"triggerBtn\" style={{width:\"100%\"}} onClick={()=>props.setColorPickedCube()}>Set <strong style={{color:'green',fontSize:'1rem'}}>Valid</strong></div>:<div id=\"triggerBtn\" style={{width:\"100%\"}}>Set <strong style={{color:'red',fontSize:'1rem'}}>Invalid</strong></div>}\n                <div style={{fontSize:\".5rem\"}}>\n                     \n                        {li}\n                </div>\n\n            </Col>\n        </Row>\n        );\n\n};\n\nexport default ColorPicker;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React,{Component} from \"react\";\nimport {Row, Col} from \"react-bootstrap\";\nimport \"./SolverUI.css\";\nimport algorithms from \"../../cubeFunctions/algorithms\";\nimport cube from '../../cubeFunctions/cube';\n\nfunction playOne(props){\n    if(!props.state.moveSet.length) return;\n    if((props.state.moveSet[0]===props.state.moveSet[1]||props.state.moveSet[1]===\"stop'\")&&!props.state.autoPlay){\n        props.setState({\n            autoPlay:true,\n            autoRewind:false,\n            targetSolveIndex:props.state.solvedSetIndex+2});\n    }\n    else{\n        if(props.state.playOne===true) return;\n        if(props.state.moveSet[0]&&typeof(props.state.moveSet[0][0])==='string'&&props.state.moveSet[0]!==\"'\"){\n            props.setState({playOne:true,prevSet:[...props.state.prevSet,props.state.moveSet[0]]});\n        }\n    }\n}\n\nclass SolverUI extends Component {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if(nextProps.state.autoRewind===true && nextProps.state.solvedSetIndex >= nextProps.state.targetSolveIndex) {\n            //console.log(\"attempting rewind\");\n            if(nextProps.state.moveSet[0]===\"stop'\"){\n                nextProps.setState({autoRewind:false});\n            }\n            nextProps.rewindOne();\n        }\n        else if(nextProps.state.autoRewind===true && nextProps.state.solvedSetIndex <= nextProps.state.targetSolveIndex){\n            //console.log(\"ending rewind\");\n            nextProps.setState({autoRewind:false});\n        }\n\n        if(nextProps.state.autoPlay===true && nextProps.state.solvedSetIndex < nextProps.state.targetSolveIndex) {\n            //console.log(\"attempting rewind\");\n            if(nextProps.state.moveSet[0]===\"stop'\"){\n                nextProps.setState({autoPlay:false});\n            }\n            playOne(nextProps);\n        }\n        else if(nextProps.state.autoPlay===true && nextProps.state.solvedSetIndex >= nextProps.state.targetSolveIndex){\n            //console.log(\"ending rewind\");\n            nextProps.setState({autoPlay:false});\n        }\n      }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    // }\n\n\n\n    componentDidUpdate() {\n        if(document.querySelector(\".nextSolveIndex\")&&this.props.state.autoScroll) {\n            document.querySelector(\".nextSolveIndex\").scrollIntoView(true);\n            this.props.setState({autoScroll:false});\n        }\n    }\n\n    \n\n    render(){\n        let solverSet = [];\n        let jumperButtons = [<div onClick={(e)=>preSetTarget(e,this.props,setTarget)} id={0} className=\"solveMoveDiv jumper\" key={-1}>Jump to: Start</div>];\n        !this.props.state.solvedSet.length?\n        solverSet.push(\"Already solved\"):\n        this.props.state.solvedSet.forEach((el,i)=>el===this.props.state.solvedSet[i+1]?\n            <></>:\n            el===\"stop'\"? \n            (solverSet.push(<div key={i} style={{width:\"100%\"}}><hr key={i} style={{border:\"1px solid lightblue\",marginLeft:\"5px\"}}></hr>{jumperButtons.length===1?\"Edges: \":\"3x3: \"}</div>),jumperButtons.push(\n                jumperButtons.length===1?<div onClick={(e)=>preSetTarget(e,this.props,setTarget)} id={i+1} className=\"solveMoveDiv jumper\" key={i}>Jump to: Edges</div>:\n                <div onClick={(e)=>preSetTarget(e,this.props,setTarget)} id={i+1} className=\"solveMoveDiv jumper\" key={i}>Jump to: 3x3</div>\n            )):\n            el===this.props.state.solvedSet[i-1]?\n                i===this.props.state.solvedSetIndex||(i===this.props.state.solvedSetIndex+1&&el===this.props.state.solvedSet[i-1])?\n                    solverSet.push(<div \n                        id={i-1} \n                        className=\"solveMoveDiv nextSolveIndex\" \n                        key={i}>{el.replace(\"01\",\"\").replace(\"0\",\"\").replace(\"'\",\"\")+\"2\"}\n                    </div>):\n                    solverSet.push(<div \n                        onClick={(e)=>setTarget(e,this.props)} \n                        id={i-1} \n                        className=\"solveMoveDiv\" \n                        key={i}>{el.replace(\"01\",\"\").replace(\"0\",\"\").replace(\"'\",\"\")+\"2\"}\n                    </div>):\n                i===this.props.state.solvedSetIndex||(i===this.props.state.solvedSetIndex+1&&el===this.props.state.solvedSet[i-1])?\n                    solverSet.push(<div \n                        id={i} \n                        className=\"solveMoveDiv nextSolveIndex\" \n                        key={i}>{el.replace(\"01\",\"\").replace(\"0\",\"\")}\n                    </div>):\n                    solverSet.push(<div \n                        onClick={(e)=>setTarget(e,this.props)} \n                        id={i} className=\"solveMoveDiv\" \n                        key={i}>{el.replace(\"01\",\"\").replace(\"0\",\"\")}</div>)\n        )\n        jumperButtons.push(<div onClick={(e)=>setTarget(e,this.props)} id={this.props.state.solvedSet.length+1} className=\"solveMoveDiv jumper\" key={this.props.state.solvedSet.length+1}>Jump to: Finished</div>);\n\n        let algorithmSet = [];\n        \n        algorithms.forEach(algo=>algo.worksFor.includes(this.props.state.cubeDimension)?\n            algorithmSet.push(<button id={algo.name} key={algo.name} className={this.props.state.activeAlgo===algo.name?\n                \"algoButton algoActive\":\"algoButton\"} onClick={(e)=>algoStart(e,this.props)}>{algo.name}</button>)\n                :\"\")\n        //console.log(algorithmSet);\n\n        let solveAll = <>\n        <a className=\"solveButtonImage\" href=\"#\"><div className=\"solveButtonImage\"><img \n            alt=\"fastforward\" \n            src=\"https://image.flaticon.com/icons/svg/92/92330.svg\"\n            onClick={() => fastforward(this.props)}>\n        </img></div></a></>;\n\n        let rewindAll = <>\n            <a className=\"solveButtonImage\" href=\"#\"><div className=\"solveButtonImage\"><img \n                className=\"rotateimg180\"\n                alt=\"fastforward\" \n                src=\"https://image.flaticon.com/icons/svg/92/92330.svg\"\n                onClick={() => fastrewind(this.props)}>\n            </img></div></a></>;\n\n        let pause = <>\n        <p>{this.props.state.prevSet.length}</p>\n        <a className=\"solveButtonImage\" href=\"#\"><div className=\"solveButtonImage\"><img \n            alt=\"pause\" \n            src=\"https://image.flaticon.com/icons/svg/92/92344.svg\"\n            onClick={() => pauseSolver(this.props)}>\n        </img></div></a></>;\n\n        function stay(){\n            document.querySelector(\".warningPopupSolver\").style.display=\"none\";\n        }\n\n        function leave(props){\n            props.stopSolve();\n\n            if( document.querySelector(\".activeMenu\")){\n                document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n            }\n\n            if(document.querySelector(\"#solverChangeData\").data){\n                let data = document.querySelector(\"#solverChangeData\").data.split(\",\");\n                if(data[0]===\"ColorPicker\"){\n                    props.setState({activeMenu:\"\",currentFunct:\"None\",isValidConfig:false});\n                    document.querySelector(\"#solverChangeData\").data=\"\";\n                    return;\n                }\n                document.querySelector(`#${data[0]}`).classList.add(\"activeMenu\");\n                props.setState({activeMenu:data[0],currentFunct:data[1],isValidConfig:false});\n                document.querySelector(\"#solverChangeData\").data=\"\";\n                \n            }\n            else{\n                props.setState({activeMenu:\"\",currentFunct:\"None\",isValidConfig:false});\n            }\n        }\n\n        \n\n        function fastforward(props){\n            if(!props.state.moveSet.length) return;\n            props.state.moveSet.length===1 ? \n                playOne(props):\n                props.setState({\n                    autoPlay:true,\n                    autoRewind:false,\n                    targetSolveIndex:props.state.solvedSet.length});\n        }\n\n        function fastrewind(props){\n            props.setState({autoPlay:false,autoRewind:true,targetSolveIndex:0});\n        }\n\n        function pauseSolver(props){\n            props.setState({autoPlay:false,autoRewind:false});\n        }\n\n        function preSetTarget(e,props,setTarget){\n            props.setState({autoScroll:true});\n            setTarget(e,props);\n        }\n\n        //add small fix for jumping to double moves\n        function setTarget(e,props){\n            if(props.state.autoPlay||props.state.autoRewind){\n\n            }\n            else if(parseInt(e.target.id)-props.state.solvedSetIndex===1){\n                props.setState({targetSolveIndex:parseInt(e.target.id)});\n                playOne(props);\n            }\n            else if(props.state.solvedSetIndex<=parseInt(e.target.id)){\n                props.setState({targetSolveIndex:parseInt(e.target.id),autoTarget:true});\n                let prevSetNew = props.state.solvedSet.slice(0,parseInt(e.target.id));\n                let moveSetNew = props.state.solvedSet.slice(parseInt(e.target.id),props.state.solvedSet.length);\n                let forwardMoves = props.state.solvedSet.slice(props.state.solvedSetIndex,parseInt(e.target.id));\n\n                props.setState({\n                    solvedSetIndex:parseInt(e.target.id),\n                    prevSet:prevSetNew,\n                    moveSet:moveSetNew,\n                    rubiksObject:props.autoJump(props.state,forwardMoves)})\n            }\n            else if(props.state.solvedSetIndex>parseInt(e.target.id)) {\n                props.setState({targetSolveIndex:parseInt(e.target.id),autoTarget:true});\n                let prevSetNew = props.state.solvedSet.slice(0,parseInt(e.target.id));\n                let moveSetNew = props.state.solvedSet.slice(parseInt(e.target.id),props.state.solvedSet.length);\n                let backwardMoves= props.state.solvedSet.slice(parseInt(e.target.id),props.state.solvedSetIndex)\n                    .map(move=>move.length===4?move.slice(0,3):(move+\"'\"));\n\n                props.setState({\n                    solvedSetIndex:parseInt(e.target.id),\n                    prevSet:prevSetNew,\n                    moveSet:moveSetNew,\n                    rubiksObject:props.autoJump(props.state,backwardMoves.reverse())})\n            }\n        }\n\n        function algoStart(e,props){\n            let cD = props.state.cubeDimension;\n            let algo = e.target.id;\n            let algoSet = [];\n            let generated = cube.generateSolved(cD,cD,cD);\n            algorithms.forEach(e=>{\n                if(e.name===algo&&e.worksFor.includes(cD)) algoSet.push(...e.moves.split(\" \"));\n            })\n            //console.log(algoSet);\n            props.setState({activeAlgo:algo,moveSet:[...algoSet],rubiksObject : generated.tempArr,solveable:true,solvedSet:[...algoSet],solvedSetIndex:0});\n        }\n\n        return(<div className=\"solverUIWrapper\">\n            <div className=\"warningPopupSolver\">\n                <div id=\"solverChangeData\" data=\"\"></div>\n                <div className=\"solverMessage\">Are you sure you want to leave Solver? Progress will not be saved.</div>\n                <button onClick={stay} className=\"solverLeaveStay\">Stay</button><button onClick={()=>leave(this.props)} className=\"solverLeaveStay\">Leave</button>\n            </div>\n            <Row style={{width:\"100%\",height:\"100%\",margin:0}}>\n                <Col style={{paddingRight:0}}>\n                    {this.props.state.currentFunc===\"Solving\"?\n                        <div className=\"solverInfo\">\n                            <div className=\"solveTime\">\n                                Time:{this.props.state.solveTime}s\n                            </div>\n                            <div className=\"solveMoves\">\n                                Moves:{this.props.state.solvedSet.length}\n                            </div>\n                        </div>:\"\"\n                    }\n                    <div className=\"solverInterface\">\n                        <div className=\"solverButton rewindAll\">\n                            {this.props.state.autoRewind?pause:rewindAll}\n                        </div>\n\n                        <div className=\"solverButton rewindOne\">\n                            <p style={{width:\"100%\"}}>{this.props.state.prevSet.length-1>=0?\n                            this.props.state.prevSet[this.props.state.prevSet.length-1]===\"stop'\"?\n                            \"\":\n                            this.props.state.prevSet[this.props.state.prevSet.length-1]===this.props.state.prevSet[this.props.state.prevSet.length-2]?\n                            this.props.state.prevSet[this.props.state.prevSet.length-1].replace(\"01\",\"\").replace(\"0\",\"\").replace(\"'\",\"\")+2:\n                            this.props.state.prevSet[this.props.state.prevSet.length-1].replace(\"01\",\"\").replace(\"0\",\"\")\n                            :\"None\"}</p>\n                            <a className=\"solveButtonImage\" href=\"#\"><div className=\"solveButtonImage\"><img \n                                className=\"rotateimg180\" \n                                src=\"https://image.flaticon.com/icons/svg/92/92335.svg\" \n                                alt=\"rewind\"\n                                onClick={this.props.rewindOne}>\n                            </img></div></a>\n                        </div>\n                        <div className=\"solverButton playOne\">\n                            <p style={{width:\"100%\"}}>\n                                {this.props.state.moveSet[0]&&typeof(this.props.state.moveSet[0][0])==='string'&&this.props.state.moveSet[0]!==\"'\"?\n                                this.props.state.moveSet[0]===\"stop'\"?\n                                \"\":\n                                this.props.state.moveSet[0]===this.props.state.moveSet[1]?\n                                this.props.state.moveSet[0].replace(\"01\",\"\").replace(\"0\",\"\").replace(\"'\",\"\")+2:\n                                this.props.state.moveSet[0].replace(\"01\",\"\").replace(\"0\",\"\")\n\n                                :\"None\"\n                                }</p>\n                            <a className=\"solveButtonImage\" href=\"#\"><div className=\"solveButtonImage\"><img \n                                src=\"https://image.flaticon.com/icons/svg/92/92335.svg\" \n                                alt=\"play\"\n                                onClick={() => playOne(this.props)}>\n                            </img></div></a>\n                            \n                        </div>\n                        <div className=\"solverButton playAll\">\n                            {this.props.state.autoPlay?pause:solveAll}\n                        </div>\n                    </div>\n                </Col>\n                <Col>\n                    <div className=\"solverMoves\">\n                        \n                        {solverSet}\n                        \n                    </div>\n                    {this.props.state.currentFunc===\"Solving\"?\n                        <div className=\"jumperButtons\">\n                            {jumperButtons}\n                        </div>:<></>}\n                </Col>\n            </Row>\n        </div>\n    )}\n}\n\nexport default React.memo(SolverUI);","import React,{Component} from \"react\";\nimport \"./MenuWrapper/MenuWrapper.css\";\nimport {Row, Col} from \"react-bootstrap\";\nimport MenuOptions from \"./MenuOptions/MenuOptions\";\nimport MenuOptionsOther from \"./MenuOptionsOther/MenuOptionsOther\";\nimport Controls from \"./Controls\";\nimport ColorPicker from \"./ColorPicker\";\nimport SolverUI from \"./SolverUI/SolverUI\";\n\n\nclass View extends Component {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n\n        \n\n        if(this.props.state.currentFunc!==nextProps.state.currentFunc) return true;\n\n        if(this.props.state.activeAlgo!==nextProps.state.activeAlgo) return true;\n\n        if( this.props.state.activeAlgo===nextProps.state.activeAlgo&&\n            this.props.state.solvedSetIndex===nextProps.state.solvedSetIndex&&\n            ((this.props.state.autoRewind||this.props.state.autoPlay)\n            &&this.props.state.autoRewind===nextProps.state.autoRewind\n            &&this.props.state.autoPlay===nextProps.state.autoPlay)) return false;\n\n        if(this.props.state.solvedSetIndex!==nextProps.state.solvedSetIndex) return true;\n        if(nextProps.state.autoRewind&&nextProps.state.solvedSetIndex >= nextProps.state.targetSolveIndex-1) return true;\n        if(nextProps.state.autoPlay&&nextProps.state.solvedSetIndex < nextProps.state.targetSolveIndex-1) return true;\n\n        if(!nextProps.state.autoRewind&&this.props.state.autoRewind) return true;\n        if(!nextProps.state.autoPlay&&this.props.state.autoPlay) return true;\n\n        if(this.props.state.activeMenu===nextProps.state.activeMenu &&\n           this.props.state.colorPicked===nextProps.state.colorPicked&&\n           this.props.state.currentFunc===nextProps.state.currentFunc&&\n           this.props.state.isValidConfig===nextProps.state.isValidConfig&&\n           this.props.cpErrors===nextProps.cpErrors&&\n           this.props.state.solveTime===nextProps.state.solveTime&&\n           this.props.state.playOne===nextProps.state.playOne&&\n           !this.props.state.autoPlay) return false;\n\n        if(this.props.state.solvedSetIndex===nextProps.state.solvedSetIndex && this.props.state.autoPlay && this.props.state.solvedSetIndex < this.props.state.targetSolveIndex) return false;\n\n        if(this.props.state.solvedSetIndex===nextProps.state.solvedSetIndex && this.props.state.autoRewind && this.props.state.solvedSetIndex >= this.props.state.targetSolveIndex) return false;\n\n        return true;\n    }\n    render(){\n        //const props = this.props;\n        let activeMenu;\n        let currentFunc = this.props.state.currentFunc;\n        switch(this.props.state.activeMenu){\n            case 'Moves':\n                activeMenu = <Controls {...this.props}/>\n                break;\n            case 'ColorPicker':\n                if(currentFunc===\"None\"){\n                    if(document.querySelector(\".activeMenu\")){\n                        document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n                    }\n                    //if(this.props.activeMenu!==\"\") this.props.setState({activeMenu:\"\"});\n                }\n                activeMenu = <ColorPicker {...this.props}/>\n                break;\n            case 'Solver':\n                if(currentFunc===\"None\"){\n                    if(document.querySelector(\".activeMenu\")){\n                        document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n                    }\n                    try{\n                        //if(this.props.activeMenu!==\"\") this.props.setState({activeMenu:\"\"});\n                    }catch{}\n                }\n                activeMenu=<SolverUI {...this.props}/>\n                break;\n            case 'Algorithms':\n                if(currentFunc===\"None\"){\n                    if(document.querySelector(\".activeMenu\")){\n                        document.querySelector(\".activeMenu\").classList.remove(\"activeMenu\");\n                    }\n                    //if(this.props.activeMenu!==\"\") this.props.setState({activeMenu:\"\"});\n                }\n                activeMenu=<SolverUI {...this.props}/>\n                break;\n            default:\n                activeMenu=this.props.state.activeMenu;\n        }\n        //console.log(\"hi\")\n        return (\n        <div className=\"menuWrapper\" style={{color:\"white\"}}>\n            <Row style={{height: \"100%\", margin: \"5px\",paddingBottom: \"10px\"}}>\n                <Col style={{padding:0}}>\n                    <MenuOptions {...this.props}/>\n                </Col>\n                <Col style={{padding:0, color:\"black\",opacity:0}} xs={.5}>\n                    .    \n                </Col>\n                <Col id=\"menuBox\" style={{padding:0,overflow:\"auto\",position:\"relative\",top:\"0px\",width:\"100%\"}} xs={8}>\n                    {activeMenu}  \n                </Col>\n                <Col style={{padding:0, color:\"black\",opacity:0}} xs={.5}>\n                    .    \n                </Col>\n                <Col style={{padding:0}}>\n                    <MenuOptionsOther {...this.props}/>\n                </Col>\n            </Row>\n        </div>)\n    }\n}\n\nexport default React.memo(View);","import React,{Component} from \"react\";\nimport MobileView from \"../MobileView\"\nimport View from \"../View\"\nclass Menu extends Component {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        //if(this.props.state.currentFunc===nextProps.state.activeMenu) return false;\n        return true;\n    }\n    render(){\n        const props = this.props;\n        return window.innerWidth > 600? <View {...props}/> : <MobileView {...props}/>;  \n    } \n}\n\nexport default React.memo(Menu);","/* \n * \n *      Sasha Peters\n *      Created working function: Saturday, December 14, 2019\n *      \n */\n\nimport whiteSolver from \"./middles/white\"\nimport yellowSolver from \"./middles/yellow\"\nimport blueSolver from \"./middles/blue\"\nimport greenSolver from \"./middles/green\"\nimport orangeSolver from \"./middles/orange\"\n\nfunction solveMiddleLogic(cubeDimensions,rubiksObjectAtIndex,index){\n    \n    let dim = cubeDimensions;\n    let faceColor = Math.floor((index)/((dim-2)*(dim-2)));\n    let moveString = \"\";\n\n    // Coordinates organized\n    let current = {\n        x:rubiksObjectAtIndex[6],\n        y:rubiksObjectAtIndex[7],\n        z:rubiksObjectAtIndex[8]\n    };\n    let solved = {\n        x:rubiksObjectAtIndex[9],\n        y:rubiksObjectAtIndex[10],\n        z:rubiksObjectAtIndex[11]\n    };\n\n    \n\n    if(current.x===solved.x && current.y===solved.y && current.z===solved.z){\n        //console.log(\"SOLVED\");\n    }\n\n    else{\n        //console.log(faceColor);\n        switch(faceColor){\n            case 0:\n                // Solved for all sizes\n                moveString = whiteSolver(current,solved,dim,index);\n                break;\n            case 1:\n                // Solved for all sizes\n                moveString = yellowSolver(current,solved,dim,index);\n                break;\n            case 2:\n                // Solved for all sizes\n                moveString = blueSolver(current,solved,dim);\n                break;\n            case 3:\n                // In Progress. Solved for 4x4\n                moveString = orangeSolver(current,solved,dim);\n                break;\n            case 4:\n                // In Progress. Solved for 4x4\n                moveString = greenSolver(current,solved,dim,index);\n                break;\n            default:\n                console.log(\"Should never reach here\");\n        }\n    }\n    return moveString;\n}\n\nexport default solveMiddleLogic;","import solveMiddleLogic from './solveMiddleLogic';\n\n// Lots of console logs while this section is still in development.\n// Might leave logs commented for future debugging if necessary.\n// function move(space,depth,side){\n//   return (space+(depth<10? \"0\":\"\") + depth + side);\n// }\n\nfunction solveMiddles(cube,dim,moveStringToArray,index,middles){\n\n    if(dim===2) {\n        return {solveState : 1};\n    }\n\n    let moveString = \"\";\n    // let whiteMiddleError = false;\n    // let yellowMiddleError = false;\n    // let blueMiddleError = false;\n    // let orangeMiddleError = false;\n\n    let solved = true;\n\n    const obj = {};\n\n    // Solve logic for 3x3\n    if(dim===3){\n      if(cube[4][7] === 0 && cube[10][8] === 2){\n      }\n      else{\n        if(cube[4][8]===2){ //U\n          cube[12][6]===0 ? moveString+=\"02R'\" : moveString+=\"02U'\";\n        }\n        else if(cube[4][6]===0){//L\n          cube[10][8]===2 ? moveString+=\"02U'\" : moveString+=\"02R'\";\n        }\n        else if(cube[4][6]===2){//R\n          cube[10][8]===2 ? moveString+=\"02U\" : moveString+=\"02R'\";\n        }\n        else if(cube[4][8]===0){//D\n          cube[12][6]===0 ? moveString+=\"02R\" : moveString+=\"02U'\";\n        }\n        else if(cube[4][7]===2){//B\n          cube[10][8]===2 ? moveString+=\"02U2\" : moveString+=\"02F'\";\n        }\n        else moveString+=\"02B'\"//F\n      }\n    }\n\n    // Solve logic for 4x4 and greater\n    else if(dim>3){\n\n      // Check if all middles are in place\n      for(let i = 0; i<=index&&i<((dim-2)*(dim-2))*5;i++){\n          if(cube[middles[i]][6]===cube[middles[i]][9]&&\n             cube[middles[i]][7]===cube[middles[i]][10]&&\n             cube[middles[i]][8]===cube[middles[i]][11]){\n             }else {\n              solved=false;\n             }\n      }\n      \n      if(!solved && index<((dim-2)*(dim-2))*5){ \n        if(dim%2 && index === ((((dim-2)*(dim-2))*2))){\n          \n          let oddTopMiddleIndex = ((((dim-2)*(dim-2))*2)+Math.floor((dim-2)*(dim-2)/2));\n\n          //console.log(\"Odd cube top middle index: \" + cube[middles[oddTopMiddleIndex]]);\n          if(cube[middles[oddTopMiddleIndex]][6]===cube[middles[oddTopMiddleIndex]][9] &&\n             cube[middles[oddTopMiddleIndex]][7]===cube[middles[oddTopMiddleIndex]][10] &&\n             cube[middles[oddTopMiddleIndex]][8]===cube[middles[oddTopMiddleIndex]][11]){\n            //console.log(\"Odd cube top middle in position, moving on with solver\");\n          }\n          else{\n            if(cube[middles[oddTopMiddleIndex]][6]===dim-1){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F'\";\n            }\n            else if(cube[middles[oddTopMiddleIndex]][8]===0){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F2\";\n            }\n            else if(cube[middles[oddTopMiddleIndex]][6]===0){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F\";\n            }\n            //console.log(moveString);\n          }\n        }\n        //console.log(`Index: ${index}, Piece: ${middles[index]}`);\n        \n        moveString += ((moveString.length) ? \" \":\"\") + solveMiddleLogic(dim,cube[middles[index]],index);\n        //console.log(moveString + \"\\n-------------------------------\");\n      }\n    }\n\n    \n\n    if(dim<4){\n      const moveArray = moveStringToArray(moveString);\n      moveString.trim().length ? obj.moveSet = moveArray : obj.solveState = 1;\n    }\n    else{\n      if(index<((dim-2)*(dim-2))*5){\n\n        const moveArray = moveStringToArray(moveString);\n        moveString.trim().length ? obj.moveSet = moveArray : obj.rubiksIndex = index+1;\n\n      }\n\n      else{\n        //console.log(\"Ready for edge solver {solveState:0.1}\");\n        //console.log(moveString + \"\\n-------------------------------\\n\");\n        \n        if(dim===4){\n          obj.solveState = .1; obj.rubiksIndex = 0; obj.currentFunc = \"Solving\"; obj.moveSet = ['stop'];\n          //obj.solveState = -1; obj.rubiksIndex = 0; obj.currentFunc = \"None\";\n        } else {\n          obj.solveState = .1; obj.rubiksIndex = 0; obj.currentFunc = \"Solving\"; obj.moveSet = ['stop'];\n        }\n      }\n    }\n    return obj;\n}\n\nexport default solveMiddles;","import frontEdges from \"./edges/solveFrontEdgeSegments\";\nimport backEdges from \"./edges/solveBackEdgeSegments\";\nimport middleEdges from \"./edges/solveMiddleEdgeSegements\";\n\nfunction side(rubiksObject,color){\n    return rubiksObject.indexOf(color);\n}\n\nfunction solveEdgeLogic(cubeDimensions,rubiksObjectAtIndex,index,cube,edges){\n\n    const dim = cubeDimensions;\n    const edgesPerSection = 4;\n    const edgeLength = dim-2\n    const section = Math.floor(index/(edgeLength*edgesPerSection));\n    const whiteSide = side(rubiksObjectAtIndex,'white');\n    const yellowSide = side(rubiksObjectAtIndex,'yellow');\n    const blueSide = side(rubiksObjectAtIndex,'blue');\n    const greenSide = side(rubiksObjectAtIndex,'green');\n\n    let moveString = \"\";\n\n    // Coordinates organized\n    let current = {\n        x:rubiksObjectAtIndex[6],\n        y:rubiksObjectAtIndex[7],\n        z:rubiksObjectAtIndex[8]\n    };\n    let solved = {\n        x:rubiksObjectAtIndex[9],\n        y:rubiksObjectAtIndex[10],\n        z:rubiksObjectAtIndex[11]\n    };\n\n    if(current.x===solved.x && current.y===solved.y && current.z===solved.z){\n        if( (whiteSide === 0 && section === 0) ||\n            (yellowSide === 3 && section === 1)||\n            section===2){\n            //console.log(\"SOLVED\");\n            return \"\";\n        }      \n    }\n    switch(section){\n        case 0: \n            // Finished for now\n            moveString = frontEdges(current,solved,dim,whiteSide);\n            break;\n        case 1:\n            // Finished for now\n            moveString = backEdges(current,solved,dim,yellowSide);\n            break;\n        case 2:\n            // Not started\n            moveString = middleEdges(current,solved,dim,blueSide,greenSide);\n            break;\n        default:\n            console.log(\"Should never reach here\");\n    }\n    //console.log(\"Section: \", section);\n    // if(section === 0) console.log(\"White side: \",whiteSide);\n    // else if(section === 1) console.log(\"Yellow side: \",yellowSide);\n    // else if(blueSide > -1) console.log(\"Blue side: \", blueSide);\n    // else if(greenSide > -1) console.log(\"Green side: \", greenSide);\n    //console.log(\"Current: \",current,\"\\nSolved: \",solved);\n\n    return moveString;\n}\n\nexport default solveEdgeLogic;","import solveEdgeLogic from './solveEdgeLogic';\n\nfunction solveEdges(cube,dim,moveStringToArray,edges,index){\n    const numCubeEdges = 12;\n    const innerEdgeLength = dim-2;\n    const numEdges = innerEdgeLength * numCubeEdges;\n    let moveString = \"\";\n    const obj = {};\n\n    if (index < numEdges){\n        //console.log(`Index: ${index}, Piece: ${edges[index]}`);\n        moveString += ((moveString.length) ? \" \":\"\") + solveEdgeLogic(dim,cube[edges[index]],index,cube,edges,);\n        moveString.trim().length ? obj.moveSet = moveStringToArray(moveString) : obj.rubiksIndex = index+1;\n        //console.log(moveString + \"\\n-------------------------------\");\n    }\n\n    else if(dim < 5) {\n        //console.log(\"Ready to initiate 3x3 solver\");\n        obj.solveState = 1;\n        obj.rubiksIndex = 0;\n        obj.currentFunc = \"Solving\";\n        obj.moveSet = ['stop'];\n    }\n    else {\n        obj.solveState = -1;\n        obj.rubiksIndex = 0;\n        obj.currentFunc = \"None\";\n        obj.moveSet = ['stop'];\n    }\n\n    return obj;\n}\n\nexport default solveEdges;","import solveWhiteCross from \"./edges/solveWhiteCross\"\nimport solveWhiteCorners from \"./corners/solveWhiteCorners\"\nimport solveMiddleEdges from \"./edges/solveMiddleEdges\"\nimport solveYellowCross from \"./edges/solveYellowCross\"\nimport alignYellowCross from \"./edges/alignYellowCross\"\nimport solveYellowCorners from \"./corners/solveYellowCorners\"\nimport alignYellowCorners from \"./corners/alignYellowCorners\"\nimport solveMiddles from \"./solveMiddles\"\nimport solveEdges from \"./solveEdges\"\n\nconst CONSTANTS = {\n    SOLVE_MIDDLES: 0,\n    SOLVE_EDGES: 0.1,\n    SOLVE_WHITE_CROSS: 1,\n    SOLVE_WHITE_CORNERS: 2,\n    SOLVE_MIDDLE_EDGES: 3,\n    SOLVE_YELLOW_CROSS: 4,\n    ALIGN_YELLOW_CROSS: 5,\n    ALIGN_YELLOW_CORNERS: 6,\n    SOLVE_YELLOW_CORNERS: 7\n}\n\nfunction solver(solveState,rubiksObject,cubeDimension,moveStringToArray,solveMoves,rubiksIndex,middles,edges,corners){\n    //console.log(solveState);\n    switch(solveState){\n        case CONSTANTS.SOLVE_MIDDLES:\n            return solveMiddles(rubiksObject,cubeDimension,moveStringToArray,rubiksIndex,middles);\n        case CONSTANTS.SOLVE_EDGES:\n            return solveEdges(rubiksObject,cubeDimension,moveStringToArray,edges,rubiksIndex);\n        case CONSTANTS.SOLVE_WHITE_CROSS:\n            return solveWhiteCross(rubiksObject,cubeDimension,moveStringToArray,edges);\n        case CONSTANTS.SOLVE_WHITE_CORNERS:\n            return solveWhiteCorners(rubiksObject,cubeDimension,moveStringToArray,corners);\n        case CONSTANTS.SOLVE_MIDDLE_EDGES:\n            return solveMiddleEdges(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.SOLVE_YELLOW_CROSS:\n            return solveYellowCross(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.ALIGN_YELLOW_CROSS:\n            return alignYellowCross(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.ALIGN_YELLOW_CORNERS:\n            return alignYellowCorners(rubiksObject,cubeDimension,moveStringToArray,corners);\n        case CONSTANTS.SOLVE_YELLOW_CORNERS:\n            return solveYellowCorners(rubiksObject,cubeDimension,moveStringToArray,solveMoves,corners);\n        default:\n            console.log(\"invalid solve state\");\n    }\n}\n\nexport default solver;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\n//import Patterns from \"./components/Patterns\"\nimport Speeds from \"./components/Speeds\"\n//import Controls from \"./components/Controls\"\nimport MoveInput from \"./components/MoveInput\"\n//import Core from \"./components/Core\";\n//import ColorPicker from \"./components/ColorPicker\";\nimport Menu from \"./components/MenuWrapper/MenuWrapper\";\nimport * as THREE from \"three\";\nimport Stats from \"stats.js\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap';\nimport cube from './cubeFunctions/cube';\nimport solver from './solvers/solver';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\n// TODO:\n/*\n * 1. Start moving functions to other files: STARTED\n * \n * 2. UI Rework: Started\n * \n * 3. Continue working on solvers.\n * \n * 4. ISSUES:\n *  - Fix issue is yellow solver\n */\n\n\nclass App extends Component {\n  state = {\n    cubes : [],           // Contains visual cube\n    rubiksObject : [],    // Contains memory cube\n    blackObject: [],\n    speed : 7.5,          // Control individual piece rotation speed (don't change)\n    rotationSpeed : 350,  // Controls visual rotation speed\n    start : 7.5,          // Start value for a rotation or set of rotations\n    end : 0,              // End value for a roation or set of rotations\n    turnDirection : 0,    // Dictates whether the rotation is clockwise or counterclockwise\n    face : 0,             // The face being turned\n    cameraX : 5,          // Camera position x\n    cameraY : -5,         // Camera position y\n    cameraZ : 2,          // Camera position z\n    currentFunc : \"None\", // Variable used to display current function\n    moveLog : \"\",         // Keeps a log of all moves\n    moveSet : [],         // Algorithms queue moves through this variable\n    prevSet : [],\n    angle : 3.9,          // Camera angle\n    cubeDimension : null, // Cube dimensions. Ex: 3 => 3x3x3 cube\n    cubeDepth : 1,        // Used to determine rotation depth on cubes greater than 3\n    currentSpeed:\"Medium\",// Displays which speed is selected\n    moves : 0,            // Used by scramble functions\n    reload : false,       // Lets animate know when to reload the cube (after every move)\n    solveState : -1,      // Dictates progression of solve function\n    solveMoves : \"\",      // Keeps track of moves used during solve\n    solvedSet: [],\n    solvedSetIndex: 0,\n    facePosX : null,\n    facePosY : null,\n    facePosZ : null,\n    faceSide : null,\n    colorPicked: 'blue',\n    mouseFace : null,\n    mouseDown : false,\n    mousePos : null,\n    undoIndex : 0,        // Index to keep track of where undo/redo is\n    blockMoveLog : false, // Blocks adding move when undoing/redoing a move\n    previousPiece : null, // Keeps track of hovered face to not redraw\n    rubiksIndex : 0,      // Index to keep track of middles while solving\n    middles : [],         // Contains all middle segments\n    corners : [],         // Contains all corner segments         \n    showStats: false,     // Setting for stats\n    showMoveInput: false,  // Setting for custom move input\n    showControls: false,   // Setting for move controls\n    showHints: true,\n    showGuideArrows: true,\n    activeDragsInput: 0,  // Keeps track of draggable input\n    deltaPositionInput: {\n      x: 100, y: 100\n    },\n    controlledPositionInput: {\n      x: 0, y: 0\n    },\n    activeDragsControls: 0,// Keeps track of draggable buttons\n    deltaPositionControls: {\n      x: 100, y: 100\n    },\n    controlledPositionControls: {\n      x: 0, y: 0\n    },\n    isMulti : false,\n    isVisible : false,\n    isValidConfig : false,\n    hoverData : [],\n    showSolveController : false,\n    autoPlay : false,\n    autoRewind: false,\n    autoTarget: false,\n    playOne : false,\n    generateAllMoves: false,\n    isLocal : null,\n    cpErrors : [],\n    activeMenu : \"\",\n    solveTime:0,\n    targetSolveIndex: -1,\n    activeAlgo:\"none\"\n  };\n\n  \n\n  // Bind keys to functions\n  keyBinds = key => {\n    switch (key){\n\n      case 'R':\n        this.rotateOneFace(key+\"'\",[2,0,1]);\n        break;\n      case 'r':\n        this.rotateOneFace(key.toUpperCase(),[2,-1,1]);\n        break;\n\n      case 'L':\n        this.rotateOneFace(key+\"'\",[4,0,1]);\n        break;\n      case 'l':\n        this.rotateOneFace(key.toUpperCase(),[4,-1,1]);\n        break;\n\n      case 'F':\n        this.rotateOneFace(key+\"'\",[0,0,1]);\n        break;\n      case 'f':\n        this.rotateOneFace(key.toUpperCase(),[0,-1,1]);\n        break;\n\n      case 'U':\n        this.rotateOneFace(key+\"'\",[1,0,1]);\n        break;\n      case 'u':\n        this.rotateOneFace(key.toUpperCase(),[1,-1,1]);\n        break;\n\n      case 'D':\n        this.rotateOneFace(key+\"'\",[5,0,1]);\n        break;\n      case 'd':\n        this.rotateOneFace(key.toUpperCase(),[5,-1,1]);\n        break;\n\n      case 'B':\n        this.rotateOneFace(key+\"'\",[3,0,1]);\n        break;\n      case 'b':\n        this.rotateOneFace(key.toUpperCase(),[3,-1,1]);\n        break;\n\n      case '1':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('white');\n        }\n        break;\n      case '2':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('blue');\n        }\n        break;\n      case '3':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('red');\n        }\n        break;\n      case '4':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('yellow');\n        }\n        break;\n      case '5':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('orange');\n        }\n        break;\n      case '6':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('green');\n        }\n        break;\n\n      default:\n    }\n  }\n\n  // Handles key press event\n  keyHandling = e => {\n    if(e.keyCode <= 36 || e.keyCode >= 41) this.keyBinds(e.key);\n  }\n\n  onMouseDown( event ) {\n    if(!this.state.mouseDown){\n      if(this.state.currentFunc===\"Color Picker\"&&this.state.previousPiece){\n        let toFace = [2,4,3,0,1,5];\n        this.changeFaceColor({x:this.state.facePosX,y:this.state.facePosY,z:this.state.facePosZ},toFace[this.state.faceSide],this.state.colorPicked)\n      }\n      this.setState({mouseDown : true});  \n    }\n  }\n\n  onMouseUp( event ) {\n    this.setState({mouseDown : false});  \n  }\n\n  onSliderChange = (value) => {\n    switch(value){\n      case 0:\n        this.changeSpeed(1.5,1050,\"Slowest\");\n        break;\n      case 10:\n        this.changeSpeed(3,750,\"Slower\")\n        break;\n      case 20:\n        this.changeSpeed(5,500,\"Slow\")\n        break;\n      case 30:\n        this.changeSpeed(7.5,350,\"Medium\")\n        break;\n      case 40:\n        this.changeSpeed(10,250,\"Fast\")\n        break;\n      case 50:\n        this.changeSpeed(15,175,\"Faster\")\n        break;\n      case 60:\n        this.changeSpeed(30,100,\"Fastest\")\n        break;\n      case 70:\n        this.changeSpeed(90,20,\"Zoomin\")\n        break;\n      default:\n        console.log(\"unexpected behavior\");\n    }\n  }\n\n  // Functions to change speed\n  changeSpeed = (_speed,_rotationSpeed,_name,bypass) => {\n    if((this.state.currentFunc===\"Solving\"||this.state.currentFunc===\"Algorithms\"||this.state.currentFunc===\"Scrambling\")&&!bypass) {\n      this.setState({moveSet:[[_speed,_rotationSpeed,_name],...this.state.moveSet]})\n      return;\n    }\n    if(this.state.currentFunc !== \"None\" && !bypass) return;\n    this.setState({currentSpeed: _name,speed: _speed, start: _speed, end: 0, rotationSpeed: _rotationSpeed});\n  }\n\n  changeColor = (color) => {\n    this.setState({colorPicked:color});\n  }\n\n  changeFaceColor = (pos,side,color) => {\n    let tempObj = [...this.state.rubiksObject]\n    for(let i = 0; i < tempObj.length; i++){\n      let tempCube = [...tempObj[i]];\n      if(tempCube[6]===pos.x && tempCube[7]===pos.y && tempCube[8]===pos.z){\n        tempCube[side]=color;\n        tempObj[i] = [...tempCube];\n        i = tempObj.length;\n      }  \n    }\n    this.setState({rubiksObject:[...tempObj]},()=>{\n      this.reloadTurnedPieces('cp');\n      let obj = this.checkColors();\n      if(obj.error) this.setState({isValidConfig:false,cpErrors:[...obj.error]});\n      else if(obj.success) this.setState({isValidConfig:true,cpErrors:[]});\n    });\n  }\n\n  convertToBlueWhiteEdge(_piece){\n    const piece = [..._piece];\n    const dim = this.state.cubeDimension;\n    const max = dim-1;\n    const white=0,blue=dim-1,red=dim-1,yellow=dim-1,orange=0,green=0;\n\n    if(piece[7]===white&&piece[8]===blue) {\n      //console.log(\"we here\");\n      return {\n        colors:[\n          piece[0], // piece on left(4) is now on front(0)\n          piece[1], // piece on top(1) is still on top(1)\n          piece[2], // piece on front(0) is now on right(2)\n          piece[3], // piece on right(2) is now on back(3)\n          piece[4], // piece on back(3) is now on left(4)\n          piece[5] // piece on bottom(5) is still on bottom(5)\n        ].join(\"\"),\n        position:[\n          piece[6], // inverse y becomes x\n          0,  // y becomes 0\n          max // becomes top\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===orange&&piece[8]===blue) {\n      return {\n        colors:[\n          piece[4], // piece on left(4) is now on front(0)\n          piece[1], // piece on top(1) is still on top(1)\n          piece[0], // piece on front(0) is now on right(2)\n          piece[2], // piece on right(2) is now on back(3)\n          piece[3], // piece on back(3) is now on left(4)\n          piece[5] // piece on bottom(5) is still on bottom(5)\n        ].join(\"\"),\n        position:[\n          max-piece[7], // inverse y becomes x\n          0,  // y becomes 0\n          max // becomes top\n        ].join(\"\")\n      }\n    }\n\n    if(piece[7]===yellow&&piece[8]===blue){\n      return {\n        colors:[\n          piece[3], // piece on back(3) is now on front(0)\n          piece[1], // piece on top(1) is still on top(1)\n          piece[4], // piece on left(4) is now on right(2)\n          piece[0], // piece on front(0) is now on back(3)\n          piece[2], // piece on right(2) is now on left(4)\n          piece[5] // piece on bottom(5) is still on bottom(5)\n        ].join(\"\"),\n        position:[\n          dim-(piece[6]+1), // inverse x becomes x\n          0,  // y becomes 0\n          max // becomes top\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===red&&piece[8]===blue){\n      return {\n        colors:[\n          piece[2], // piece on right(2) is now on front(0)\n          piece[1], // piece on top(1) is still on top(1)\n          piece[3], // piece on back(3) is now on right(2)\n          piece[4], // piece on left(4) is now on back(3)\n          piece[0], // piece on front(0) is now on left(4)\n          piece[5] // piece on bottom(5) is still on bottom(5)\n        ].join(\"\"),\n        position:[\n          piece[7], // inverse y becomes x\n          0,  // y becomes 0\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===orange&&piece[7]===white){\n      return {\n        colors:[\n          piece[0], // piece on front(0) is still on front(0)\n          piece[4], // piece on left(4) is now on top(1)\n          piece[1], // piece on top(1) is now on right(2)\n          piece[3], // piece on back(3) is still on back(3)\n          piece[5], // piece on bottom(5) is now on left(4)\n          piece[2] // piece on right(2) is now on bottom(5)\n        ].join(\"\"),\n        position:[\n          piece[8], // z becomes x\n          0,  // y 0\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===red&&piece[7]===white){\n      return {\n        colors:[\n          piece[0], // piece on front(0) is still on front(0)\n          piece[2], // piece on right(2) is now on top(1)\n          piece[5], // piece on bottom(5) is now on right(2)\n          piece[3], // piece on back(3) is still on back(3)\n          piece[1], // piece on top(1) is now on left(4)\n          piece[4] // piece on left(4) is now on bottom(5)\n        ].join(\"\"),\n        position:[\n          max-piece[8], // inverse z becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===orange&&piece[7]===yellow){\n      return {\n        colors:[\n          piece[4], // piece on left(4) is now on front(0)\n          piece[3], // piece on back(3) is now on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          piece[8], // z becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===red&&piece[7]===yellow){\n      return {\n        colors:[\n          piece[2], // piece on right(2) is now on front(0)\n          piece[3], // piece on back(1) is still on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          max-piece[8], // inverse z becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[7]===white&&piece[8]===green){\n      return {\n        colors:[\n          piece[0], // piece on front(0) is still on front(0)\n          piece[5], // piece on bottom(5) is now on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          max-piece[6], // inverse x becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===orange&&piece[8]===green){\n      return {\n        colors:[\n          piece[4], // piece on left(4) is now on front(0)\n          piece[5], // piece on bottom(5) is now on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          piece[7], // y becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[7]===yellow&&piece[8]===green){\n      return {\n        colors:[\n          piece[3], // piece on back(3) is now on front(0)\n          piece[5], // piece on bottom(5) is now on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          piece[6], // x becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n\n    if(piece[6]===red&&piece[8]===green){\n      return {\n        colors:[\n          piece[2], // piece on right(2) is now on front(0)\n          piece[5], // piece on bottom(5) is now on top(1)\n          \"black\",\n          \"black\",\n          \"black\",\n          \"black\",\n        ].join(\"\"),\n        position:[\n          max-piece[7], // inverse y becomes x\n          0,  // y remains the same\n          max // becomes tops\n        ].join(\"\")\n      }\n    }\n    \n    console.log(\"failed to register piece\",piece);\n    return null;\n  }\n\n  checkValidMatch(validPiece,manualPiece){\n\n    // move piece to blue/white side\n    let newValidPiece = this.convertToBlueWhiteEdge([...validPiece]);\n    let newManualPiece = this.convertToBlueWhiteEdge([...manualPiece]); \n\n    //console.log(newValidPiece,newManualPiece);\n\n    if((newValidPiece.colors===newManualPiece.colors&&newValidPiece.position===newManualPiece.position)){\n      //console.log(\"valid\");\n      return true;\n    }\n    else if(newValidPiece.colors!==newManualPiece.colors&&newValidPiece.position!==newManualPiece.position){\n      //console.log(\"valid\");\n      return true;\n    }\n    else return false;\n  }\n\n  setColorPickedCube = () => {\n    let rubiks = [...this.state.rubiksObject];\n    let generated = cube.generateSolved(this.state.cubeDimension,this.state.cubeDimension,this.state.cubeDimension);\n    let newGenerated = [];\n    let checked = [];\n    let otherChecked = [];\n\n    generated.tempArr.forEach(([...piece],pieceIndex) =>{\n      newGenerated.push([]);\n      rubiks.forEach(([...rubik],i) => {\n        let validPiece = 0;\n        piece.slice(0,6).sort().forEach((face,index) =>{\n          if(rubik.slice(0,6).sort()[index]===face) {validPiece++;}\n        });\n        \n        if(validPiece===6&&!checked.includes(pieceIndex)&&!otherChecked.includes(i)){\n          let validEdgePlacement = false;\n          if(piece.includes(\"edge\")&&!piece.includes(\"center\")){\n            validEdgePlacement = this.checkValidMatch(piece,rubik);\n          }\n          else{\n            validEdgePlacement = true;\n          }\n          if(validEdgePlacement){\n            checked.push(pieceIndex);\n            otherChecked.push(i);\n            newGenerated[pieceIndex]=[\n              ...rubik.slice(0,9),\n              ...piece.slice(9,15)\n            ];\n          }\n        }\n      }) \n    });\n\n    this.setState({rubiksObject:newGenerated,currentFunc : \"None\",activeMenu:\"\"},()=>{\n      //console.log(newGenerated);\n      this.reloadTurnedPieces('check');\n    });\n  }\n\n  checkOccurences = (a1, a2) => {\n    let success = true;\n    let amount = 0;\n    let failedColors = [];\n    for(var i = 0; i < a1.length; i++) {\n      var count = 0;\n      for(var z = 0; z < a2.length; z++) {\n        if (a2[z] === a1[i]) count++;\n      }\n      if(count>1) {\n        success = false;\n        if(!failedColors.includes(a1[i])) failedColors.push(a1[i])\n      }\n\n    }\n    return {success,failedColors,amount}\n  }\n\n  checkColors = () => {\n    let rubiksLength = this.state.rubiksObject.length;\n\n    let whiteCount = 0,blueCount = 0,redCount = 0,yellowCount = 0,orangeCount = 0,greenCount = 0;\n    let duplicateFace = false;\n    let duplicateColors = []\n    let matchedCount = 0;\n    let obj = {};\n    let validAmount = this.state.cubeDimension*this.state.cubeDimension;\n    let rubiks = [...this.state.rubiksObject];\n    let generated = cube.generateSolved(this.state.cubeDimension,this.state.cubeDimension,this.state.cubeDimension);\n    let newGenerated = [];\n\n    for(let i = 0; i < rubiks.length; i++){\n      let rubik = [...rubiks[i]];\n      const colors = ['white','blue','red','yellow','orange','green'];\n      if(rubik.includes('white')) whiteCount+=1;\n      if(rubik.includes('blue')) blueCount+=1;\n      if(rubik.includes('red')) redCount+=1;\n      if(rubik.includes('yellow')) yellowCount+=1;\n      if(rubik.includes('orange')) orangeCount+=1;\n      if(rubik.includes('green')) greenCount+=1;\n\n      let res = this.checkOccurences(colors,rubik);\n      if(!res.success){\n        duplicateFace = true;\n        let tempColors = []\n        res.failedColors.forEach(color => {\n          if(!tempColors.includes(color)) {\n            tempColors.push(color);\n          }\n        })\n        duplicateColors=tempColors;\n      }\n    }\n\n    let checked = [];\n    let otherChecked = [];\n    //For each cube piece in the generated solved cube, find the matching\n    //manually inputted piece and overwrite the solved position from the unsolved\n    //piece with the solved piece's solved position to a new generated cube. For \n    //edge pieces, an extra check was needed to ensure first half segments weren't\n    //getting assigned or assigning to second half segments(becomes unsolvable).\n    generated.tempArr.forEach(([...piece],pieceIndex) =>{\n      newGenerated.push([]);\n      rubiks.forEach(([...rubik],i) => {\n        let validPiece = 0;\n        piece.slice(0,6).sort().forEach((face,index) =>{\n          if(rubik.slice(0,6).sort()[index]===face) {validPiece++;}\n        });\n        if(validPiece===6&&!checked.includes(pieceIndex)&&!otherChecked.includes(i)){\n          let validEdgePlacement = false;\n          if(piece.includes(\"edge\")&&!piece.includes(\"center\")){\n            validEdgePlacement = this.checkValidMatch(piece,rubik);\n          }\n          else{\n            validEdgePlacement = true;\n          }\n          if(validEdgePlacement){\n            matchedCount++;\n            checked.push(pieceIndex);\n            otherChecked.push(i);\n            newGenerated[pieceIndex]=[\n              ...rubik.slice(0,9),\n              ...piece.slice(9,15)\n            ];\n          }\n        }\n      }) \n    });\n\n    \n    let invalidAmounts = [];\n    if(whiteCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"white\");\n      //obj.error.push(`Invalid white sticker count.`);\n    }\n    if(blueCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"blue\");\n      //obj.error.push(`Invalid blue sticker count.`);\n    }\n    if(redCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"red\");\n      //obj.error.push(`Invalid red sticker count.`);\n    }\n    if(yellowCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"yellow\");\n      //obj.error.push(`Invalid yellow sticker count.`);\n    }\n    if(orangeCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"orange\");\n      //obj.error.push(`Invalid orange sticker count.`);\n    }\n    if(greenCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      invalidAmounts.push(\"green\");\n      //obj.error.push(`Invalid green sticker count.`);\n    }\n    if(invalidAmounts.length){\n      invalidAmounts=invalidAmounts.join(', ')\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid ${invalidAmounts} sticker count.`);\n    }\n\n    if(duplicateFace){\n      //duplicateColors.forEach(color => {\n        duplicateColors=duplicateColors.join(', ')\n        obj.error.push(`More than one occurence of ${duplicateColors} found on a piece.`);\n      //});\n    }\n\n    if(matchedCount!==rubiksLength&&this.state.cubeDimension<4){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`[${matchedCount-1}] out of [${rubiksLength-1}] matched. Missing [${(rubiksLength-1)-(matchedCount-1)}]`);\n    }\n\n    if(!obj.error){\n      obj.error = [];\n      //console.log(generated);\n      //console.log(newGenerated);\n      const solveData = {...this.generateAllSolveMoves(this.state,newGenerated)};\n      //let solveable = solveData.solveable;\n      generated.tempArr.forEach((piece,i) => {\n        if(piece.slice(0,6).join('')===solveData.rubiksObject[i].slice(0,6).join('')||piece.includes('corner')){}\n        else{\n          //solveData.solveable=false\n          console.log(\"failed matches\");\n          console.log(piece.slice(0,6).join(''),solveData.rubiksObject[i].slice(0,6).join(''));\n        }\n      })\n      if(solveData.solveable===false){\n        //console.log(solveData);\n        obj.error.push(`This configuration of the cube is not solveable.`);\n        obj.error.push(`Check that you've entered all pieces correctly.`);\n        if(this.state.cubeDimension>3){\n          obj.error.push(`There may be a few edge cases on the 4x4, where`);\n          obj.error.push(`a valid scramble cube may not work. Sorry for the`);\n          obj.error.push(`inconvenience, a fix is on the way. Make a few`);\n          obj.error.push(`moves and try again :)`);\n        }\n      }\n      else{\n        obj.error = undefined;\n      }\n    }\n    else{\n      //obj.error.push('Not solvable');\n    }\n\n    //console.log(obj.error);\n\n    if(!obj.error) {obj.success = true;obj.newGenerated = newGenerated}\n    return obj;\n  }\n\n  // Allows the user to undo a move\n  undo = () => {\n    let undoIndex = this.state.undoIndex;\n    let moveString = this.state.moveLog;\n    const moveArray = this.moveStringToArray(moveString);\n    if(moveString === \"\") return;\n\n    else if(this.state.currentFunc !== \"None\") return;\n\n    else if(moveArray.length-1-undoIndex >= 0)\n      this.setState({blockMoveLog : true,\n                     currentFunc : \"Undo\",\n                     moveSet : [moveArray[moveArray.length-1-undoIndex]],\n                     undoIndex : undoIndex + 1});\n  }\n\n  // Allows the user to redo a move\n  redo = () => {\n    if(this.state.currentFunc !== \"None\") return;\n    let undoIndex = this.state.undoIndex;\n    let moveString = this.state.moveLog;\n    if(moveString === \"\") return;\n    \n    const moveArray = this.moveStringToArray(moveString);\n    \n    let backwardsMove = moveArray[moveArray.length-undoIndex];\n    try{\n      backwardsMove.includes(\"'\") ? backwardsMove = backwardsMove.substring(0,3) : backwardsMove += \"'\";\n    }catch(err){\n      return;\n    }\n\n    if(undoIndex > 0)\n      this.setState({blockMoveLog : true,\n                     currentFunc : \"Redo\",\n                     moveSet : [backwardsMove],\n                     undoIndex : undoIndex - 1});\n  }\n\n  // Control when single buttons can be clicked\n  rotateOneFace = (e,vals) => {\n    if (vals.length < 4) vals.push(false);\n\n    if(this.state.currentFunc === \"None\") {\n\n      let cD = this.state.cubeDimension;\n      let rubiksObject = this.state.rubiksObject;\n      let blockMoveLog = this.state.blockMoveLog;\n      let moveLog = this.state.moveLog;\n      let solveMoves = this.state.solveMoves;\n      let solveState = this.state.solveState;\n      let end = this.state.end;\n      let obj = this.rotateCubeFace(vals[0],vals[1],vals[2],vals[3],blockMoveLog,moveLog,solveMoves,end,solveState);\n\n      obj.currentFunc = e;\n      obj.rubiksObject = cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n\n      this.setState(obj);\n    }\n  }\n\n  // Controls camera movements\n  // *** Needs to be reworked ***\n  rotateCamera = (key) => {\n    let y = this.state.cameraY;\n    //let x = this.state.cameraX;\n    //let z = this.state.cameraZ;\n    //let formula = this.state.cubeDimension+2+(y+1)/20;\n    if(key === 37){ // left\n      this.setState({angle: this.state.angle+.075}); \n    }\n    if(key === 38){ // up\n      if(y < this.state.cubeDimension+2) this.setState({cameraY: y + .5});\n    }\n    if(key === 39){ // right\n      this.setState({angle: this.state.angle-.075});\n    }\n    if(key === 40){ // down\n      \n      if(y > -(this.state.cubeDimension+2)) this.setState({cameraY: y - .5});\n    }\n  }\n\n  // Changes values in state to trigger face rotation\n  rotateCubeFace = (face,direction,cubeDepth,isMulti,blockMoveLog,moveLog,solveMoves,end,solveState) => {\n    let obj = {};\n    if(!blockMoveLog){\n      \n      let tempMove = \"\";\n      cubeDepth<10 ? tempMove+=\"0\"+cubeDepth : tempMove += cubeDepth;\n      if(face === 0) !isMulti ? tempMove += \"F\" : tempMove += \"f\";\n      else if(face === 1) !isMulti ? tempMove += \"U\" : tempMove += \"u\";\n      else if(face === 2) !isMulti ? tempMove += \"R\" : tempMove += \"r\";\n      else if(face === 3) !isMulti ? tempMove += \"B\" : tempMove += \"b\";\n      else if(face === 4) !isMulti ? tempMove += \"L\" : tempMove += \"l\";\n      else if(face === 5) !isMulti ? tempMove += \"D\" : tempMove += \"d\";\n      if(direction === -1) tempMove += \"'\";\n\n      moveLog&&moveLog.length > 0 ?\n        obj.moveLog = (moveLog + \" \" + tempMove) :\n        obj.moveLog = (tempMove);\n      \n      // Keeps tracks of solver's moves\n      if(solveState > -1) \n        obj.solveMoves = (solveMoves.length ? solveMoves + \" \" + tempMove : solveMoves + tempMove);\n    }\n\n    // Faces on opposite side of cube rotate backwards\n    if(face>2 && direction === -1) direction = 0;\n\n    else if (face>2 && direction === 0) direction = -1;\n\n    obj.blockMoveLog = false;\n    obj.face = face; // used\n    obj.turnDirection = direction; // used\n    obj.end = end + 90; \n    obj.cubeDepth = cubeDepth; // used\n    obj.isMulti = isMulti; // used\n    \n\n    return obj;\n  }\n\n  // Takes prebuilt algorithms and converts to moves\n  // allow for C,c\n  algorithm = (moveString,moveName) => {\n    if(this.state.currentFunc !== \"None\") return;\n    const moveArray = this.moveStringToArray(moveString);\n    this.setState({currentFunc : moveName, moveSet : moveArray});\n  }\n\n  // Refreshes page to reset cube\n  reset = () => {\n    let cD = this.state.cubeDimension;\n    let generated = cube.generateSolved(cD,cD,cD);\n    let rubiksObject = generated.tempArr;\n    this.setState({rubiksObject,moveSet: [],moveLog: \"\",currentFunc : \"None\",solveState : -1,autoPlay : false, playOne : false, isVisible : false, hoverData : [], solveMoves : \"\", prevSet : [],cpErrors:[]},()=>{\n      this.reloadTurnedPieces('all');\n    });\n    //window.location.reload();\n  }\n\n  // Generates a random move\n  generateMove = () => {\n    let maxDepth = Math.ceil((this.state.cubeDimension/2));\n    let randFace = Math.floor((Math.random() * 6));\n    let randTurn = Math.floor((Math.random() * 2)-1);\n    let randIsMulti = Math.floor((Math.random() * 2));\n    let randDepth = 1;\n    let cD = this.state.cubeDimension;\n\n    if(randFace>2&&cD%2) maxDepth-=1;\n\n    if(cD>2) \n      randDepth = Math.floor((Math.random() * maxDepth)) + 1;\n\n    if(randDepth===1) randIsMulti = 0;\n\n    if(randDepth === Math.ceil(cD/2) && cD%2)\n      randIsMulti=0;\n\n    return this.convertDataToMove([randFace, randTurn,randDepth,randIsMulti]);\n  }\n\n  convertDataToMove = (data) => {\n    let move = \"\";\n    let face = ['F','U','R','B','L','D']\n    move+=data[2].toString().length<2?\"0\".concat(data[2]):data[2];\n    move+=(data[3]?face[data[0]].toLowerCase():face[data[0]])\n    data[1]===-1?move+=\"\":move+=\"'\"\n    return move;\n  }\n\n  // Changes state active function to begin scrambling\n  beginScramble = () => {\n    \n    if(this.state.currentFunc === \"None\") {\n      let moveSet = [];\n      while (moveSet.length<25){\n        let temp = this.generateMove();\n        if(moveSet[moveSet.length-1]&&\n           moveSet[moveSet.length-1].slice(0,3)===temp.slice(0,3)&&\n           moveSet[moveSet.length-1].length!==temp.length);\n        else if(moveSet[moveSet.length-2]&&\n                moveSet[moveSet.length-1]&&\n                moveSet[moveSet.length-2]===temp&&\n                moveSet[moveSet.length-1]===temp);\n        else moveSet.push(temp);\n      }\n      this.setState({currentFunc : \"Scrambling\",moveSet});\n    }\n  }\n\n  // Starts the solve process\n  beginSolve = () => {\n    if(this.state.currentFunc !== \"None\") return;\n    this.setState({currentFunc : \"Solving\",solveState : 0,autoPlay : false, playOne : false, solveOnce : true});\n  }\n\n  stopSolve = () => {\n    this.setState({currentFunc : \"None\",solveState : -1,autoPlay : false, playOne : false, isVisible : false, hoverData : [], solveMoves : \"\", prevSet : [], moveSet : [],targetSolveIndex:-1,solvedSet:[]});\n  }\n\n  beginColorPicker = () => {\n    let cD = this.state.cubeDimension;\n    if(this.state.currentFunc !== \"None\") return;\n    const blank = [...cube.generateBlank(cD,cD,cD)];\n    this.setState({currentFunc : \"Color Picker\",rubiksObject: [...blank]},()=>{\n      //console.log(this.state.rubiksObject);\n      //console.log(\"reloading\");\n      this.reloadTurnedPieces('cp');\n    });\n  }\n\n  endColorPicker = () => {\n    this.reset();\n    this.setState({currentFunc : \"None\",cpErrors:[]});\n  }\n\n  rewindSolve = () => {\n    if(this.state.playOne) return;\n    if((this.state.prevSet[this.state.prevSet.length-1]===this.state.prevSet[this.state.prevSet.length-2]||this.state.prevSet[this.state.prevSet.length-1]===\"stop'\")&&!this.state.autoRewind){\n      this.setState({\n        autoPlay:false,autoRewind:true,targetSolveIndex:this.state.solvedSetIndex-2\n      });\n      return;\n    }\n    let newMoveSet = [];\n    let tempMoveSet = [...this.state.moveSet];\n    let tempPrev = [...this.state.prevSet];\n    let lastEl = tempPrev[tempPrev.length-1];\n    let popped = tempPrev.pop();\n    if(!popped) {\n      this.setState({autoRewind:false});\n      return;\n    }\n    popped[popped.length-1]===\"'\" ? popped=popped.slice(0,3) : popped+=\"'\";\n    newMoveSet.push(popped,lastEl,...tempMoveSet);\n    this.setState({\n      playOne:true,\n      prevSet:tempPrev,\n      moveSet:newMoveSet,\n      solvedSetIndex:this.state.solvedSetIndex-2\n    })\n  }\n\n  rewindAllSolve = () => {\n    if(this.state.playOne) return;\n    let newMoveSet = [];\n    let tempMoveSet = this.state.moveSet;\n    let tempPrev = this.state.prevSet;\n    let lastElArray = [];\n    let poppedArray = [];\n    for(let i = 0; i < tempMoveSet.length; i++){\n      let lastEl = tempPrev[tempPrev.length-1];\n      let popped = tempPrev.pop();\n      if(!popped) return;\n      popped[popped.length-1]===\"'\" ? popped=popped.slice(0,3) : popped+=\"'\";\n      poppedArray.push(popped);\n      lastElArray.push(lastEl);\n    }\n    \n    newMoveSet.push(...poppedArray,...lastElArray,...tempMoveSet);\n    this.setState({\n      playOne:true,\n      prevSet:tempPrev,\n      moveSet:newMoveSet\n    })\n  }\n\n  handleDragInput = (e, ui) => {\n    const {x, y} = this.state.deltaPositionInput;\n    this.setState({\n      deltaPositionInput: {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY,\n      }\n    });\n  };\n\n  onStartInput = () => {\n    this.setState({activeDragsInput: this.state.activeDragsInput+1});\n  };\n\n  onStopInput = () => {\n    this.setState({activeDragsInput: this.state.activeDragsInput-1});\n  };\n\n  handleDragControls = (e, ui) => {\n    const {x, y} = this.state.deltaPositionControls;\n    this.setState({\n      deltaPositionControls: {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY,\n      }\n    });\n  };\n\n  onStartControls = () => {\n    this.setState({activeDragsControls: this.state.activeDragsControls+1});\n  };\n\n  onStopControls = () => {\n    this.setState({activeDragsControls: this.state.activeDragsControls-1});\n  };\n\n  convertMoveToData = (move) => {\n    if(move.length < 2) return false;\n    let data = [];\n    let face = ['F','U','R','B','L','D']\n    data.push(face.indexOf(move[2].toUpperCase()));\n    move.length < 4 ? data.push(-1) : data.push(0);\n    move[0]==='0' ? data.push(parseInt(move[1])) : data.push(parseInt(move.substring(0, 2)))\n    move[2].toUpperCase() === move[2] ? data.push(false) : data.push(true);\n    return data;\n  }\n\n  mouseOver = (name,data,e) => {\n    if(this.state.showHints)\n      this.setState({\n        isVisible: true,\n        hoverData: data\n      });\n  }\n\n  mouseLeave = () => {\n    this.setState({\n      isVisible: false,\n      hoverData: []\n    });\n  }\n\n  // Converts move string to move array\n  // handle move short hand characters. ex: fx => 01Fx 02Fx; x = \"\" or \"'\" or \"2\"\n  moveStringToArray = str => {\n    let tempArray = str.split(\" \");\n    let moveArray = [];\n\n    // Run through split string and create duplicates where needed\n    // Handle other short hands\n    for(let i = 0; i < tempArray.length;i++){\n      if(tempArray[i].length === 4 && tempArray[i].slice(3,4)===\"2\") {\n        let tempMove = tempArray[i].slice(0,3);\n        moveArray.push(tempMove);\n        moveArray.push(tempMove);\n      }\n      else {\n        moveArray.push(tempArray[i]);\n      }\n    }\n    return moveArray;\n  }\n\n  // Generalized move function. Takes in array of moves and parse the moves\n  parseMoveArray = (moveArray) =>{\n    //if(typeof moveArray === 'string') moveArray = [moveArray];\n    let shifted = moveArray.shift();\n\n    let tempFace = 0;\n    let tempDirection = -1;\n    let tempDepth = 1;\n    let tempIsMulti = false;\n\n    if(shifted){\n      if(shifted.length === 4) tempDirection=0;\n      tempDepth = parseInt(shifted.slice(0,2));\n\n      if(shifted.slice(2,3) === shifted.slice(2,3).toLowerCase()){\n        tempIsMulti = true;\n      }\n\n      if(shifted.slice(2,3).toUpperCase() === \"U\") tempFace = 1;\n      else if(shifted.slice(2,3).toUpperCase() === \"F\") tempFace = 0;\n      else if(shifted.slice(2,3).toUpperCase() === \"B\") tempFace = 3;\n      else if(shifted.slice(2,3).toUpperCase() === \"R\") tempFace = 2;\n      else if(shifted.slice(2,3).toUpperCase() === \"L\") tempFace = 4;\n      else if(shifted.slice(2,3).toUpperCase() === \"D\") tempFace = 5;\n\n      return [tempFace,tempDirection,tempDepth,tempIsMulti];\n    }\n  }\n\n  /* Each piece that's rotated has it's rotation disrupted on other planes.\n   *\n   * This function solves that issue by setting all piece rotation back to zero\n   * and then placing colors to look as though the piece were still rotated.\n   * \n   * Some optimizations have been added. Undersides and insides of some pieces\n   * appear white instead of black initially but does not disrupt the rest of\n   * the cube. Likely won't be changed since that optimization greatly improves\n   * run time.\n   */\n  reloadTurnedPieces = (pos) => {\n    let cubes = [...this.state.cubes];\n    \n    for(let i = 0; i<this.state.rubiksObject.length;i++){\n      \n      let tempCube = {...cubes[i]};\n      let rotation = tempCube.rotation;\n\n\n      if(pos === tempCube.position){\n        tempCube.opacity=1;\n        cubes[i] = tempCube;\n      }\n\n      else if((rotation.x !== 0 || rotation.y !== 0 ||rotation.z !== 0) || \n           (pos==='all'||pos==='cp'||pos==='check')){\n        if(pos==='all'||pos==='cp') {\n          tempCube.position.x=this.state.rubiksObject[i][9];\n          tempCube.position.y=this.state.rubiksObject[i][10];\n          tempCube.position.z=this.state.rubiksObject[i][11];\n        }\n        if(pos==='check') {\n          tempCube.position.x=this.state.rubiksObject[i][6];\n          tempCube.position.y=this.state.rubiksObject[i][7];\n          tempCube.position.z=this.state.rubiksObject[i][8];\n        }\n        tempCube.material[0].color = new THREE.Color(this.state.rubiksObject[i][2]);\n        tempCube.material[1].color = new THREE.Color(this.state.rubiksObject[i][4]);\n        tempCube.material[2].color = new THREE.Color(this.state.rubiksObject[i][3]);\n        tempCube.material[3].color = new THREE.Color(this.state.rubiksObject[i][0]);\n        tempCube.material[4].color = new THREE.Color(this.state.rubiksObject[i][1]);\n        tempCube.material[5].color = new THREE.Color(this.state.rubiksObject[i][5]);\n        \n        tempCube.rotation.x = 0; tempCube.rotation.y = 0; tempCube.rotation.z = 0;\n        cubes[i] = tempCube;\n        \n      }\n    }\n\n    this.setState({cubes,reload : false});\n  }\n\n  // Changes the settings by passing setting to change and new val for the setting\n  changeSettings (settingToChange,newVals) {\n    switch(settingToChange){\n      case 'displayStats':\n        this.state.showStats ? document.body.children[9].style.display = \"none\" : document.body.children[9].style.display = \"\";\n        this.setState({showStats : !this.state.showStats});\n        break;\n      case 'displayMoveInput':\n        this.setState({showMoveInput:!this.state.showMoveInput});\n        break;\n      case 'displayControls':\n        this.setState({showControls:!this.state.showControls});\n        break;\n      case 'displayHints':\n        this.setState({showHints:!this.state.showHints});\n        break;\n      default:\n        console.log(\"Invalid Setting\");\n    }\n  }\n  \n  // Remove event listener on compenent unmount\t\n  componentWillUnmount() {    \n    window.removeEventListener(\"keydown\", this.keyHandling);\n  }\n\n  // Gets the url to be parsed\n  getSizeFromUrl(checkLocal) {\n    let limit = 75;\n    let cD;\n    \n    let parts = window.location.href.split('/');\n    let checkID = parts[parts.length-1][0]+parts[parts.length-1][1]+parts[parts.length-1][2];\n\n    if(checkLocal){\n      if(parts[2].substr(0,9)==='localhost'){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n\n    if(checkID === 'id='){\n      cD = parseInt(parts[parts.length-1].substr(3));\n    }\n\n    if (cD <= limit && cD >= 1) return cD; else return 3;\n  }\n\n  calculateTurnAtFace(coord1,compare1,coord2,compare2,piece1,piece2,dir1,dir2){\n    if(Math.abs(coord1)>=Math.abs(coord2)&&(Math.abs(coord1)>.1)) \n      return {calculated : compare1?dir1:(dir1+\"'\"),depth : piece2}\n      \n    if(Math.abs(coord2)>Math.abs(coord1)&&(Math.abs(coord2)>.1)) {\n      return {calculated : compare2?dir2:(dir2+\"'\"),depth : piece1}\n    }\n    return null;\n  }\n\n  calculateTurn(current,previous,piece,pieceFace,cD){\n\n    let calculated = null;\n    let depth = null;\n    let turn = null;\n\n    // difference in initial mouse down location and current mouse down\n    const dif = { \n      x: (previous.x-current.x), \n      y: (previous.y-current.y), \n      z: (previous.z-current.z)\n    }\n\n    if(current.x===previous.x && current.y === previous.y && current.z===previous.z){\n      return null;\n    }\n\n    //determines the move based on mouse difference from click to new position\n    switch(pieceFace){\n      case 0:\n        turn = this.calculateTurnAtFace(dif.z,dif.z<0,dif.x,dif.x>=0,cD-piece.z,cD-piece.x,\"R\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 1:\n        turn = this.calculateTurnAtFace(dif.x,dif.x<=0,dif.y,dif.y<0,cD-piece.x,piece.y+1,\"F\",\"R\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 2:\n        turn = this.calculateTurnAtFace(dif.z,dif.z>0,dif.y,dif.y>0,cD-piece.z,piece.y+1,\"F\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 3:\n        turn = this.calculateTurnAtFace(dif.z,dif.z>0,dif.x,dif.x<=0,cD-piece.z,cD-piece.x,\"R\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 4:\n        turn = this.calculateTurnAtFace(dif.z,dif.z<0,dif.y,dif.y<0,cD-piece.z,piece.y+1,\"F\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 5:\n        turn = this.calculateTurnAtFace(dif.x,dif.x>=0,dif.y,dif.y>0,cD-piece.x,piece.y+1,\"F\",\"R\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      default:\n    }\n\n    //console.log(\"{ turn: \" + calculated + \" } , { depth: \" + depth + \" }\");\n    return ((depth<10? \"0\" : \"\") + depth+calculated);\n  }\n\n  // Proto function for feature to be built later\n  calculateTheta(){\n\n  }\n\n  menuSetState = (obj) =>{\n    //console.log(obj);\n    this.setState(obj,()=>{\n      if(obj.activeAlgo){\n        this.reloadTurnedPieces('all');\n      }\n    });\n  }\n\n  autoJump = (state,moves) =>{\n    let tempState = JSON.parse(JSON.stringify(state));\n    tempState.moveSet = moves;\n    \n    while(tempState.moveSet.length){\n        //console.log(tempState.rubiksObject);\n        let cD = tempState.cubeDimension;\n        let blockMoveLog = tempState.blockMoveLog;\n        let moveLog = tempState.moveLog;\n        let solveMoves = tempState.solveMoves;\n        let rubiksObject = tempState.rubiksObject;\n        let end = tempState.end;\n        let solveState = tempState.solveState;\n        let moveData = \n          this.parseMoveArray(tempState.moveSet); // generates data for next move\n        let obj = \n          this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n        obj.rubiksObject = \n          cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n        tempState = {...tempState,...obj};\n    }\n    return [...tempState.rubiksObject];\n  }\n\n  generateAllSolveMoves = (state,rubiksObject) =>{\n    let beforeObject = rubiksObject.map(e=>[...e]);\n    //console.log(beforeObject);\n    let tempState = {...state}, solvedSet = \"\";\n    let currentIndex = null;\n    let previousIndex = null;\n    let indexOccurence = 0;\n    let error = false;\n    let counter = 0;\n    if(tempState.currentFunc === 'Color Picker'){\n      tempState.solveState = 0;\n      tempState.currentFunc = \"Solving\";\n      tempState.rubiksObject = rubiksObject.map(e=>[...e]);\n    }\n    while(tempState.currentFunc===\"Solving\"){\n      \n      if(!tempState.moveSet || !tempState.moveSet.length) {\n        currentIndex=tempState.rubiksIndex;\n        if(currentIndex===previousIndex) indexOccurence = indexOccurence+1;\n        else indexOccurence = 0;\n        \n        let moves = solver(tempState.solveState,tempState.rubiksObject,tempState.cubeDimension,this.moveStringToArray,\n          tempState.solveMoves,tempState.rubiksIndex,tempState.middles,tempState.edges,tempState.corners);\n        if(moves.moveSet && moves.moveSet[0]==='stop'){\n          if(this.state.currentFunc===\"Solving\"){\n            moves.solveMoves = tempState.solveMoves + ` ${moves.moveSet[0]}`;\n            moves.moveSet.pop();\n          }\n          else moves.moveSet.pop();\n        }\n        \n        if(moves.moveSet){\n          let temp = [];\n          for(let i = 0; i<moves.moveSet.length; i++){\n            \n            if(moves.moveSet[i]===''||moves.moveSet[i]===' '||moves.moveSet[i][0]===\"N\"||moves.moveSet[i]===\"'\");\n            else temp.push(moves.moveSet[i]);\n          }\n          moves.moveSet = temp;\n        }\n        if((indexOccurence>10 && tempState.solveState<1)||counter>100000) {\n          console.log(tempState.solveState);\n          error = true;\n          //console.log(JSON.stringify({beforeObject}));\n          moves.currentFunc=\"None\";\n        }\n        if(moves.currentFunc && moves.currentFunc===\"None\") solvedSet = tempState.solveMoves;\n        counter++;\n        tempState = {...tempState,...moves};\n        previousIndex=currentIndex;\n      }\n      else{\n        let cD = tempState.cubeDimension;\n        let blockMoveLog = tempState.blockMoveLog;\n        let moveLog = tempState.moveLog;\n        let solveMoves = tempState.solveMoves;\n        let rubiksObject = tempState.rubiksObject;\n        let end = tempState.end;\n        let solveState = tempState.solveState;\n        let moveData = this.parseMoveArray(tempState.moveSet); // generates data for next move\n        let obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n        obj.rubiksObject = cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n        tempState = {...tempState,...obj};\n      }\n    }\n    let splitSet = solvedSet.split(\" \");\n    if(splitSet[0][0]===\"N\"||splitSet[0][0]===\"'\") splitSet.shift();\n    let moveSet = []\n    splitSet.forEach(e => e[e.length-1]===\"'\"? moveSet.push(e.replace(\"'\",\"\")):moveSet.push(e+\"'\"));\n\n    //console.log(moveSet);\n    for(let i = 0; i<moveSet.length; i++){\n      if(moveSet[i]===''||moveSet[i]===' '||moveSet[i][0]===\"N\"||moveSet[i]===\"'\"||moveSet[i]===undefined){\n        //console.log(\"removed invalid move\");\n        moveSet.splice(i,1);\n      }\n    }\n\n    let maxDepth = Math.floor(tempState.cubeDimension/2);\n    moveSet = moveSet.map(move=>{\n      if(move===\"stop'\") return move;\n      //console.log(move);\n      let dataMove = this.convertMoveToData(move);\n      if(parseInt(dataMove[2])>maxDepth&&!dataMove[3]){\n        //console.log(\"Found over reaching move: [ \" + move + \" ]\");\n        dataMove[2]=(tempState.cubeDimension-dataMove[2])+1\n        if(parseInt(dataMove[0])===0) dataMove[0] = 3;\n        else if(parseInt(dataMove[0])===1) dataMove[0] = 5;\n        else if(parseInt(dataMove[0])===2) dataMove[0] = 4;\n        else if(parseInt(dataMove[0])===3) dataMove[0] = 0;\n        else if(parseInt(dataMove[0])===4) dataMove[0] = 2;\n        else if(parseInt(dataMove[0])===5) dataMove[0] = 1;\n        dataMove[1]===0?dataMove[1]=-1:dataMove[1]=0;\n\n        //console.log(\"Converted to: [ \" + this.convertDataToMove(dataMove) + \" ]\");\n        return this.convertDataToMove(dataMove);\n      }\n      return this.convertDataToMove(dataMove);\n    })\n    \n    //console.log(moveSet.length);\n\n\n    let moveSetLength = 0;\n    while(moveSet.length!==moveSetLength){\n      moveSetLength = moveSet.length;\n      for(let i = 0; i < moveSet.length-2; i++){\n        \n        if(moveSet[i].substring(0,3)===moveSet[i+1].substring(0,3) && moveSet[i].length!==moveSet[i+1].length){\n          moveSet.splice(i,2);\n        }\n      }\n\n      for(let i = 0; i < moveSet.length-2; i++){\n        if(moveSet[i]===moveSet[i+1] && moveSet[i]===moveSet[i+2]){\n          if(moveSet[i].length===3){moveSet[i]+=\"'\"}\n          else{moveSet[i]=moveSet[i].substring(0,3)}\n          moveSet.splice(i+1,2);\n        }\n      }\n      //console.log(moveSet.length);\n    }\n\n    \n\n    if(moveSet[0]===\"stop'\"&&moveSet[1]===\"stop'\"&&moveSet.length===2) moveSet = [];\n  \n    if(error) {\n      alert(\"Sorry for the inconvenience. This error is caused by an infinite loop issue with the solver and has been stopped to prevent freezing the application. The current move set has still been pushed and is playable for debugging purposes. Maybe you can figure out the issue before I can ;)\");\n      return {moveSet:[...moveSet],rubiksObject : beforeObject,solveable:false,solvedSet:[...moveSet],solvedSetIndex:0};\n    }\n    return {moveSet:[...moveSet],rubiksObject : beforeObject,solveable:true,solvedSet:[...moveSet],solvedSetIndex:0};\n  }\n\n  animateRotation(tempCubes){\n    cube.rotatePieces(cube.rotatePoint,tempCubes);\n  }\n\n  windowResized = () => {\n    this.setState({resized:true});\n  }\n\n  // Initialization and animation functions\n  componentDidMount() {\n\n    let cD = this.getSizeFromUrl();\n    let generated = cube.generateSolved(cD,cD,cD);\n    let rubiksObject = generated.tempArr;\n    let tempCubes = [];\n    let stats = new Stats();\n    const groups = [[],[],[],[],[],[]];\n    let previousMousePos = null;\n    let piecePos = null;\n    let intersected = null;\n\n    // === THREE.JS VARIABLES ===\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, .1, 1000 );\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    let raycaster = new THREE.Raycaster();\n    let mouse = new THREE.Vector2();\n    let cubeGeometry = new THREE.BoxGeometry(  );\n    let geometry = new THREE.PlaneGeometry(1,1);\n    //const loader = new THREE.TextureLoader().load('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSp2vqlj5dzmGwQfEBy7yNWfDvDVm6mgsA4768bcpsJDmdp9t0g7w&s');\n    const loader = new THREE.TextureLoader().load('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQW92XE-j1aJzRMI9kvvMZIf2VikZzzdEI87zl4rWgHMJBNJ9iw7A&s');\n    //const loader1 = new THREE.TextureLoader().load('https://cdn0.iconfinder.com/data/icons/arrows-11/100/arrow-1-512.png');\n    const loader1 = new THREE.TextureLoader().load('https://cdn2.iconfinder.com/data/icons/communication-language/100/Up_Arrow-01-512.png');\n    let material = new THREE.MeshBasicMaterial( {map:loader1,transparent: true,color: 'black', opacity:'.8',side: THREE.DoubleSide} );\n    let tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );\n\n    let windowHeight = window.innerHeight;\n\n    function onMouseMove( event ) {\n      mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;   \n    }\n    function onWindowResize(resized) {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      \n      // adjust the FOV\n      camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );\n      \n      camera.updateProjectionMatrix();\n      camera.lookAt( scene.position );\n\n      renderer.setSize( window.innerWidth, window.innerHeight-10 );\n      renderer.render( scene, camera );\n      resized();\n    }\n\n    // Bind event listeners to window\n    window.addEventListener(\"keydown\", this.keyHandling);\n    window.addEventListener(\"mousemove\", onMouseMove, false );\n    window.addEventListener(\"mousedown\", this.onMouseDown.bind(this), false );\n    window.addEventListener(\"mouseup\", this.onMouseUp.bind(this), false );\n    window.addEventListener(\"resize\", () => onWindowResize(this.windowResized), false );\n    \n    // Set background color and size\n    renderer.setClearColor(new THREE.Color(\"black\"),0);\n    renderer.domElement.className = \"canvas\";\n    renderer.setSize( window.innerWidth, window.innerHeight);\n    document.body.children[5].appendChild( renderer.domElement );\n\n    stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild( stats.dom);\n    document.body.children[9].style.display = \"none\"\n\n    // Prevents bluring\n    loader.anisotropy = renderer.capabilities.getMaxAnisotropy();\n    loader1.anisotropy = renderer.capabilities.getMaxAnisotropy();\n\n    // generate cubes with face colors based off memory cube\n    for(let i = 0; i < rubiksObject.length; i++){\n\n      // Store x,y,z of memory cube in easier to read variables\n      let cubeX = rubiksObject[i][6];\n      let cubeY = rubiksObject[i][7];\n      let cubeZ = rubiksObject[i][8];\n\n      // Map textures to each face to look nice and then color over\n      const cubeMaterials = [\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][2], side: THREE.FrontSide}),\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][4], side: THREE.FrontSide}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][3], side: THREE.FrontSide}),\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1,}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][1], side: THREE.FrontSide}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][5], side: THREE.FrontSide}), \n      ];\n    \n      // Add the new cube to temp cubes\n      tempCubes[i] = new THREE.Mesh(cubeGeometry, cubeMaterials);\n      //group.add( tempCubes[i] );\n      // position piece based off memory cube\n      tempCubes[i].translateX(cubeX);\n      tempCubes[i].translateY(cubeY);\n      tempCubes[i].translateZ(cubeZ); \n    }\n\n    // Translate cube so center of cube is 0,0,0\n    scene.translateX(.5-cD/2);\n    scene.translateY(.5-cD/2);\n    scene.translateZ(.5-cD/2);\n\n    // Allows for drag to rotate camera\n    const controls = new OrbitControls( camera , renderer.domElement);\n    controls.enableDamping = true;   //damping \n    controls.dampingFactor = 0.15;   //damping inertia\n    controls.enableZoom = true;      //Zooming\n    controls.autoRotate = false;     //Enable auto rotation\n    controls.minDistance = (2+cD);\n    controls.maxDistance = (2+cD)+20;\n    controls.keys = {\n      LEFT: null, //left arrow\n      UP: null, // up arrow\n      RIGHT: null, // right arrow\n      BOTTOM: null // down arrow\n    };\n\n    controls.addEventListener(\"change\", () => {\n      if (renderer) renderer.render(scene, camera);\n    });\n\n    // generate side 4 and 2 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)+.51);\n            tempPlane.translateY((cD-1)-j);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)+.51);\n            tempPlaneOther.translateY((cD-1)-j);\n            tempPlaneOther.rotateZ(Math.PI);\n          }\n          else if(i===1){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY((cD-1)+.51);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY((cD-1)+.51);\n            tempPlaneOther.rotateX(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ(-.51);\n            tempPlane.translateY((cD-1)-j);\n            tempPlane.rotateX(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ(-.51);\n            tempPlaneOther.translateY((cD-1)-j);\n          }\n          else if(i===3){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(-.51);\n            tempPlane.rotateX(-Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(-.51);\n            tempPlaneOther.rotateX(-Math.PI/2);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      groups[2].push(tempGroup);\n      groups[5].push(tempGroupOther);\n    }\n\n    // generate side 0 and 3 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)+.51);\n            tempPlane.translateY(k);\n            tempPlane.rotateZ(-Math.PI/2);\n            \n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)+.51);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateZ(Math.PI/2);\n          }\n          else if(i===1){\n            tempPlane.translateX((cD-1)+.51);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)+.51);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ(-.51);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(Math.PI);\n            tempPlane.rotateZ(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ(-.51);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateZ(-Math.PI/2);\n          }\n          else if(i===3){\n            tempPlane.translateX(-.51);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(-Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(-Math.PI/2);\n\n            tempPlaneOther.translateX(-.51);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(-Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n            //tempPlaneOther.rotateZ(Math.PI);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      \n      groups[0].push(tempGroup);     //Clockwise for white, counter for yellow\n      groups[3].push(tempGroupOther);//Counter for white, clockwise for yellow\n    }\n\n    // generate side 1 and 5 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)+.51);\n            tempPlane.rotateZ(-Math.PI/2);\n            tempPlane.rotateY(Math.PI/2);\n            \n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)+.51);\n            tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateZ(Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===1){\n            tempPlane.translateX((cD-1)+.51);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)-j);\n            //tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)+.51);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)-j);\n            //tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY(-.51);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY(-.51);\n            tempPlaneOther.rotateX(Math.PI/2);\n            tempPlaneOther.rotateZ(-Math.PI/2);\n          }\n          else if(i===3){\n            tempPlane.translateX(-.51);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)-j);\n            tempPlane.rotateX(Math.PI);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(-Math.PI/2);\n\n            tempPlaneOther.translateX(-.51);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)-j);\n            tempPlaneOther.rotateX(-Math.PI);\n            tempPlaneOther.rotateY(Math.PI/2);\n            //tempPlaneOther.rotateZ(Math.PI);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      \n      groups[1].push(tempGroup);     //Clockwise for white, counter for yellow\n      groups[4].push(tempGroupOther);//Counter for white, clockwise for yellow\n    }\n\n    groups.forEach(group => scene.add(...group));\n    // scene.add(...groups.flat(2)); //issues with new edge\n\n    // add cubes to state and then render\n    this.setState({\n      cubes : tempCubes,\n      cubeDimension : cD,\n      cameraZ : -(2+cD),\n      cameraX : (2+cD),\n      cameraY : -(2+cD),\n      rubiksObject,\n      middles: generated.middles,\n      edges: generated.edges,\n      corners: generated.corners,\n      currentFunc: 'Reset',\n      generatedButtons: cube.generateButtonData(this.getSizeFromUrl())\n    }, () => {\n      //let cubeGroup = new THREE.Group();\n      // Callback required to wait for setState to finish\n      for(let i = 0; i < rubiksObject.length; i++){\n        // Logic to only render outer pieces since inside pieces aren't ever used\n        if((this.state.cubes[i].position.x === 0 || this.state.cubes[i].position.x === this.state.cubeDimension-1) ||\n            (this.state.cubes[i].position.y === 0 || this.state.cubes[i].position.y === this.state.cubeDimension-1)||\n            (this.state.cubes[i].position.z === 0 || this.state.cubes[i].position.z === this.state.cubeDimension-1)){\n          scene.add( this.state.cubes[i] );\n        } \n      }\n\n      //scene.add( cubeGroup);\n\n      camera.position.z = this.state.cameraZ;// * Math.sin( this.state.angle );\n      camera.position.y = this.state.cameraY;\n      camera.position.x = this.state.cameraX;// * Math.cos( this.state.angle );\n\n      renderer.render( scene, camera );\n      animate();\n    });\n\n    // Function runs continuously to animate cube\n    let animate = () => {\n\n      // clear visible move hints\n      for(let i = 0; i < groups.length;i++)\n        groups[i].forEach(group => group.visible = false)\n\n      controls.enabled = true;\n      stats.begin();\n      requestAnimationFrame( animate );\n\n      // Mouse stuff here\n      // Consider moving into another function to unclutter animate\n      // Very expensive operation\n      if(this.state.currentFunc === \"Color Picker\" || this.state.currentFunc === \"None\"|| this.state.currentFunc === \"Solving\"|| this.state.currentFunc === \"Algorithms\") {\n\n        //check here that data isn't the same as previous so not running this every time\n        // Data on move button triggers visual move hints\n        if(this.state.isVisible){\n          let [hFace,hDir,hDepth,hMulti] = this.state.hoverData;\n          if(hFace<3){\n            if(hDir === -1){\n              if(!hMulti){\n                groups[hFace][hDepth-1].visible=true;\n              }\n              else\n                for(let i = 0; i <= hDepth-1; i++){\n                  groups[hFace][i].visible=true;\n                }\n            }\n            else {\n              if(!hMulti){\n                groups[hFace+3][hDepth-1].visible=true;\n              }\n              else\n              for(let i = 0; i <= hDepth-1; i++){\n                groups[hFace+3][i].visible=true;\n              }\n            }\n          }\n          else{\n            if(hFace===3) hFace=0;\n            if(hFace===4) hFace=2;\n            if(hFace===5) hFace=1;\n\n            if(hDir === -1){\n              if(!hMulti){\n                groups[hFace+3][(groups[hFace+3].length-1)-(hDepth-1)].visible=true;\n              }\n              else\n                for(let i = groups[hFace+3].length-1; i >= (groups[hFace+3].length-1)-(hDepth-1); i--){\n                  groups[hFace+3][i].visible=true;\n                }\n            }\n            else {\n              if(!hMulti){\n                groups[hFace][(groups[hFace].length-1)-(hDepth-1)].visible=true;\n              }\n              else\n                for(let i = groups[hFace].length-1; i >= (groups[hFace+3].length-1)-(hDepth-1); i--){\n                  groups[hFace][i].visible=true;\n                }\n            }\n          }\n        }\n\n        let previousPiece = this.state.previousPiece;\n\n        // Projects mouse onto scene to find intersected objects\n        raycaster.setFromCamera( mouse, camera );\n\n        // calculate objects intersecting the picking ray\n        let intersects = raycaster.intersectObjects( scene.children );\n        if (intersects[0] && intersects[0].object.material.length && !this.state.mouseDown){\n          previousMousePos = null;\n          piecePos = null;\n          intersected = null;\n          controls.enabled = false;\n          // Get faces to line up properly\n          let faceInteresected = intersects[0].faceIndex;\n          let tempIndex = -1;\n          \n          // Assign the intersected face index to be recolored on hover\n          \n          for(let i = 0; i < 6; i++){\n            if(faceInteresected===i*2 || faceInteresected=== i*2+1) {\n              tempIndex = i;\n              this.setState({mouseFace : i});\n              break;\n            }\n          }\n\n          // Recolors last hovered piece. rgb values of cyan\n          if(intersects[0].object.material[tempIndex].opacity!==.8){\n               \n            if(previousPiece!==null) {\n              let previousPiece = this.state.previousPiece;\n              previousPiece.opacity=1;\n              //this.reloadTurnedPieces(previousPiece);\n              this.setState({previousPiece:null});\n            }\n          }\n          \n          // Recolor face that mouse is over\n          if(intersects[0].object.material[tempIndex] && tempIndex > -1)\n            if(intersects[0].object.material[tempIndex].color){\n              // store the hovered face for use later\n              this.setState({facePosX : intersects[0].object.position.x,\n                            facePosY : intersects[0].object.position.y,\n                            facePosZ : intersects[0].object.position.z,\n                            faceSide : tempIndex });\n              intersects[0].object.material[tempIndex].opacity=.8;\n              //console.log(intersects[0].object.material[tempIndex].opacity);\n              // store the hovered coordinates so that if a different\n              // piece is hovered, the previous gets colored back.\n              this.setState({previousPiece : intersects[0].object.material[tempIndex]});\n            }\n        }\n\n        else if(this.state.mouseDown){\n          if(this.state.mouseFace === null){\n            // dragging mouse on canvas should rotate cube\n          } \n\n          else{\n            try{\n              let toFace = [2,4,3,0,1,5];\n              \n              if(previousMousePos === null) {\n                previousMousePos = intersects[0].point;\n                piecePos = intersects[0].object.position;\n                intersected = Math.floor(intersects[0].faceIndex/2);\n              }\n              else{\n                  let calculated = this.calculateTurn(intersects[0].point,previousMousePos,piecePos,toFace[intersected],cD);\n                  if(calculated!==null&&!calculated.includes(\"null\")){\n                    //console.log(calculated)\n                    this.setState({mouseDown: false},()=>{\n                      this.algorithm(calculated,\"Drag Turn\");\n                    });\n                  }\n                \n              }\n            }catch(e){\n              //console.error(\"Error prevented\");\n            }\n          }\n        }\n\n        // \n        else if(this.state.mouseFace !== null){\n          if(previousPiece!==null) {\n            previousPiece.opacity=1;\n            //this.reloadTurnedPieces(previousPiece);\n            this.setState({previousPiece:null});\n          }\n\n          previousMousePos = null;\n          piecePos = null;\n          intersected = null;\n          this.setState({mouseFace : null});\n        }\n      }\n      \n      // Animate queued rotation\n      if(this.state.start<=this.state.end){\n        this.setState(cube.rotatePieces(cube.rotatePoint,tempCubes,this.state));\n      }\n\n      // Handles move queueing based on function\n      else {\n        if(this.state.reload) this.reloadTurnedPieces(this.state.face);\n        if(this.state.currentFunc !== \"None\"){\n\n          // Doesn't work with !==\n          if(this.state.currentFunc === \"Undo\" ||\n             this.state.currentFunc === \"Redo\"){}\n\n          // Keeps undo/redo updated with other moves\n          // find the error in this logic\n          else {\n            let moveLog = this.state.moveLog;\n            let index = this.state.undoIndex;\n\n            if(index > 0){\n              let moveArray = this.moveStringToArray(moveLog);\n\n              if(this.state.currentFunc[0]==='0' || this.state.currentFunc[0]==='1' ||\n                 this.state.currentFunc[1]==='1' || this.state.currentFunc[1]==='2' || this.state.currentFunc[1]==='3'){\n                let tempVal = moveArray[moveArray.length-1];\n                for(let i = 0; i <= index; i++){\n                  moveArray.pop();\n                }\n                moveArray.push(tempVal);\n              }\n\n              else{\n                for(let i = 0; i < index; i++){\n                  moveArray.pop();\n                }\n              }\n\n              moveLog = moveArray.join(\" \");\n              this.setState({undoIndex:0,moveLog});\n            }\n          }\n\n          // Moves based on active function\n          if (this.state.currentFunc===\"Scrambling\"){\n            if(this.state.moveSet&&this.state.moveSet.length){\n              let cD = this.state.cubeDimension;\n              let tempRubiks = this.state.rubiksObject;\n              let blockMoveLog = this.state.blockMoveLog;\n              let moveLog = this.state.moveLog;\n              let solveMoves = this.state.solveMoves;\n              let solveState = this.state.solveState;\n              let end = this.state.end;\n\n\n              if(typeof(this.state.moveSet[0][0])==='number') {\n                //console.log(\"changing speed\");\n                let moveSet=this.state.moveSet;\n                this.changeSpeed(...moveSet[0],true);\n                moveSet.shift();\n                this.setState({moveSet});\n              }\n              else{\n                let moveData = this.parseMoveArray(this.state.moveSet);\n\n\n                if(moveData){\n                  let obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n      \n                  obj.rubiksObject = cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,tempRubiks);\n\n                  this.setState(obj);\n                }\n              }\n            }\n            else{\n              this.setState({currentFunc : \"None\",moves : 0});\n            }\n\n            // let randFace = Math.floor((Math.random() * 6));\n            // let randTurn = Math.floor((Math.random() * 2)-1);\n            // let randIsMulti = Math.floor((Math.random() * 2));\n            // this.state.moves < 25 ?\n            //   this.scramble(randFace,randTurn,randIsMulti) :\n            //   this.setState({currentFunc : \"None\",moves : 0});\n          }\n          else if (this.state.currentFunc===\"Solving\"||this.state.currentFunc===\"Algorithms\"){\n            // Place holder for full solve testing\n            if(this.state.autoTarget && !this.state.autoPlay && !this.state.autoRewind) {\n              this.setState({autoTarget:false},()=>this.reloadTurnedPieces('check'))\n            }\n\n            else if(this.state.solveOnce){\n              this.setState({solveOnce:false},()=>{\n                let a = performance.now();\n                this.setState(this.generateAllSolveMoves(this.state,this.state.rubiksObject));\n                let b = performance.now();\n                //console.log('It took ' + ((b - a)/1000).toFixed(3) + ' seconds to solve.');\n                this.setState({solveTime:((b - a)/1000).toFixed(3)})\n              });\n\n            }\n            // If there are no moves queued, check to see if more moves can be queued\n            else if(!this.state.moveSet.length){\n            }\n            // If playone or autoplay is true, progress accordingly\n            else if(this.state.playOne){\n              let cD = this.state.cubeDimension;\n              let tempRubiks = this.state.rubiksObject;\n              let blockMoveLog = this.state.blockMoveLog;\n              let moveLog = this.state.moveLog;\n              let solveMoves = this.state.solveMoves;\n              let moveSet = this.state.moveSet;\n              let end = this.state.end;\n              let solveState = this.state.solveState;\n              let obj = {};\n\n              if(typeof(moveSet[0][0])==='number') {\n                this.changeSpeed(...moveSet[0],true);\n                moveSet.shift();\n                obj.moveSet=moveSet;\n              }\n              else{\n\n                // generates data for next move\n                let moveData = this.parseMoveArray(moveSet);\n\n                // takes next move data and queues changes to be made to state\n                \n                if(moveData){\n                  obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n                }\n\n                // Turn off play one so only runs once\n                if(this.state.playOne) obj.playOne = false;\n\n                // hides move the hint during the move\n                this.mouseLeave();\n                \n                // store the object here\n                if(moveData){\n                  obj.rubiksObject = cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,tempRubiks);\n                  obj.solvedSetIndex = this.state.solvedSetIndex+1;\n                }\n\n                //console.log(obj);\n              }\n              this.setState(obj);\n            }\n            // Show hint over next move\n            else if(this.state.moveSet.length){\n              let moveSet = this.state.moveSet;\n              let obj = {};\n              if(typeof(moveSet[0][0])==='number') {\n                //console.log(\"changing speed\");\n                this.changeSpeed(...moveSet[0],true);\n                moveSet.shift();\n                obj.moveSet=moveSet;\n              }\n              else{\n                let data = this.convertMoveToData(moveSet[0]);\n                if(data){\n                  this.mouseOver(this.state.moveSet[0],data);\n                }\n              }\n              if(obj.length){\n                this.setState({obj});\n              }   \n            }\n          }\n\n          else if(this.state.currentFunc===\"Color Picker\"){\n            // Code here for color picker interface\n          }\n          else if(this.state.currentFunc==='Reset'){\n            this.reset();\n          }\n          else {\n            if(this.state.moveSet.length){\n              let cD = this.state.cubeDimension;\n              let tempRubiks = this.state.rubiksObject;\n              let blockMoveLog = this.state.blockMoveLog;\n              let moveLog = this.state.moveLog;\n              let solveMoves = this.state.solveMoves;\n              let solveState = this.state.solveState;\n              let end = this.state.end;\n\n\n              if(typeof(this.state.moveSet[0][0])==='number') {\n                //console.log(\"changing speed\");\n                let moveSet=this.state.moveSet;\n                this.changeSpeed(...moveSet[0],true);\n                moveSet.shift();\n                this.setState({moveSet});\n              }\n              else{\n                let moveData = this.parseMoveArray(this.state.moveSet);\n\n\n                if(moveData){\n                  let obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n      \n                  obj.rubiksObject = cube.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,tempRubiks);\n\n                  this.setState(obj);\n                }\n              }\n\n            } \n            else{\n              this.setState({currentFunc:\"None\"}); \n            }\n          }\n        }\n      }\n      \n      controls.update();\n      renderer.render( scene, camera );\n      stats.end();     \n    };\n  }\n\n  // Renders html to the index.html page\n  render() {\n    \n    return (\n      <div className=\"App\" style={{width:\"max-content\"}}>\n        \n        <Navbar\n          title=\"Rubik's Cube\"\n          changeSettings={this.changeSettings.bind(this)}\n          isLocal={this.getSizeFromUrl(true)}\n          state={this.state}\n        />\n\n        <p style={{position:\"fixed\", top: \"100px\", left: \"10px\",color: \"white\",fontSize:\"1rem\"}}>Speed: {this.state.currentSpeed}</p>\n        <p style={{position:\"fixed\", top: \"75px\", right: \"10px\",color: \"white\",fontSize:\"1.5rem\"}}>{this.state.currentFunc === \"None\" ? \"\" : this.state.currentFunc}</p>\n        <div style={{position:\"absolute\", top: \"75px\",marginLeft: \"50%\",left:\"-105px\"}}>\n          {this.state.currentFunc===\"None\"||this.state.currentFunc===\"Undo\"||this.state.currentFunc===\"Redo\"||this.state.currentFunc===\"Drag Turn\"?\n          [<button key=\"undo\" className=\"redoUndo\" style={{marginRight:\"10px\",width:\"100px\",height:\"50px\",fontSize:\"1.5rem\"}} onClick={() => this.undo()}>Undo</button>,\n          <button key=\"redo\" className=\"redoUndo\" style={{marginRight:\"10px\",width:\"100px\",height:\"50px\",fontSize:\"1.5rem\"}} onClick={() => this.redo()}>Redo</button>]\n          :\"\"\n          }\n        </div>\n\n        <Speeds //Top left with slider\n          onSliderChange={this.onSliderChange}\n          isDisabled={this.state.currentFunc===\"None\"||this.state.currentFunc===\"Solving\"||this.state.currentFunc===\"Algorithms\"||this.state.currentFunc===\"Scrambling\"? false:true}\n        />\n\n        { this.state.showMoveInput? \n          <MoveInput\n            algorithm = {this.algorithm}\n            handleDrag = {this.handleDragInput}\n            onStart = {this.onStartInput}\n            onStop = {this.onStopInput}\n          /> : \"\"\n        }\n\n        <Menu \n          state = {this.state}\n          setState = {this.menuSetState}\n          beginScramble = {this.beginScramble}\n          disableHover={this.state.showGuideArrows}\n\n          //Controls\n          generatedButtons={this.state.generatedButtons}\n          size={this.getSizeFromUrl()}\n          rotateOneFace={this.rotateOneFace}\n          mouseEnter= {this.mouseOver}\n          mouseLeave= {this.mouseLeave}\n\n          //Color Picker\n          beginColorPicker={this.beginColorPicker}\n          endColorPicker={this.endColorPicker}\n          colorPicked={this.state.colorPicked}\n          changeColor={this.changeColor}\n          isValidConfig={this.state.isValidConfig}\n          setColorPickedCube={this.setColorPickedCube}\n          cpErrors={this.state.cpErrors}\n\n          //Solver\n          beginSolve={this.beginSolve}\n          stopSolve={this.stopSolve}\n          rewindOne={this.rewindSolve}\n          reload={this.reloadTurnedPieces}\n          autoJump={this.autoJump}\n        />\n  \n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}