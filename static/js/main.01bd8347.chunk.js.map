{"version":3,"sources":["solvers/edges/solveWhiteCross.js","solvers/corners/solveWhiteCorners.js","solvers/edges/solveMiddleEdges.js","solvers/edges/solveYellowCross.js","solvers/edges/alignYellowCross.js","solvers/corners/solveYellowCorners.js","solvers/corners/alignYellowCorners.js","solvers/middles/white.js","solvers/middles/yellow.js","solvers/middles/blue.js","solvers/middles/green.js","solvers/middles/orange.js","solvers/edges/solveFrontEdgeSegments.js","solvers/edges/solveBackEdgeSegments.js","solvers/edges/solveMiddleEdgeSegements.js","components/Navbar/Navbar.js","cubeFunctions/algorithms.js","components/Patterns.js","components/Speeds.js","components/Controls.js","components/MoveInput.js","components/ColorPicker.js","cubeFunctions/cube.js","solvers/solveMiddleLogic.js","solvers/solveMiddles.js","solvers/solveEdgeLogic.js","solvers/solveEdges.js","solvers/solver.js","App.js","serviceWorker.js","index.js"],"names":["inMiddle","coord","maxCoord","minCoord","module","exports","rubiksObject","cubeDimension","moveStringToArray","edges","moveString","cube","space","solvedEdges","solveState","fourEdgeSections","splitEdges","edgeSegments","length","segmentsPerSection","temp","i","push","sectionSpliter","pieceOne","pieceTwo","pieceThree","pieceFour","includes","emptyCount","whiteSide","cubeX","cubeY","cubeZ","j","moveArray","moveSet","corners","solvedCorners","dim","moveFromMiddle212","moveFromMiddle210","moveFromMiddle010","edgeOne","edgeTwo","edgeThree","edgeFour","blueSide","greenSide","recipe","cubeIndex","cubeAtIndex","skip","counter","solveMoves","solveAlgo","obj","moveLog","currentFunc","solveCount","move","depth","side","current","solved","index","currentSide","row","Math","floor","column","x","y","z","middle","opposite","isOddCube","console","log","extractFromFront","moveFromMiddleToBack","flipPieceOnBack","solveFromBackToFront","yellowSide","displace","solve","replace","flip","firstEdge","secondEdge","thirdEdge","Navbar","props","className","style","color","title","DropdownButton","type","data-toggle","onClick","changeSettings","state","showStats","showMoveInput","showControls","defaultChecked","showHints","isLocal","Dropdown","Item","href","backgroundColor","float","trigger","id","close","zIndex","fontSize","marginBottom","marginTop","paddingTop","paddingBottom","value","algorithms","name","moves","worksFor","position","buttons","Patterns","bottom","left","border","forEach","e","size","algorithm","key","width","top","Speeds","isDisabled","defaultValue","min","max","step","disabled","onChange","onSliderChange","centerButtons","singleButtons","multiButtons","singleCols","multiCols","namesToColors","face","bgc","React","memo","handle","defaultPosition","window","innerHeight","grid","scale","onStart","handleStart","onDrag","handleDrag","onStop","handleStop","marginRight","generatedButtons","center","element","rotateOneFace","clockwise","data","onMouseEnter","mouseEnter","onMouseLeave","mouseLeave","single","colors","lengthBtns","lengthBtns1","multi","MoveInput","placeholder","onKeyDown","document","getElementById","stopPropagation","borderRadius","margin","ColorPicker","innerWidth","height","colorPicked","changeColor","isValidConfig","setColorPickedCube","endColorPicker","generateSolved","_x","_y","_z","tempArr","middles","tempMiddles","tempEdges","k","side0","side1","side2","side3","side4","side5","edgeType","tempCount","tempType","generateBlank","generateButtonData","numLayers","centerLayer","ceil","faces","baseNameSingle","baseNameMulti","toLowerCase","rotatePoint","c1","c2","direction","p1","p2","rotation","theta","PI","cos","sin","rotatePoint2","solveMiddleLogic","cubeDimensions","rubiksObjectAtIndex","faceColor","whiteSolver","yellowSolver","blueSolver","orangeSolver","greenSolver","solveMiddles","oddTopMiddleIndex","trim","rubiksIndex","indexOf","solveEdgeLogic","edgeLength","section","frontEdges","backEdges","middleEdges","solveEdges","CONSTANTS","solver","solveWhiteCross","solveWhiteCorners","solveMiddleEdges","solveYellowCross","alignYellowCross","alignYellowCorners","solveYellowCorners","App","cubes","blackObject","speed","rotationSpeed","start","end","turnDirection","cameraX","cameraY","cameraZ","prevSet","angle","cubeDepth","currentSpeed","reload","facePosX","facePosY","facePosZ","faceSide","mouseFace","mouseDown","mousePos","undoIndex","blockMoveLog","previousPiece","showGuideArrows","activeDragsInput","deltaPositionInput","controlledPositionInput","activeDragsControls","deltaPositionControls","controlledPositionControls","isMulti","isVisible","hoverData","showSolveController","autoPlay","playOne","generateAllMoves","rotateFace","cubeFace","cD","object","centerPoint","degrees","newPoint","tempFace","rotatePieces","rotate","tempCubes","setState","round","keyBinds","toUpperCase","keyHandling","keyCode","changeSpeed","_speed","_rotationSpeed","_name","changeFaceColor","pos","tempObj","tempCube","reloadTurnedPieces","checkColors","error","success","rubiks","generated","newGenerated","checked","otherChecked","pieceIndex","piece","rubik","validPiece","slice","sort","validEdgePlacement","checkOccurences","a1","a2","failedColors","count","rubiksLength","whiteCount","blueCount","redCount","yellowCount","orangeCount","greenCount","duplicateFace","duplicateColors","matchedCount","validAmount","res","generateAllSolveMoves","solveable","undo","redo","backwardsMove","substring","err","vals","rotateCubeFace","rotateCamera","tempMove","moveName","reset","scramble","maxDepth","randFace","random","randTurn","randIsMulti","randDepth","beginScramble","beginSolve","solveOnce","stopSolve","beginColorPicker","blank","rewindSolve","tempPrev","tempMoveSet","lastEl","popped","pop","newMoveSet","handleDragInput","ui","deltaX","deltaY","onStartInput","onStopInput","handleDragControls","onStartControls","onStopControls","convertMoveToData","parseInt","convertDataToMove","mouseOver","str","tempArray","split","parseMoveArray","shifted","shift","tempDirection","tempDepth","tempIsMulti","opacity","material","THREE","solveMultipleEdges","beforeObject","map","tempState","solvedSet","currentIndex","previousIndex","indexOccurence","moveData","splitSet","extraMoves","event","this","settingToChange","newVals","body","children","display","removeEventListener","parts","location","checkID","substr","coord1","compare1","coord2","compare2","piece1","piece2","dir1","dir2","abs","calculated","previous","pieceFace","turn","dif","calculateTurnAtFace","getSizeFromUrl","stats","Stats","groups","previousMousePos","piecePos","intersected","scene","camera","renderer","antialias","alpha","raycaster","mouse","cubeGeometry","geometry","loader","load","loader1","transparent","tanFOV","tan","fov","windowHeight","addEventListener","clientX","clientY","onMouseDown","bind","onMouseUp","aspect","atan","updateProjectionMatrix","lookAt","setSize","render","setClearColor","domElement","appendChild","showPanel","dom","anisotropy","capabilities","getMaxAnisotropy","cubeMaterials","translateX","translateY","translateZ","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","autoRotate","minDistance","maxDistance","keys","LEFT","UP","RIGHT","BOTTOM","tempGroup","tempGroupOther","tempPlane","tempPlaneOther","rotateZ","rotateX","add","visible","rotateY","group","animate","enabled","begin","requestAnimationFrame","hFace","hDir","hDepth","hMulti","setFromCamera","intersects","intersectObjects","faceInteresected","faceIndex","tempIndex","point","calculateTurn","tempVal","join","a","performance","now","b","toFixed","tempRubiks","update","solveBtn","right","solveInterface","marginLeft","disableHover","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.01bd8347.chunk.js","sourcesContent":["function inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = 0; i < edgeSegments;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction solveWhiteCross(rubiksObject,cubeDimension,moveStringToArray,edges){\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let space = \"\";\n    let solvedEdges = 0;\n\n    let dim = cubeDimension;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n\n    if(dim === 2) {return {solveState : 2};}\n\n    let fourEdgeSections = sectionSpliter(edges);\n\n    let pieceOne = fourEdgeSections[0][0];\n    let pieceTwo = fourEdgeSections[3][0];\n    let pieceThree = fourEdgeSections[1][0];\n    let pieceFour = fourEdgeSections[2][0];\n\n    for(let i = 0; i < cube.length; i++){\n      if(moveString.length) space = \" \";\n      if(cube[i].includes(\"white\")){\n\n        let emptyCount = 0;\n        let whiteSide = -1;\n        let cubeX = cube[i][6];\n        let cubeY = cube[i][7];\n        let cubeZ = cube[i][8];\n        \n\n        for(let j = 0; j < 6; j++){\n          if (cube[i][j] === \"black\") emptyCount++;\n          else {\n            if(cube[i][j] === \"white\") whiteSide = j;\n          }\n        }\n\n        // If edge piece\n        if(emptyCount === 4) {\n          if(i===pieceOne && solvedEdges === 0 ){\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===maxCoord)\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01U' 01R' 01F'\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01F'\" : moveString+= space + \"01R 01U\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01F2\" : moveString+= space + \"01D 01R 01F'\";\n\n            else if(cubeX===minCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01F\" : moveString+= space + \"01L' 01U'\";\n\n            //If piece one is in y section 1\n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01L 01F\" : moveString+= space + \"01U'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01R' 01F'\" : moveString+= space + \"01U\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01D' 01F2\" : moveString+= space + \"01R 01F'\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01D 01F2\" : moveString+= space + \"01L' 01F\";\n            \n\n            //If piece one is in y section 2\n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01U2\" : moveString+= space + \"01B 01L 01U'\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01R2 01F'\" : moveString+= space + \"01R' 01U\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01B2 01U2\" : moveString+= space + \"01B' 01L 01U'\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B' 01U2\" : moveString+= space + \"01L 01U'\";\n            \n          }\n          if(i===pieceTwo && solvedEdges === 1){\n            \n            if(cubeX===minCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01L' 01R 01U' 01R'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01D' 01F' 01D 01F\" : moveString+= space + \"01D' 01L'\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? moveString+= space + \"01R 01F2 01R' 01F2\" : moveString+= space + \"01R 01F 01U 01F'\";\n            \n\n            //If piece two is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01L\" : moveString+= space + \"01F 01U' 01F'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F2 01R' 01F2\" : moveString+= space + \"01U 01F' 01U'\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01F' 01D' 01F\" : moveString+= space + \"01F2 01R 01F2\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01F' 01D 01F\" : moveString+= space + \"01L'\";\n            \n\n            //If piece two is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F 01U2 01F'\" : moveString+= space + \"01U' 01L 01U\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B2 01L2\" : moveString+= space + \"01R' 01F 01U 01F'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01F' 01D2 01F\" : moveString+= space + \"01D 01L'\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01L2\" : moveString+= space + \"01B' 01U' 01L 01U\";\n            \n          }\n          if(i===pieceThree && solvedEdges === 2){\n  \n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? moveString+= space + \"01D 01F 01D' 01F'\" : moveString+= space + \"01D 01R\";\n            \n            else if(cubeX===maxCoord && cubeY===minCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01R 01F' 01U 01F\";\n            \n            \n            //If piece three is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F2 01L 01F2\" : moveString+= space + \"01F' 01U' 01F\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01R'\" : moveString+= space + \"01F' 01U 01F\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01F 01D' 01F'\" : moveString+= space + \"01R\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01F 01D 01F'\" : moveString+= space + \"01F2 01L' 01F2\";\n            \n\n            //If piece three is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F' 01U2 01F\" : moveString+= space + \"01U 01R' 01U'\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01R2\" : moveString+= space + \"01R' 01F' 01U 01F\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01F 01D2 01F'\" : moveString+= space + \"01D' 01L\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01B2 01R2\" : moveString+= space + \"01B' 01U 01R' 01U'\";\n            \n          }\n          if(i===pieceFour && solvedEdges === 3){\n  \n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===minCoord && cubeZ===minCoord)\n              !whiteSide ? solvedEdges++ : moveString+= space + \"01D 01F' 01R 01F\";\n            \n            //If piece four is in y section 1\n            if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F 01L 01F'\" : moveString+= space + \"01F2 01U' 01F2\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===maxCoord)\n              whiteSide===1 ? moveString+= space + \"01F' 01R' 01F\" : moveString+= space + \"01F2 01U 01F2\";\n            \n            else if(cubeX===maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===2 ? moveString+= space + \"01D'\" : moveString+= space + \"01F' 01R 01F\";\n            \n            else if(cubeX===minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ===minCoord)\n              whiteSide===4 ? moveString+= space + \"01D\" : moveString+= space + \"01F 01L' 01F'\";\n            \n\n            //If piece four is in y section 2\n            if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===maxCoord)\n              whiteSide===3 ? moveString+= space + \"01F2 01U2 01F2\" : moveString+= space + \"01B 01L' 01D 01L\";\n            \n            else if(cubeX===maxCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01F' 01R2 01F\" : moveString+= space + \"01R 01D' 01R'\";\n            \n            else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY===maxCoord && cubeZ===minCoord)\n              whiteSide===3 ? moveString+= space + \"01D2\" : moveString+= space + \"01D' 01F' 01R 01F\";\n            \n            else if(cubeX===minCoord && cubeY===maxCoord && inMiddle(cubeZ,maxCoord,minCoord))\n              whiteSide===3 ? moveString+= space + \"01F 01L2 01F'\" : moveString+= space + \"01L' 01D 01L\";\n            \n          }\n        }\n      }\n    }\n    \n    const moveArray = moveStringToArray(moveString);\n\n    if(solvedEdges < 4){\n        return {moveSet : moveArray};\n    } else{\n        return {solveState : 2}\n    }\n}\n\nmodule.exports = solveWhiteCross;","  // Solves white (front) corners\n  function solveWhiteCorners(rubiksObject,cubeDimension,moveStringToArray,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let solvedCorners = 0;\n\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[0]\n    let pieceTwo = corners[1]\n    let pieceThree = corners[2]\n    let pieceFour = corners[3]\n\n    for(let i = 0; i < cube.length; i++){\n      let whiteSide = -1;\n      let cubeX = cube[i][6];\n      let cubeY = cube[i][7];\n      let cubeZ = cube[i][8];\n\n      for(let j = 0; j < 6; j++){\n        if(cube[i][j] === \"white\") whiteSide = j;\n      }\n\n      if(i===pieceOne && solvedCorners === 0 ){\n        //Front\n        if(cubeX===minCoord && cubeY===minCoord && cubeZ===maxCoord){\n          if(whiteSide===0){solvedCorners++}\n          else if(whiteSide===1) moveString=\"01L' 01B 01L 01B' 01L' 01B 01L\";\n          else moveString=\"01L' 01B' 01L 01B2 01U 01B' 01U'\";\n        }\n        else if(cubeX===maxCoord && cubeY===minCoord && cubeZ===maxCoord) moveString=\"01R 01L' 01B 01L 01R'\"\n        else if(cubeX===maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01R' 01B' 01R 01U 01B' 01U'\";\n        else if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01D' 01U 01B 01U' 01D\"\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01U 01B 01U'\"\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01L' 01B 01L\"\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01L' 01B2 01L\"\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01U 01B' 01U'\"\n      }\n\n      if(i===pieceTwo && solvedCorners === 1 ){\n        if(cubeX===maxCoord && cubeY===minCoord && cubeZ===maxCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide===1) moveString =\"01R 01B' 01R' 01B 01R 01B' 01R'\";\n          else moveString =\"01U' 01B 01U 01B' 01U' 01B 01U\";\n        }\n        else if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01U' 01D 01B 01D' 01U\";\n        else if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01L 01R 01B2 01R' 01L'\";\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01R 01B' 01R'\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01B 01R 01B' 01R'\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01B2 01R 01B' 01R'\";\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01R 01B2 01R'\";\n      }\n      \n      if(i===pieceThree && solvedCorners === 2 ){\n        if(cubeX===minCoord && cubeY===minCoord && cubeZ===minCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide === 4) moveString =\"01D' 01B 01D 01B' 01D' 01B 01D\";\n          else moveString =\"01L 01B' 01L' 01B 01L 01B' 01L'\";\n        }\n        else if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord) moveString=\"01R' 01L 01B' 01L' 01R\";\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01D' 01B 01D\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) moveString=\"01D' 01B2 01D\";\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01B' 01D' 01B' 01D\";\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) moveString=\"01D' 01B' 01D\";\n      }\n      if(i===pieceFour && solvedCorners === 3 ){ \n        if(cubeX === maxCoord && cubeY===minCoord && cubeZ===minCoord){\n          if(whiteSide === 0){solvedCorners++}\n          else if(whiteSide === 2) moveString =\"01D 01B' 01D' 01B 01D 01B' 01D'\";\n          else moveString =\"01R' 01B 01R 01B' 01R' 01B 01R\";\n        }\n        //Back\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===maxCoord) {moveString=\" 01R' 01B2 01R\";}\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===maxCoord) {moveString=\"01D 01B' 01D'\";}\n        else if(cubeX===maxCoord && cubeY===maxCoord && cubeZ===minCoord) {moveString=\"01B 01D 01B' 01D'\";}\n        else if(cubeX===minCoord && cubeY===maxCoord && cubeZ===minCoord) {moveString=\"01R' 01B 01R\";}\n      }\n\n\n    }\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(solvedCorners < 4){\n        return {moveSet : moveArray};\n    }\n    else{\n      if(dim === 2){\n        return {solveState : 6};\n      }\n      else{\n        return {solveState : 3};\n      }\n    }\n  }\n\n  module.exports = solveWhiteCorners;","function inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = edgeSegments*2; i < edgeSegments*3;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction solveMiddleEdges(rubiksObject,moveStringToArray,edges,dim){\n  let moveString = \"\";\n  let cube = rubiksObject;\n  let space = \"\";\n  let solvedEdges = 0;\n  let moveFromMiddle012 = \"01B 01U 01B' 01U' 01B' 01L' 01B 01L\";\n  let moveFromMiddle212 = \"01B 01R 01B' 01R' 01B' 01U' 01B 01U\";\n  let moveFromMiddle210 = \"01B 01D 01B' 01D' 01B' 01R' 01B 01R\";\n  let moveFromMiddle010 = \"01B 01L 01B' 01L' 01B' 01D' 01B 01D\";\n\n  let minCoord = 0;\n  let maxCoord = dim-1;\n\n  let fourEdgeSections = sectionSpliter(edges);\n\n  let edgeOne = fourEdgeSections[0][0];\n  let edgeTwo = fourEdgeSections[1][0];\n  let edgeThree = fourEdgeSections[3][0];\n  let edgeFour = fourEdgeSections[2][0];\n\n\n  // console.log(\"\\n\\n\",fourEdgeSections);\n  for(let i = 0; i < cube.length; i++){\n    if(moveString.length) space = \" \";\n    //if(cube[i].includes(\"green\") || cube[i].includes(\"blue\")){\n      let emptyCount = 0;\n      let blueSide = -1;\n      let greenSide = -1;\n      let cubeX = cube[i][6];\n      let cubeY = cube[i][7];\n      let cubeZ = cube[i][8];\n\n      for(let j = 0; j < 6; j++){\n        if (cube[i][j] === \"black\") emptyCount++;\n        else {\n          if(cube[i][j] === \"blue\") blueSide = j;\n          else if(cube[i][j] === \"green\") greenSide = j;\n        }\n      }\n\n      // //if(emptyCount === 4){\n      //   console.log(\"Cube:\",cube[i]);\n      //   console.log(\"i:\",i);\n      //   console.log(\"Solved Edges:\",solvedEdges);\n        if(i===edgeOne && solvedEdges === 0){\n          //Front\n          if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord)\n            blueSide === 1 ? solvedEdges++ : moveString+= space + moveFromMiddle012;\n          \n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord) moveString+= space + moveFromMiddle212;\n          else if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle010;\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) {\n            blueSide === 3 ? moveString+= space + moveFromMiddle012 : moveString+= space + \"01B2 01L' 01B' 01L 01B 01U 01B 01U'\";\n          }\n          else if(inMiddle(cubeX,maxCoord,minCoord)&& cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B\";\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B2\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B'\";\n        }\n        if(i===edgeTwo && solvedEdges === 1){\n          //Front\n          if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === maxCoord){\n            blueSide === 1 ? solvedEdges++ : moveString+= space + moveFromMiddle212;\n          }\n          else if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle010;\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) {\n            blueSide === 1 ? moveString+= space + moveFromMiddle212 : moveString+= space + \"01B2 01U' 01B' 01U 01B 01R 01B 01R'\";\n          }\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B2\";\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B'\";\n        }\n        if(i===edgeThree && solvedEdges === 2){\n          //Front\n          if(cubeX === minCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord){\n            greenSide === 5 ? solvedEdges++ : moveString+= space + moveFromMiddle010;\n          }\n          else if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord) moveString+= space + moveFromMiddle210;\n          //Back\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord){\n            greenSide === 5 ? moveString+= space + moveFromMiddle010 : moveString+= space + \"01B2 01D' 01B' 01D 01B 01L 01B 01L'\";\n          }\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B2\";\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B'\";\n        }\n        if(i===edgeFour && solvedEdges === 3){\n          //Front\n          if(cubeX === maxCoord && inMiddle(cubeY,maxCoord,minCoord) && cubeZ === minCoord){\n            greenSide === 5 ? solvedEdges++ : moveString+= space + moveFromMiddle210;\n          }\n          //Back\n          else if(cubeX === maxCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)){\n            greenSide === 3 ? moveString+= space + moveFromMiddle210 : moveString+= space + \"01B2 01R' 01B' 01R 01B 01D 01B 01D'\";\n          }\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === minCoord) moveString+= space + \"01B\";\n          else if(cubeX === minCoord && cubeY === maxCoord && inMiddle(cubeZ,maxCoord,minCoord)) moveString+= space + \"01B2\";\n          else if(inMiddle(cubeX,maxCoord,minCoord) && cubeY === maxCoord && cubeZ === maxCoord) moveString+= space + \"01B'\"; \n        }\n      //}\n    //}\n  }\n\n  const moveArray = moveStringToArray(moveString);\n\n  if(solvedEdges < 4 ) return {moveSet : moveArray};\n  else return {solveState : 4};\n}\n\nmodule.exports = solveMiddleEdges;","function sectionSpliter(edges){\n  let splitEdges = [];\n  let edgeSegments = edges.length/3;\n  const edgeSections = 4;\n  let segmentsPerSection = edgeSegments/edgeSections;\n\n  let temp = [];\n  for(let i = edgeSegments; i < edgeSegments*2;i++){\n    temp.push(edges[i]);\n    if(temp.length===segmentsPerSection){\n      splitEdges.push(temp);\n      temp=[];\n    }\n  }\n\n  return splitEdges;\n}\n\nfunction inMiddle(coord,maxCoord,minCoord){\n  return coord>minCoord&&coord<maxCoord;\n}\n\nfunction solveYellowCross(rubiksObject,moveStringToArray,edges,dim){\n\n    if(dim === 2) {return {solveState : 5};}\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let recipe = \"01U 01R 01B 01R' 01B' 01U'\";\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let fourEdgeSections = sectionSpliter(edges);\n    //console.log(edges);\n    let cubeIndex = [fourEdgeSections[0][0],fourEdgeSections[3][0],fourEdgeSections[1][0],fourEdgeSections[2][0]];\n    //console.log(cubeIndex);\n    let cubeAtIndex = [];\n\n    for(let i = 0; i < 4; i++){\n      if(inMiddle(cube[cubeIndex[i]][6],maxCoord,minCoord) && \n         cube[cubeIndex[i]][7] === maxCoord &&\n         cube[cubeIndex[i]][8] === maxCoord) cubeAtIndex[0] = cube[cubeIndex[i]][3];\n      else if (cube[cubeIndex[i]][6] === minCoord && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        inMiddle(cube[cubeIndex[i]][8],maxCoord,minCoord)) cubeAtIndex[1] = cube[cubeIndex[i]][3];\n      else if (cube[cubeIndex[i]][6] === maxCoord && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        inMiddle(cube[cubeIndex[i]][8],maxCoord,minCoord)) cubeAtIndex[2] = cube[cubeIndex[i]][3];\n      else if (inMiddle(cube[cubeIndex[i]][6],maxCoord,minCoord) && \n        cube[cubeIndex[i]][7] === maxCoord &&\n        cube[cubeIndex[i]][8] === minCoord) cubeAtIndex[3] = cube[cubeIndex[i]][3];\n    }\n\n    let skip = false;\n\n    if(dim===4){\n      let counter = 0;\n      for(let i = 0; i < 4; i++){\n        if(cube[cubeIndex[i]][3] === \"yellow\") counter++;\n      }\n      if(counter%2){\n        //console.log(\"fix implemented\");\n        skip=true;\n        moveString=\"02r 01B2 02r' 01B2 02r 01B2 02r 01B2 02l' 01B2 02r 01B2 02r' 01B2 01D2 02r2 01D2 04r'\";\n      };\n    }\n\n    if(!skip){\n      if(cube[cubeIndex[0]][3] === \"yellow\" &&\n        cube[cubeIndex[1]][3] === \"yellow\" &&\n        cube[cubeIndex[2]][3] === \"yellow\" &&\n        cube[cubeIndex[3]][3] === \"yellow\" \n        ); \n\n      //Line\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[3] === \"yellow\" ) {moveString = \"01B \" + recipe; }\n      else if (cubeAtIndex[1] === \"yellow\" && cubeAtIndex[2] === \"yellow\" ) {moveString = recipe;}\n\n      //L-Shape\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[2] === \"yellow\" ) {moveString = \"01B2 \" + recipe + \" \" + recipe;}\n      else if (cubeAtIndex[1] === \"yellow\" && cubeAtIndex[3] === \"yellow\" ) {moveString = recipe + \" \" + recipe;}\n      else if (cubeAtIndex[0] === \"yellow\" && cubeAtIndex[1] === \"yellow\" ) {moveString = \"01B \" + recipe + \" \" + recipe;}\n      else if (cubeAtIndex[2] === \"yellow\" && cubeAtIndex[3] ) {moveString = \"01B' \" + recipe + \" \" + recipe;}\n\n      else {moveString = recipe;}\n    }\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray}; \n    else return {solveState:5};\n  }\n\n  module.exports = solveYellowCross;","function sectionSpliter(edges){\n    let splitEdges = [];\n    let edgeSegments = edges.length/3;\n    const edgeSections = 4;\n    let segmentsPerSection = edgeSegments/edgeSections;\n  \n    let temp = [];\n    for(let i = edgeSegments; i < edgeSegments*2;i++){\n      temp.push(edges[i]);\n      if(temp.length===segmentsPerSection){\n        splitEdges.push(temp);\n        temp=[];\n      }\n    }\n  \n    return splitEdges;\n}\n\nfunction inMiddle(coord,maxCoord,minCoord){\n    return coord>minCoord&&coord<maxCoord;\n}\n\nfunction alignYellowCross(rubiksObject,moveStringToArray,edges,dim){\n\n    if(dim === 2) {return {solveState : 6};}\n\n    let moveString = \"\";\n    let cube = rubiksObject;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let fourEdgeSections = sectionSpliter(edges);\n    let cubeIndex = [fourEdgeSections[0][0],fourEdgeSections[3][0],fourEdgeSections[1][0],fourEdgeSections[2][0]];\n\n    if(inMiddle(cube[cubeIndex[0]][6],maxCoord,minCoord) && cube[cubeIndex[0]][7] === maxCoord && cube[cubeIndex[0]][8] === maxCoord){\n        //Check if other pieces are in place\n        if(cube[cubeIndex[1]][6] === minCoord && inMiddle(cube[cubeIndex[1]][8],maxCoord,minCoord)&&\n            cube[cubeIndex[2]][6] === maxCoord && inMiddle(cube[cubeIndex[2]][8],maxCoord,minCoord));\n\n        else if(cube[cubeIndex[1]][6] === maxCoord && inMiddle(cube[cubeIndex[2]][8],maxCoord,minCoord) &&\n        inMiddle(cube[cubeIndex[3]][6],maxCoord,minCoord) && cube[cubeIndex[3]][8] === minCoord) moveString = \"01D 01B 01D' 01B 01D 01B2 01D' 01B2 01L 01B 01L' 01B 01L 01B2 01L' 01B\";\n\n        else if(cube[cubeIndex[3]][6] === maxCoord && inMiddle(cube[cubeIndex[3]][8],maxCoord,minCoord)) moveString = \"01R 01B 01R' 01B 01R 01B2 01R' 01B\";\n\n        else if(cube[cubeIndex[3]][6] === minCoord && inMiddle(cube[cubeIndex[3]][8],maxCoord,minCoord)) moveString = \"01R 01B 01R' 01B 01R 01B2 01R' 01B\";\n\n\n        //Make moves\n    }\n    else if(cube[cubeIndex[0]][6] === maxCoord && cube[cubeIndex[0]][7] === maxCoord && inMiddle(cube[cubeIndex[0]][8],maxCoord,minCoord)){\n        moveString = \"01B\";\n    }\n    else moveString = \"01B'\"\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray};\n    else return{solveState:6};\n}\n\nmodule.exports = alignYellowCross;","function solveYellowCorners(rubiksObject,cubeDimension,moveStringToArray,solveMoves,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n    let solveAlgo = \"01U' 01F' 01U 01F 01U' 01F' 01U 01F\";\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[4];\n    let pieceTwo = corners[5];\n    let pieceThree = corners[6];\n    let pieceFour = corners[7];\n\n    let moveArray;\n\n    if(cube[pieceOne][3] === \"yellow\" &&\n       cube[pieceTwo][3] === \"yellow\" &&\n       cube[pieceThree][3] === \"yellow\" &&\n       cube[pieceFour][3] === \"yellow\"){\n      if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord);\n      else moveString = \"01B\";\n    }\n\n    else if(cube[pieceOne][3]!== \"yellow\"){\n      //console.log(cube[pieceOne]);\n      moveString = solveAlgo;\n    }\n\n    else if(cube[pieceTwo][3]!== \"yellow\"){\n      if(cube[pieceTwo][6] === minCoord && cube[pieceTwo][8] === maxCoord) {\n        //console.log(cube[pieceTwo]);\n        moveString = solveAlgo;\n      }\n      else {\n        moveString = \"01B\";\n      }\n    }\n    else if(cube[pieceFour][3]!== \"yellow\"){\n      if(cube[pieceFour][6] === minCoord && cube[pieceFour][8] === maxCoord) {\n        //console.log(cube[pieceFour]);\n        moveString = solveAlgo;\n      }\n      else{\n        moveString = \"01B\";\n      }\n    }\n    else if(cube[pieceThree][3]!== \"yellow\"){\n      if(cube[pieceThree][6] === minCoord && cube[pieceThree][8] === maxCoord) {\n        //console.log(cube[pieceThree]);\n        moveString = solveAlgo;\n      }\n      else {\n        moveString = \"01B\";\n      }\n    }\n\n    moveArray = moveStringToArray(moveString);\n\n    if(moveString.length){\n      return {moveSet:moveArray};\n    }\n    else{\n      //check for anomoly\n      if(dim === 2) {\n\n        if(cube[pieceOne][6]===minCoord && cube[pieceOne][8]===maxCoord) {\n          if(cube[pieceTwo][6]===maxCoord && cube[pieceTwo][8]===maxCoord){\n            if(cube[pieceThree][6]===minCoord && cube[pieceThree][8]===minCoord){\n              let obj = {moveLog : \"\",currentFunc: \"None\",moveSet:[],solveState:-1};\n              if(solveMoves.length){\n                obj.solveMoves = \"\";\n                return obj;\n              }\n              return obj;\n            }\n            else {\n              moveString = \"01R 01D' 01R' 01F' 01R' 01F 01D\";\n              moveArray = moveStringToArray(moveString);\n              return {moveSet:moveArray};\n            }\n          }\n        }\n        else {\n          moveString = \"01B\";\n          moveArray = moveStringToArray(moveString);\n          return {moveSet:moveArray};\n        }\n      }\n      else {\n        let obj = {moveLog : \"\",currentFunc: \"None\",moveSet:[],solveState:-1};\n        if(solveMoves.length){\n          obj.solveMoves = \"\";\n          return obj;\n        }\n        \n        return obj;\n      }\n    }\n  }\n  module.exports = solveYellowCorners;\n","function alignYellowCorners(rubiksObject,cubeDimension,moveStringToArray,corners){\n    let moveString = \"\";\n    let cube = rubiksObject;\n\n    let dim = cubeDimension;\n\n    let maxCoord = dim-1;\n    let minCoord = 0;\n\n    let pieceOne = corners[4];\n    let pieceTwo = corners[5];\n    let pieceThree = corners[6];\n    let pieceFour = corners[7];\n\n    let solveCount = 0;\n\n    \n    if(cube[pieceOne][6]===cube[pieceOne][9] && cube[pieceOne][7]===cube[pieceOne][10] && cube[pieceOne][8]===cube[pieceOne][11]) solveCount++;\n    if(cube[pieceTwo][6]===cube[pieceTwo][9] && cube[pieceTwo][7]===cube[pieceTwo][10] && cube[pieceTwo][8]===cube[pieceTwo][11]) solveCount++;\n    if(cube[pieceThree][6]===cube[pieceThree][9] && cube[pieceThree][7]===cube[pieceThree][10] && cube[pieceThree][8]===cube[pieceThree][11]) solveCount++;\n    if(cube[pieceFour][6]===cube[pieceFour][9] && cube[pieceFour][7]===cube[pieceFour][10] && cube[pieceFour][8]===cube[pieceFour][11]) solveCount++;\n    \n\n    if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord &&\n       cube[pieceTwo][6] === maxCoord && cube[pieceTwo][8] === maxCoord);\n\n   else if(solveCount === 2 && dim > 3) {\n      //console.log(\"another parity encountered brother\");\n      moveString = \"02D2 01B2 02D2 02b2 02D2 02b2\";\n      const moveArray = moveStringToArray(moveString);\n      if(moveString.length) return {moveSet : moveArray,solveState:5};\n   }\n\n    else if(cube[pieceOne][6] === minCoord && cube[pieceOne][8] === maxCoord) moveString = \"01B 01U 01B' 01D' 01B 01U' 01B' 01D\";\n    else if(cube[pieceTwo][6] === maxCoord && cube[pieceTwo][8] === maxCoord) moveString = \"01B 01R 01B' 01L' 01B 01R' 01B' 01L\";\n    else if(cube[pieceThree][6] === minCoord && cube[pieceThree][8] === minCoord) moveString = \"01B 01L 01B' 01R' 01B 01L' 01B' 01R\";\n    else if(cube[pieceFour][6] === maxCoord && cube[pieceFour][8] === minCoord) moveString = \"01B 01D 01B' 01U' 01B 01D' 01B' 01U\";\n\n    else moveString = \"01B 01U 01B' 01D' 01B 01U' 01B' 01D\";\n\n    const moveArray = moveStringToArray(moveString);\n\n    if(moveString.length) return {moveSet : moveArray};\n    else return {solveState:7};\n  }\n\n  module.exports = alignYellowCorners;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      white.js\n *      Started: Friday, December 13, 2019\n *      Finished: Saturday, December 14, 2019\n *      Note: Redo this function so it works similarly to other solvers (no row or columns)\n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveWhiteMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    let row = Math.floor(index/(dim-2));\n    let column = index%(dim-2);\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n    if(solved.x===1){\n        if(dim-solved.z === 2){\n            if(currentSide===\"F\"){\n                moveString=\"01F\";\n            }\n            else if(currentSide!==\"D\"&&currentSide!==\"U\"){\n                if(current.z!==dim-2){\n                    moveString= \"01\" + currentSide;\n                }\n                else{\n                    moveString= move(\"\",dim-current.z,\"U\");\n                }\n            }\n            else {\n                if(current.x!==solved.x){\n                    moveString = \"01\" + currentSide;\n                }\n                else{\n                    moveString = \"02L\";\n                }\n            }\n        }\n        else{\n            if(currentSide===\"F\"){\n                moveString = move(\"\",current.z+1,\"D'\");\n            }\n            else if(currentSide===\"B\"){\n                if(current.z<=solved.z){\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n                else moveString = \"01B\";\n            }\n            else if(currentSide===\"L\"){\n                if(current.y!==dim-2){\n                    moveString= \"01L\";\n                }\n                else if(current.z!==solved.z){\n                    moveString= \"01L\";\n                }\n                else {\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n            }\n            else moveString = move(\"\",current.y+1,\"F'\");\n        }\n    }\n    else{\n        if(row===0){\n            if(currentSide===\"F\"){\n                if(current.z < solved.z && current.x >=solved.x){\n                    moveString = move(\"\",dim-current.x,\"R\");\n                }\n                else{\n                    moveString = move(\"\",current.z+1,\"D\");\n                }\n            }\n            else if(currentSide===\"B\"){\n                if(current.x === solved.x && current.z!== solved.z){\n                    moveString = move(\"\",column+2,\"L2\");\n                }\n                else {\n                    moveString = \"01B\"\n                };\n            }\n            else{\n                if(current.y===dim-2){\n                    if(current.z !== dim-1){\n                        moveString = move(\"\",row+2,\"B\")\n                    }\n                    else{\n                        if(current.x !== solved.x){\n                            moveString = \"01U\";\n                        }\n                        else {\n                            moveString = move(\"\",column+2,\"L\");\n                        };\n                    }\n                }\n                else{\n                    moveString = \"01\" + currentSide;\n                }\n            }\n        }\n        else{\n            if(currentSide===\"F\"){\n                if(current.z<solved.z){\n                    moveString = move(\"\",dim-current.z,\"U\");\n                }\n                else {\n                    moveString = move(\"\",dim-current.z,\"U\");\n                    moveString += move(\" \",dim-current.x,\"F'\");\n                    moveString += move(\" \",dim-current.z,\"U'\");\n                }\n                \n            }\n            else if(currentSide===\"B\"){\n                if(current.z===solved.z){\n                    if(solved.x===current.x){\n                        moveString = move(\"\",dim-current.z,\"U\");\n                        moveString += move(\" \",current.x+1,\"B\");\n                        moveString += move(\" \",dim-current.z,\"U'\");\n                    }\n                    else {\n                        moveString = move(\"\",dim-current.z,\"U\");\n                        moveString += \" 01R\";\n                        moveString += move(\" \",dim-current.z,\"U'\");\n                    }\n                }\n                else moveString = \"01B\";\n            }\n            else{\n                if(currentSide!==\"U\"){\n                    //console.log(\"Moving to top\")\n                    moveString += move(\" \",current.y+1,\"F\");\n                }\n                else{\n                    if(current.x!==solved.x || current.y!==solved.z){\n                        moveString = \"01U\";\n                    }\n                    else{\n                        moveString = \"01U'\";\n                        moveString += move(\" \",dim-solved.z,\"U'\");\n                        moveString += move(\" \",current.x+1,\"F\");\n                        moveString += move(\" \",dim-solved.z,\"U\");\n                    }\n                }\n            }\n        }\n    }\n    return moveString;\n}\n\nmodule.exports = solveWhiteMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      yellow.js\n *      Started: Saturday, December 14, 2019\n *      Finished: Saturday, December 21, 2019\n *  \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveYellowMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    let middle = Math.floor(dim/2);\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n    \n    let opposite = \"01L'\";\n    if(currentSide===\"B\"){\n        moveString += move(\" \",current.z+1,\"D'\");\n\n        if(current.z!==solved.z){\n            if(current.z === middle){\n                moveString += \" 01R1\";\n            }\n            else moveString += \" 01R2\";\n        }\n\n        else {\n            if(current.x===current.z){\n                moveString += \" 01L'\";\n                opposite = \"01L\";\n            }\n            else if(((current.x>= middle &&current.z>=middle))  ||\n                (current.x< middle &&current.z<middle) ||\n                (current.x> middle &&current.z<middle))\n                moveString += \" 01L\";\n            else{\n                moveString += \" 01L'\";\n                opposite = \"01L\";\n            }\n\n            moveString += move(\" \",dim-current.x,\"F\");\n            moveString += \" \" + opposite;\n            \n        }\n        moveString += move(\" \",current.z+1,\"D\");\n    }\n    else{\n        if(currentSide!==\"R\"){\n            moveString= move(\"\",current.y+1,\"F\");\n        }\n        else {\n            if(current.y!==dim-(solved.x+1)||current.z!==solved.z){\n                moveString = \"01R\";\n            }\n            else {\n                moveString = move(\"\",current.y+1,\"F'\");\n                moveString += move(\" \",current.z+1,\"D'\");\n                if((current.y>= middle&&current.z>=middle) ||\n                   (current.y< middle&&current.z<middle))\n                    moveString += \" 01L\"\n                else\n                    moveString += \" 01L'\"\n\n                moveString += move(\" \",current.y+1,\"F\");\n                \n                if((current.y>= middle&&current.z>=middle) ||\n                   (current.y< middle&&current.z<middle))\n                    moveString += \" 01L'\"\n                else\n                    moveString += \" 01L\"\n\n                moveString += move(\" \",current.z+1,\"D\");\n            }\n        }\n    }\n\n    return moveString\n}\n\nmodule.exports = solveYellowMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      blue.js\n *      Started: Saturday, December 14, 2019\n *      Finished: Friday, February 7, 2020\n * \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveBlueMiddle = (current,solved,dim) => {\n\n    let currentSide = \"F\";\n    let middle = Math.floor(dim/2);\n    let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    \n    //console.log(`Currently on side: ${currentSide}`);\n    //console.log(`Current position: ${JSON.stringify(current)}`);\n    //console.log(`Solved position: ${JSON.stringify(solved)}`);\n\n    if(currentSide===\"U\"){\n\n        moveString = move(\"\",current.y+1,\"F\");//1\n        moveString += move(\" \",current.x+1,\"U2\");//2\n\n        if( isOddCube && current.y===middle) moveString+= \" 01L'\";//2.1\n\n        moveString += move(\" \",current.y+1,\"F'\");//3\n\n        if( isOddCube && current.y===middle) moveString+= \" 01L\";//3.1\n\n        moveString += move(\" \",current.x+1,\"U2\");//4\n    }\n\n    else if(currentSide===\"R\"){\n        \n        if((dim-current.z)===(solved.x+1) && current.y===solved.y){\n\n            moveString = move(\"\",solved.x+1,\"U2\");//6\n\n            if(isOddCube && solved.y===middle) moveString += \" 01L'\";//6.1\n\n            moveString += move(\" \",solved.y+1,\"F\");//7\n\n            if(isOddCube && solved.y===middle) moveString += \" 01L\";//7.1\n\n            moveString += move(\" \",solved.x+1,\"U2\");//8\n            moveString += move(\" \",solved.y+1,\"F'\");//9\n            \n        } else {\n\n            moveString = \"01R'\"//5\n            \n        }\n    }\n\n    else if(currentSide===\"L\"){\n        //console.log(\"solve from left side to top side\");\n\n        if(current.z===solved.x && current.y===solved.y){\n            //console.log(\"in place for step 6-9\");\n\n            moveString = move(\"\",current.z+1,\"D2\");//6\n            if(isOddCube && solved.y===middle) moveString += \" 01R\";//6.1\n            moveString += move(\" \",solved.y+1,\"F'\");//7\n            if(isOddCube && solved.y===middle) moveString += \" 01R'\";//7.1\n            moveString += move(\" \",current.z+1,\"D2\");//8\n            moveString += move(\" \",solved.y+1,\"F\");//9\n            \n        } else {\n            //console.log(\"rotating left side\");\n\n            moveString = \"01L\"//5\n        }\n    }\n\n    else {\n        //console.log(\"move from back side to right side\");\n\n        if(current.y!==solved.y){\n            moveString = \"01D\";\n        }\n        else{\n            moveString = move(\"\",solved.y+1,\"F'\");\n            moveString += \" 01R\";\n            moveString += move(\" \",solved.y+1,\"F\");\n        }\n    }\n\n    return moveString;\n}\n\nmodule.exports = solveBlueMiddle;","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      green.js\n *      Started: Saturday February 8, 2020\n *      Finished:Saturday February 8, 2020\n *      \n */\n\nfunction move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveGreenMiddle = (current,solved,dim,index) => {\n\n    let currentSide = \"F\";\n    // let middle = Math.floor(dim/2);\n    // let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n\n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n    \n\n    // Temp 4x4 solver\n    if(dim===4){\n        if(currentSide === \"D\"){\n            if(index===16){\n                if(solved.x===current.x&&solved.y===current.y);\n                else moveString = \"01D\"\n            }\n\n            else if(index===17){\n                //console.log(\"on side D\")\n                if(solved.x===current.x&&solved.y===current.y);\n                else {\n                    moveString = move(\"\",current.y+1,\"F'\");\n                    moveString += \" 01R2\"\n                    moveString += move(\" \",current.y+1,\"F\");\n                }\n            }\n            else if(index===18){\n                // console.log(\"DID THIS SOLVE IT\")\n                moveString = move(\"\",dim-1,\"F'\");\n                moveString += \" 01R'\"\n                moveString += move(\" \",dim-1,\"F\");\n            }\n        }\n\n        if(currentSide === \"R\"){\n            if(index===16){\n                moveString = move(\"\",current.y+1,\"F\");\n                moveString += \" 01D2\"\n                moveString += move(\" \",current.y+1,\"F'\");\n            }\n\n            else if(index===17){\n                // console.log(\"solved from red to green\");\n                // console.log(current);\n                if(current.y===2 && current.z===2){\n                    // console.log(\"solve it\");\n                    moveString = \"01D\";\n                    moveString += move(\" \", dim-1, \"F\");\n                    moveString += \" 01D'\";\n                    moveString += move(\" \", dim-1, \"F'\");\n                    \n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n            \n            else if(index===18){\n                if(current.y===2 && current.z===1){\n                    // console.log(\"solve it\");\n                    moveString = \"01R\";\n                    moveString += move(\" \",dim-1,\"F'\");\n                    moveString += \" 01R'\";\n                    moveString += move(\" \",dim-1,\"F\");\n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n            else if(index===19){\n                // console.log(\"calculating move\");\n                if(current.y===1 && current.z===2){\n                    moveString=\"03F'\";\n                    moveString+=\" 01R'\";\n                    moveString+=\" 03F\";\n                    moveString+=\" 01R\";\n                    moveString+=\" 03F'\";\n                    moveString+=\" 01R\";\n                    moveString+=\" 03F\";\n                }\n                else{\n                    moveString = \"01R\"\n                }\n            }\n        }\n    }\n\n    // ORIGINAL SIDE 4 code.\n    // Leaves opposite sides as last 2 faces, code left incase revisited\n\n    // if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R'\";\n    //         else moveString += \" 01R\";\n    //     }\n\n    //     moveString += move(\" \",current.x+1,\"U2\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R1\";\n    //         else moveString += \" 01R\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n\n    //     moveString += move(\" \",current.y+1,\"F'\");\n    //     moveString += move(\" \",current.x+1,\"U2\");\n    // }\n\n    // else if (currentSide===\"R\"){\n    //     if(current.y===solved.y&&current.z===solved.x){\n    //         moveString = move(\"\",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a'\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01R'\"\n    // }\n\n    // else if (currentSide===\"L\"){\n    //     if(current.y===solved.y&&current.z===(dim-(solved.x+1))){\n    //         moveString = move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a'\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01L\"\n    // }\n\n    return moveString;\n}\n\nmodule.exports = solveGreenMiddle;\n\n","/*\n *\n *\n *      ******* Add documentation before you forget how all this works!!! ********\n * \n * \n *      Sasha Peters\n *      red.js\n *      Started: \n * \n *    \n */\n\nfunction move(space,depth,side){\n    return (space + (depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveOrangeMiddle = (current,solved,dim) => {\n\n    let currentSide = \"F\";\n    // let middle = Math.floor(dim/2);\n    // let isOddCube = dim%2;\n    let moveString = \"\";\n\n    if(current.x === 0) currentSide = \"L\";\n    else if(current.x === dim-1) currentSide = \"R\";\n    else if(current.y === dim-1) currentSide = \"B\";\n    else if(current.z === 0) currentSide = \"D\";\n    else if(current.z === dim-1) currentSide = \"U\";\n    \n    // console.log(`Currently on side: ${currentSide}`);\n    // console.log(`Current position: ${JSON.stringify(current)}`);\n    // console.log(`Solved position: ${JSON.stringify(solved)}`);\n\n    if(dim===4){\n        //console.log(\"4x4 orange middle solver here\");\n        switch(currentSide){\n            case 'L':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=\"01L\";\n                }\n                else if(solved.x === 0 && solved.y === 1 && solved.z === 1){\n                    moveString+=move(\"\",current.y+1,\"F'\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F\");\n                }\n                else if(solved.x === 0 && solved.y === 2 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F'\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F\");\n                }\n                break;\n            case 'D':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F\");\n                    moveString+=\" 01L2\";\n                    moveString+=move(\" \",current.y+1,\"F'\");\n                }\n                else if(solved.x === 0 && solved.y === 1 && solved.z === 1){\n                    if(current.x===2 && current.y===2){\n                        moveString=\"01L\"\n                        moveString+=\" 02F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 02F\";\n                    }\n                    else{\n                        moveString+=\"01D\";\n                    }\n                }\n                else if(solved.x === 0 && solved.y === 2 && solved.z === 2){\n                    if(current.y===1 && current.x===1){\n                        moveString+=\"03F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 03F\";\n                    }\n                    else{\n                        moveString=\"01D\";\n                    }\n                }\n                else {\n                    if(current.y===1 && current.x===2){\n                        moveString+=\"03F'\";\n                        moveString+=\" 01D'\";\n                        moveString+=\" 03F\";\n                        moveString+=\" 01D\";\n                        moveString+=\" 03F'\";\n                        moveString+=\" 01D\";\n                        moveString+=\" 03F\";\n                    }\n                    else{\n                        moveString=\"01D\";\n                    }\n                }\n                break;\n            case 'R':\n                if(solved.x === 0 && solved.y === 1 && solved.z === 2){\n                    moveString+=move(\"\",current.y+1,\"F2\");\n                    moveString+=\" 01L2\";\n                    moveString+=move(\" \",current.y+1,\"F2\");\n                }\n                else {\n                    moveString+=move(\"\",current.y+1,\"F\");\n                    moveString+=\" 01D2\";\n                    moveString+=move(\" \",current.y+1,\"F'\");\n                }\n                break;\n            default:\n                console.log(\"Something broke\");\n        }\n    }\n    else if(dim===5){\n        //console.log(\"5x5 orange middle solver here\");\n    }\n    else {\n        //console.log(\"6x6 and greater orange middle solver here\");\n    }\n\n    // if((current.x===0 && current.y===middle && current.z===middle && isOddCube)|| \n    //     (current.x===solved.x && current.y===solved.y && current.z===solved.z)){\n    //     return moveString;\n    // }\n    // else if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R'\";\n    //         else moveString += \" 01R\";\n    //     }\n\n    //     moveString += move(\" \",current.x+1,\"U2\");\n\n    //     if(dim-(current.x+1)<middle) {\n    //         if(current.y<middle) moveString += \" 01R1\";\n    //         else moveString += \" 01R\";\n    //     }\n    //     else {\n    //         if(current.y<middle) moveString += \" 01R\";\n    //         else moveString += \" 01R'\";\n    //     }\n\n    //     moveString += move(\" \",current.y+1,\"F'\");\n    //     moveString += move(\" \",current.x+1,\"U2\");\n    // }\n\n    // else if (currentSide===\"R\"){\n    //     if(current.y===solved.y&&current.z===solved.x){\n    //         moveString = move(\"\",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L'\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01L\";  //a'\n    //         else moveString += \" 01L2\";\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01R'\"\n    // }\n\n    // else if (currentSide===\"L\"){\n    //     if(current.y===solved.y&&current.z===(dim-(solved.x+1))){\n    //         moveString = move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R\"; //a1\n\n    //         moveString += move(\" \",current.z+1,\"D2\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a1'\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle&&isOddCube) moveString += \" 01R'\";  //a'\n    //         else moveString += \" 01R2\";\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //         moveString += move(\" \",current.z+1,\"D2\");\n    //     }\n    //     else moveString = \"01L\"\n    // }\n\n// ############################################################\n\n    // if(currentSide===\"L\"){\n    //     if(solved.y===current.y){\n    //         moveString = move(\"\",current.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D' \";\n    //         } else { moveString += \" 01D2 \"; }\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n                \n    //         } else {\n    //             moveString += \" 01D \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n    //         moveString += \" 01R2\";\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n                \n    //         } else {\n    //             moveString += \" 01D' \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D \";\n    //         } else {\n    //             moveString += \" 01D2 \";\n    //         }\n\n    //         moveString += move(\" \",current.y+1,\"F\");\n\n    //     }\n    //     else{\n    //         moveString = move(\"\",current.y+1,\"F'\");\n    //         moveString += \" 01D\";\n    //         moveString += move(\" \",current.y+1,\"F\");\n    //     }\n\n    // }\n    // if(currentSide===\"R\"){\n    //     // this solver is hard. console.log the moves but return an empty string so you can see the move it's trying\n    //     if(current.y===solved.y && solved.z === dim-(current.z+1)){\n    //         moveString = move(\"\",solved.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D\";\n    //         } else { moveString += \" 01D2\"; }\n\n    //         moveString += move(\" \",solved.y+1,\"F\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D'\";\n    //         } else { moveString += \" 01D2\"; }\n\n    //         moveString += \" 01R\"\n    //         moveString += \" 01D\"\n\n    //         moveString += move(\" \",current.z+1,\"F\");\n\n    //         if(current.y>middle){\n    //             moveString += \" 01D\";\n    //         } else {moveString += \" 01D'\";}\n\n    //         moveString += move(\" \",current.z+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //         } else {moveString += \" 01D\";}\n\n    //         moveString += move(\" \",solved.y+1,\"F'\");\n\n    //         if(solved.y===middle && isOddCube){\n    //             moveString += \" 01D'\";\n    //         } else {moveString += \" 01D2\";}\n\n    //         moveString += move(\" \",solved.y+1,\"F\");\n\n    //         console.log(\"Test moves: \",moveString);\n    //         moveString = \"\";\n    //         // piece should be in place on displaced solved row on D (column d)\n    //         //               d\n    //         // D = [ 0 0 0 0 0 0 0 ]\n    //         //     [ 0 n n n P n 0 ]\n    //         //   x [ 0 n n n U n 0 ]\n    //         //     [ 0 n n X U n 0 ]\n    //         //     [ 0 n n n U n 0 ]\n    //         //     [ 0 n n n U n 0 ]\n    //         //     [ 0 0 0 0 0 0 0 ]\n\n    //         // Idea : find way to figure out what d and x will be, will make next 3 steps easier\n    //         // \n    //         // \n\n    //         // Rotate D to avoid misplacements when putting blue back in place (row x)\n\n    //         // Rotate D to move out of blue path onto L\n\n    //         // Rotate D into path so solved row gets replaced when blue gets moved from L to U\n            \n\n    //     }\n    //     else {\n    //         moveString = \"01R\"\n    //     }\n    // }\n    // if(currentSide===\"D\"){\n    //     moveString = move(\"\",current.y+1,\"F'\");\n\n    //     if(isOddCube && current.y===middle){\n    //         moveString += \" 01R'\";\n    //     } else {moveString += \" 01R2\";}\n\n    //     moveString += move(\" \",current.y+1,\"F\");\n    // }\n\n\n\n\n    return moveString;\n\n}\n\nmodule.exports = solveOrangeMiddle;","function move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nfunction extractFromFront(current,maxCoord,minCoord){\n    if(current.z===maxCoord){\n        return `${move(\"\",current.x+1,\"L'\")} 01B' 01R 01B ${move(\"\",current.x+1,\"L\")} 01R'`\n    }\n    else if(current.x===maxCoord){\n        return `${move(\"\",current.z+1,\"D\")} 01B' 01D 01B ${move(\"\",current.z+1,\"D'\")} 01D'`\n    }\n    else if(current.z===minCoord){\n        return `${move(\"\",current.x+1,\"L\")} 01B' 01L 01B ${move(\"\",current.x+1,\"L'\")} 01L'`\n    }\n    else if(current.x===minCoord){\n        return `${move(\"\",current.z+1,\"D'\")} 01B' 01U 01B ${move(\"\",current.z+1,\"D\")} 01U'`\n    }\n}\n\nfunction moveFromMiddleToBack(current,maxCoord,minCoord,whiteSide){\n    if(current.x===maxCoord && current.z===maxCoord){// Top Right\n        if(whiteSide===1){\n            return `01U' 01B 01U`\n        }\n        else{\n            return `01R 01B 01R'`\n        }\n    }\n    if(current.x===minCoord && current.z===maxCoord){// Top Left\n        if(whiteSide===1){\n            return `01U 01B 01U'`\n        }\n        else {\n            return `01L' 01B 01L`\n        }\n    }\n    if(current.x===maxCoord && current.z===minCoord){// Bottom Right\n        if(whiteSide===5){\n            return `01D 01B 01D'`\n        }\n        else {\n            return `01R' 01B 01R`\n        }\n    }\n    if(current.x===minCoord && current.z===minCoord){// Bottom Left\n        if(whiteSide===1){\n            return `01D' 01B 01U`\n        }\n        else {\n            return `01L 01B 01L'`\n        }\n    }\n}\n\nfunction flipPieceOnBack(current,maxCoord,minCoord){\n    if(current.z===maxCoord){//top\n        return `01U 01R 01B2 01R' 01U' 01B'`\n    }\n    else if(current.x===maxCoord){//right\n        return `01R 01D 01B2 01D' 01R' 01B'`\n    }\n    else if(current.z===minCoord){//down\n        return `01D 01L 01B2 01L' 01D' 01B'`\n    }\n    else if(current.x===minCoord){//left\n        return `01L 01U 01B2 01U' 01L' 01B'`\n    }\n}\n\nfunction solveFromBackToFront(current,solved,maxCoord,minCoord){\n    if(current.z===maxCoord&&solved.z===maxCoord){\n        return `${move(\"\",current.x+1,\"L\")} 01F 01R' 01F' ${move(\"\",current.x+1,\"L'\")} 01F 01R 01F'`\n    }\n    else if(current.x===maxCoord && solved.x===maxCoord){\n        return `${move(\"\",current.z+1,\"D'\")} 01F 01D' 01F' ${move(\"\",current.z+1,\"D\")} 01F 01D 01F'`\n    }\n    else if(current.z===minCoord && solved.z===minCoord){\n        return `${move(\"\",current.x+1,\"L'\")} 01F 01L' 01F' ${move(\"\",current.x+1,\"L\")} 01F 01L 01F'`\n    }\n    else if(current.x===minCoord && solved.x===minCoord){\n        return `${move(\"\",current.z+1,\"D\")} 01F 01U' 01F' ${move(\"\",current.z+1,\"D'\")} 01F 01U 01F'`\n    }\n    else return ``\n}\n\n\n\nlet solveFrontEdgeSegments = (current,solved,dim,whiteSide) => {\n    const BACK=3;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n    let moveString = \"\";\n    // let solvedPosition = \"top\";\n\n    // if(solved.x===maxCoord) {solvedPosition = \"right\";}\n    // else if(solved.z===minCoord) {solvedPosition = \"bottom\";}\n    // else if(solved.x===minCoord) {solvedPosition = \"left\";}\n    \n    if(current.y===minCoord){\n        moveString = extractFromFront(current,maxCoord,minCoord);\n    }\n    else if(current.y>minCoord&&current.y<maxCoord){\n        moveString = moveFromMiddleToBack(current,maxCoord,minCoord,whiteSide);\n    }\n    else if(current.y===maxCoord && whiteSide===BACK){\n        moveString = flipPieceOnBack(current,maxCoord,minCoord);\n    }\n    else if(current.z===solved.z&&current.x===solved.x){\n        moveString = solveFromBackToFront(current,solved,maxCoord,minCoord);\n    }\n    else {\n        moveString = `01B`;\n    }\n        \n    \n\n    return moveString;\n}\n\nmodule.exports = solveFrontEdgeSegments;","function move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveBackEdgeSegments = (current,solved,dim,yellowSide) => {\n    const UP=1,RIGHT=2,LEFT=4,DOWN=5;\n    const maxCoord = dim-1;\n    const minCoord = 0;\n    let moveString = \"\";\n    // let solvedPosition = \"top\";\n    // let inMiddleSection = current.y > minCoord && current.y < maxCoord;\n\n    // if(solved.x===maxCoord) {solvedPosition = \"right\";}\n    // else if(solved.z===minCoord) {solvedPosition = \"bottom\";}\n    // else if(solved.x===minCoord) {solvedPosition = \"left\";}\n\n    // Solves top back edge\n    if(solved.z===maxCoord){\n        // top right middle edge\n        if(current.y<maxCoord && current.z===maxCoord && current.x===maxCoord){ //a\n            // if yellow side is on the right face (red center)\n            if(yellowSide===RIGHT){//a.1\n                //console.log(\"solve it\");\n                moveString = `01L' 01B 01L ${move(\"\",current.y+1,\"F'\")} 01L' 01B 01L 01B2 ${move(\"\",current.y+1,\"F\")}`;\n            }\n            // if yellow side is on the upward face (blue center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01R 01B 01R' 01B' 01U' 01B 01U`;\n            }\n        }\n        // top back edge (wrong position)\n        else if(current.z===solved.z && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01L' 01B 01L ${move(\"\",dim-(current.x),\"F'\")} 01L' 01B 01L 01B2 ${move(\"\",dim-(current.x),\"F\")}`;\n        }\n        // back edge that isn't top\n        else if(current.y===maxCoord && !(current.z===maxCoord)){ // c\n            moveString = `01U' 01B 01U`;\n        }\n        // middle edge that isn't top right (just places piece on back edges)\n        else if(current.y!==maxCoord){ // d\n            if(current.z===maxCoord && current.x===minCoord){\n                moveString = `01L' 01B' 01L 01B`\n            }\n            else if(current.z===minCoord && current.x===minCoord){\n                moveString = `01L 01B' 01L' 01B`\n            }\n            else if(current.z===minCoord && current.x===maxCoord){\n                moveString = `01R' 01B 01R 01B'`\n            }\n        }\n    }\n    // Solves right back edge\n    else if(solved.x===maxCoord){\n        if(current.y<maxCoord && current.z===minCoord && current.x===maxCoord){ //a\n            // if yellow side is on the down face (green center)\n            if(yellowSide===DOWN){//a.1\n                //console.log(\"solve it\");\n\n                // 01U' 01B 01U (02F' c.y+1) 01U' 01B 01U 01B2 (02F c.y+1) // converted\n                moveString = `01U' 01B 01U ${move(\"\",current.y+1,\"F'\")} 01U' 01B 01U 01B2 ${move(\"\",current.y+1,\"F\")} 01R' 01B2 01R`;\n            }\n            // if yellow side is on the right face (red center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01D 01B 01D' 01B' 01R' 01B 01R2 01B' 01R'`;\n            }\n        }\n\n        // b // change coords + small mod to algo\n        else if(current.x===solved.x && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01U' 01B 01U ${move(\"\",current.z+1,\"F'\")} 01U' 01B 01U 01B2 ${move(\"\",current.z+1,\"F\")} 01R' 01B2 01R`;\n        }\n\n\n        // c // hard code those instead of generalizing\n        else if(current.y===maxCoord){\n            if(current.z===minCoord){\n                moveString = `01R' 01B 01R2 01B' 01R'`;\n            } else if(current.x===minCoord){\n                moveString = `01R' 01B2 01R2 01B2 01R'`;\n            }\n        }\n\n        // d // change coords\n        else if(current.y!==maxCoord){\n            if(current.x===maxCoord && current.z===maxCoord){\n                moveString = `01B 01R 01B 01R' 01B2`\n            }\n            else if(current.x===minCoord && current.z===maxCoord){\n                moveString = `01L' 01B' 01L 01B`\n            }\n            else if(current.x===minCoord && current.z===minCoord){\n                moveString = `01D' 01B 01D 01B'`\n            }\n        }\n    }\n    // Solves bottom back edge\n    else if(solved.z===minCoord){\n        if(current.y<maxCoord && current.z===minCoord && current.x===minCoord){ //a\n            // if yellow side is on the left face (orange center)\n            if(yellowSide===LEFT){//a.1\n                //console.log(\"solve it\");\n                moveString = `01R' 01B 01R ${move(\"\",current.y+1,\"F'\")} 01R' 01B 01R 01B2 ${move(\"\",current.y+1,\"F\")} 01D 01U' 01B2 01D' 01U`;\n            }\n            // if yellow side is on the down face (green center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `01L 01B 01L' 01B' 01D' 01B 01D2 01B' 01D' 01B' 01R' 01B' 01R 01B2`;\n            }\n        }\n\n        // b // change coords + small mod to algo\n        else if(current.z===solved.z && current.y===solved.y){ // b\n            //console.log(\"remove it\");\n            moveString = `01R' 01B 01R ${move(\"\",current.x+1,\"F'\")} 01R' 01B 01R 01B2 ${move(\"\",current.x+1,\"F\")} 01D 01U' 01B2 01D' 01U`;\n        }\n\n        else if(current.y===maxCoord){ // c\n            moveString = `01D' 01B 01D2 01B' 01D'`;\n        }\n        else if(current.y<maxCoord){\n            moveString = `01D 01R 01U 01B 01U' 01R' 01D'`;\n        }\n        // permutations of the original algo should work\n    }\n    else if(solved.x===minCoord){\n        const displace = `01R 01B' 01R' 01B 01U 01B 01U' 01B'`;\n        const solve = `01D' 01B 01D ${move(\"\",current.y+1,\"F'\")} 01D' 01B 01D 01B2 ${move(\"\",current.y+1,\"F\")} 01L 01R' 01B2 01R 01L'`;\n        const replace = `01B 01U 01B' 01U' 01B' 01R 01B 01R'`\n        const flip = `01R 01B 01R' 01B' 01U' 01B 01U2 01B' 01U' 01B' 01L' 01B' 01L 01B2`\n\n        if(current.y<maxCoord && current.z===maxCoord && current.x===maxCoord){ //a\n            // if yellow side is on the left face (orange center)\n            if(yellowSide===RIGHT){//a.1\n                //console.log(\"solve it\");\n                moveString = `${displace} ${solve} ${replace}`;\n            }\n            // if yellow side is on the down face (green center)\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `${flip}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===maxCoord && current.x===minCoord){ //a\n            if(yellowSide===UP){//a.1\n                //console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f'\")}`;\n            }\n            else {//a.2\n                //console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f\")} ${flip} ${move(\"\",dim-1,\"f'\")}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===minCoord && current.x===minCoord){ //a\n            if(yellowSide===LEFT){//a.1\n                // console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f2\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f2\")}`;\n            }\n            else {//a.2\n                // console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f2\")} ${flip} ${move(\"\",dim-1,\"f2\")}`;\n            }\n        }\n\n        else if(current.y<maxCoord && current.z===minCoord && current.x===maxCoord){ //a\n            if(yellowSide===DOWN){//a.1\n                // console.log(\"solve it\");\n                moveString = `${move(\"\",dim-1,\"f'\")} ${displace} ${solve} ${replace} ${move(\"\",dim-1,\"f\")}`;\n            }\n            else {//a.2\n                // console.log(\"flip it\");\n                moveString = `${move(\"\",dim-1,\"f'\")} ${flip} ${move(\"\",dim-1,\"f\")}`;\n            }\n        }\n\n        else if(current.x===solved.x && current.y===solved.y){ // b\n            // console.log(\"remove it\");\n            moveString = `${displace} 01D' 01B 01D ${move(\"\",dim-current.z,\"F'\")} 01D' 01B 01D 01B2 ${move(\"\",dim-current.z,\"F\")} 01L 01R' 01B2 01L' 01R 01L 01D 01R 01B 01R' 01D' 01L'`;\n        }\n    }\n\n\n    return moveString;\n}\n\nmodule.exports = solveBackEdgeSegments;","function move(space,depth,side){\n    return (space+(depth<10? \"0\":\"\") + depth + side);\n}\n\nlet solveMiddleEdgeSegments = (current,solved,dim,blueSide,greenSide) => {\n    const maxCoord = dim-1;\n    const minCoord = 0;\n\n    let moveString = \"\";\n\n    // where blue and orange meet\n    let firstEdge = (solved.x===minCoord && solved.z===maxCoord);\n    // where blue and red meet\n    let secondEdge = (solved.x===maxCoord && solved.z===maxCoord);\n    // where green and red meet\n    let thirdEdge = (solved.x===maxCoord && solved.z===minCoord);\n\n    // flip edge segment in place\n    let flip = \"01R 01U' 01B 01R' 01U\";\n    // move solved edge to flip location to flip and then return\n    let firstPieceFlip = \"01U2 01R 01U' 01B 01R' 01U'\";\n\n    let flip2 = \"01D 01R' 01B 01D' 01R\";\n    let firstPieceFlip2 = \"01R2 01D 01R' 01B 01D' 01R'\";\n\n    let flip3 = \"01L 01D' 01B 01L' 01D\";\n    let firstPieceFlip3 = \"01D2 01L 01D' 01B 01L' 01D'\";\n\n    // solves piece diagonally to solved location\n    let solveUp = \"01F 02F 01R 01U' 01B 01R' 01U 01F' 02F'\";\n    let solveDown = \"03F 04F 01R 01U' 01B 01R' 01U 03F' 04F'\";\n\n    let solveUp2 = \"01F 02F 01D 01R' 01B 01D' 01R 01F' 02F'\";\n    let solveDown2 = \"03F 04F 01D 01R' 01B 01D' 01R 03F' 04F'\";\n\n    let solveUp3 = \"01F 02F 01L 01D' 01B 01L' 01D 01F' 02F'\";\n    let solveDown3 = \"03F 04F 01L 01D' 01B 01L' 01D 03F' 04F'\";\n\n    if(dim===4){\n        if(firstEdge){\n            if(current.x===minCoord&&current.z===maxCoord){\n                moveString=firstPieceFlip;\n            }\n            else if(current.x===maxCoord&&current.z===maxCoord){\n                if(current.y===solved.y){\n                    moveString=flip;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp;\n                    }\n                    else{\n                        moveString=solveDown;\n                    }\n                }\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                moveString=\"01D2 01R2\";\n            }\n            else if(current.x===maxCoord&&current.z===minCoord){\n                moveString=\"01R2\";\n            }\n        }\n        else if(secondEdge){\n            if(current.x===maxCoord&&current.z===maxCoord){\n                moveString=firstPieceFlip2;\n            }\n            else if(current.x===maxCoord&&current.z===minCoord){\n                if(current.y===solved.y){\n                    moveString=flip2;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp2;\n                    }\n                    else{\n                        moveString=solveDown2;\n                    }\n                }\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                moveString=\"01D2\";\n            }\n        }\n        else if(thirdEdge){\n            if(current.x===maxCoord&&current.z===minCoord){\n                moveString=firstPieceFlip3;\n            }\n            else if(current.x===minCoord&&current.z===minCoord){\n                if(current.y===solved.y){\n                    moveString=flip3;\n                }\n                else{\n                    if(current.y===(maxCoord-1)){\n                        moveString=solveUp3;\n                    }\n                    else{\n                        moveString=solveDown3;\n                    }\n                }\n            }\n        }\n    }\n    return moveString;\n}\n\nmodule.exports = solveMiddleEdgeSegments;","import React from \"react\";\nimport \"./Nav.css\";\nimport {DropdownButton,Dropdown} from 'react-bootstrap'\nimport 'react-dropdown/style.css'\nimport Popup from \"reactjs-popup\";\n\nconst Navbar = props => (\n  <nav className=\"navbar navbar-dark fixed-top bg-dark\">\n    <ul className=\"nav nav-justified mr-auto\">\n      <li className=\"nav-item nav-fix-for-edge\">\n        <p className=\"navbar-brand\" style={{color:\"lightgray\"}}><b>{props.title}</b></p>\n\n          {/*Open model here. Show bunch of settings. Pass changeSettings down to component to apply changes*/}\n          <DropdownButton className=\"settings\" title={<i className='fa fa-cog'></i>}>\n          <ul>\n            <li>\n              \n              Stats <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" data-toggle=\"toggle\" onClick={() => props.changeSettings('displayStats')}></input>\n                {props.state.showStats ? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n\n            <li>\n              \n              Move Input <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" data-toggle=\"toggle\" onClick={() => props.changeSettings('displayMoveInput')}></input>\n                {props.state.showMoveInput ? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n\n            <li>\n              \n              Move Controls <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" data-toggle=\"toggle\" onClick={() => props.changeSettings('displayControls')}></input>\n                {props.state.showControls ? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n\n            <li>\n              \n              Move Hints <br></br>\n              <label className=\"checkbox-inline\">\n                <input type=\"checkbox\" defaultChecked data-toggle=\"toggle\" onClick={() => props.changeSettings('displayHints')}></input>\n                {props.state.showHints? \"ON \" : \"OFF \"}\n              </label>\n              \n              \n            </li>\n            \n          </ul>\n\n        </DropdownButton>\n        <DropdownButton title=\"Cubes\">\n\n          {props.isLocal ?\n          <>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=2\" style={{backgroundColor:\"lightgrey\"}}>2 X 2 X 2</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=3\">3 X 3 X 3</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=4\" style={{backgroundColor:\"lightgrey\"}}>4 X 4 X 4</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=5\">5 X 5 X 5</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=6\" style={{backgroundColor:\"lightgrey\"}}>6 X 6 X 6</Dropdown.Item>\n          <Dropdown.Item href=\"http://localhost:3000/RubiksProgram/id=7\">7 X 7 X 7</Dropdown.Item>\n          </>:\n          <>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=2\" style={{backgroundColor:\"lightgrey\"}}>2 X 2 X 2</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=3\">3 X 3 X 3</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=4\" style={{backgroundColor:\"lightgrey\"}}>4 X 4 X 4</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=5\">5 X 5 X 5</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=6\" style={{backgroundColor:\"lightgrey\"}}>6 X 6 X 6</Dropdown.Item>\n          <Dropdown.Item href=\"https://merpig.github.io/RubiksProgram/id=7\">7 X 7 X 7</Dropdown.Item>\n          </>}\n\n          \n        </DropdownButton>\n        \n      </li>\n    </ul>\n    <div style={{float:\"right\"}} >\n    <Popup trigger={<button id=\"triggerBtn\">Info</button>}>\n        {close => (\n          <div style={{zIndex:\"100\"}}>\n            <div className=\"shadeBackground\" style={{backgroundColor:\"black\",zIndex:\"101\"}} onClick={close}></div>\n            <div style={{zIndex:\"102\"}} className=\"popupDiv\">\n              <b style={{fontSize: \"2rem\"}}>Instructions</b>\n              <button className=\"close\" id=\"closeBtn\" onClick={close}>\n                &times;\n              </button>\n              <hr style={{backgroundColor:\"#007bff\",marginBottom:\"0\"}}></hr>\n              <div style={{backgroundColor:\"black\",marginTop:\"0\",color:\"#00C000\"}}>\n                <p style={{paddingTop: \"1rem\"}}>> Click and hold and drag anywhere on or around cube to rotate.</p>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <p>> Use buttons or keyboard to make turns: <br></br>\n                  > \n                  <b style={{color: \"white\",backgroundColor:\"black\"}}> F, </b><b style={{color: \"white\",backgroundColor:\"black\"}}>f,</b>\n                  <b style={{color: \"blue\",backgroundColor:\"black\"}}> U, </b><b style={{color: \"blue\",backgroundColor:\"black\"}}>u,</b>\n                  <b style={{color: \"red\",backgroundColor:\"black\"}}> R, </b><b style={{color: \"red\",backgroundColor:\"black\"}}>r,</b>\n                  <b style={{color: \"yellow\",backgroundColor:\"black\"}}> B, </b><b style={{color: \"yellow\",backgroundColor:\"black\"}}>b,</b>\n                  <b style={{color: \"orange\",backgroundColor:\"black\"}}> L, </b><b style={{color: \"orange\",backgroundColor:\"black\"}}>l,</b>\n                  <b style={{color: \"green\",backgroundColor:\"black\"}}> D, </b><b style={{color: \"green\",backgroundColor:\"black\"}}>d </b> \n                </p>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <p>> Top Left slider controls the speed</p>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <p>> Bottom left buttons are built in pattern functions</p>\n                <hr style={{backgroundColor:\"lightgray\"}}></hr>\n                <p style={{marginBottom: \"0\",paddingBottom:\"1rem\"}}>> Bottom right buttons are the core functions for the cube</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </Popup> {\" \"}\n      <button id=\"fullscreenBtn\" value=\"true\">Fullscreen</button>\n      \n      {/*<button className=\"btn btn-primary btn-circle btn-circle-sm m-1\" onClick={() => props.changeSettings([1],[\"Hello\"])}><i className=\"fa fa-cog\"></i></button> */}\n    </div>\n  </nav>\n);\n\nexport default Navbar;\n","let algorithms = [\n    {\n        name : \"Cross\",\n        moves: \"01R2 01L' 01D 01F2 01R' 01D' 01R' 01L 01U' 01D 01R 01D 01B2 01R' 01U 01D2\",\n        worksFor: [3,4]\n    },\n    {\n        name : \"Cube x2\",\n        moves: \"01F 01L 01F 01U' 01R 01U 01F2 01L2 01U' 01L' 01B 01D' 01B' 01L2 01U\",\n        worksFor: [2,3,4]\n    },\n    {\n        name : \"Cube x2\",\n        moves: \"02f2 02r2 02u' 02f' 04d 02b' 02u2 02b 02u' 02r' 03R2 02b2 03R2 03f2 03L2 03B2\",\n        worksFor: [6]\n    },\n    {\n        name : \"Cube x3\",\n        moves: \"01U' 01L' 01U' 01F' 01R2 01B' 01R 01F 01U 01B2 01U 01B' 01L 01U' 01F 01U 01R 01F'\",\n        worksFor: [3]\n    },\n    {\n        name : \"Cube x4\",\n        moves: \"01B' 02R2 02L2 01U2 02R2 02L2 01B 01F2 01R 01U' 01R 01U 01R2 01U 01R2 01F' 01U 01F' 01U 02U 01L 02L 01U' 02U' 01F2 02F2 01D 02D 01R' 02R' 01U 02U 01F 02F 01D2 02D2 01R2 02R2\",\n        worksFor: [4]\n    },\n    {\n        name : \"Cube x5\",\n        moves: \"01F 01U' 01B 01L 01U' 01F2 01U2 01F 01U 01F' 01U2 01D' 01B 01D 01L2 01B2 01U 02f 02u' 02b 02l 02u' 02f2 02u2 02f 02u 02f' 02u2 02d' 02b 02d 02l2 02b2 02u\",\n        worksFor: [5]\n    },\n    {\n        name : \"Six Spots\",\n        moves : \"01U 01D' 01R 01L' 01F 01B' 01U 01D'\",\n        worksFor: [3,4]\n    },\n    {\n        name : \"CheckerBoard\",\n        moves : \"01U2 01D2 01R2 01L2 01F2 01B2\",\n        worksFor: [3]\n    },\n    {\n        name : \"Checkerboard1\",\n        moves : \"01U' 01R2 01L2 01F2 01B2 01U' 01R 01L 01F 01B' 01U 01F2 01D2 01R2 01L2 01F2 01U2 01F2 01U' 01F2\",\n        worksFor: [3]\n    },\n    {\n        name: \"Checkerboard2\",\n        moves : \"01B 01D 01F' 01B' 01D 01L2 01U 01L 01U' 01B 01D' 01R 01B 01R 01D' 01R 01L' 01F 01U2 01D\",\n        worksFor: [3]\n    },\n    {\n        name: \"Anaconda\",\n        moves : \"01L 01U 01B' 01U' 01R 01L' 01B 01R' 01F 01B' 01D 01R 01D' 01F'\",\n        worksFor: [3]\n    },\n    {\n        name: \"Python\",\n        moves : \"01F2 01R' 01B' 01U 01R' 01L 01F' 01L 01F' 01B 01D' 01R 01B 01L2\",\n        worksFor: [3]\n    },\n    {\n        name: \"Rings\",\n        moves: \"02R 03R 04R 05R 02B' 03B' 04B' 01L2 02F 02B 01L2 02B' 02D' 03D' 04D' 05D' 02F' 01L2 02F 02B 01L2 02B' 02D2 03D2 04D2 05D2 03R 04R 01U' 03R' 04R' 02D' 03D' 04D' 05D' 03R 04R 01U 02R' 03R' 04R' 05R' 03F' 04F' 03R' 04R' 03F 04F 02F 03F 04F 05F 02L2 03L2 04L2 02F2 03R2 04R2 02B2 03B2 04B2 02L2\",\n        worksFor: [6]\n    },\n    {\n        name: \"Test f depth:2 multi turn\",\n        moves: \"02f 02f'\",\n        worksFor: []\n    },\n    {\n        name: \"Test u depth:2 multi turn\",\n        moves: \"02u 02u'\",\n        worksFor: []\n    },\n    {\n        name: \"Test r depth:2 multi turn\",\n        moves: \"02r 02r'\",\n        worksFor: []\n    },\n    {\n        name: \"Test b depth:2 multi turn\",\n        moves: \"02b 02b'\",\n        worksFor: []\n    },\n    {\n        name: \"Test d depth:2 multi turn\",\n        moves: \"02d 02d'\",\n        worksFor: []\n    },\n    {\n        name: \"Test l depth:2 multi turn\",\n        moves: \"02l 02l'\",\n        worksFor: []\n    },\n]\n\nexport default algorithms;","import React from \"react\";\nimport algorithms from '../cubeFunctions/algorithms';\n\nlet position = 0;\nlet buttons=[];\nconst Patterns = props => (\n    <div style={{position:\"fixed\", bottom: \"0px\", left: \"10px\",backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>\n        {\n            algorithms.forEach(e => {\n                if(e.worksFor.includes(props.size)){\n                    buttons.push( \n                        <button \n                            onClick={() => props.algorithm(e.moves,e.name)}\n                            key={position/30}\n                            style={{\n                                position:\"fixed\",\n                                bottom: position,\n                                left: \"10px\",\n                                backgroundColor: \"Transparent\",\n                                border: \"none\",\n                                color:\"lightgray\"\n                            }}\n                        >{e.name}</button>\n                    )\n                    position+=30;\n                }\n            })\n        }\n        {buttons}\n    </div>\n);\n\nexport default Patterns;","import 'rc-slider/assets/index.css';\n\nimport React from 'react';\nimport Slider from 'rc-slider'\n\nconst style = { width: 100, position: \"fixed\", top: \"100px\", left: \"10px\"};\n\nconst Speeds = props => (\n\n    <div className=\"sliderDiv\" style = {style}>\n\n        {props.isDisabled ?\n        <Slider \n            defaultValue={40} \n            min={0} max={70} \n            step={10}\n            disabled\n        />\n        :\n        <Slider \n            defaultValue={40} \n            min={0} max={70} \n            step={10}\n            onChange={props.onSliderChange}\n        />}\n\n    </div>\n);\n\n\n\nexport default Speeds;","import React from 'react';\nimport Draggable from 'react-draggable';\n\n\nlet centerButtons=[];\nlet singleButtons=[];\nlet multiButtons=[];\nlet singleCols=[];\nlet multiCols=[];\nlet key=0;\n\nfunction namesToColors(face){\n    switch(face){\n        case 'F':\n            return {\n                bgc: 'white',\n                color: 'black',\n            }\n        case 'U':\n            return {\n                bgc: 'blue',\n                color: 'white',\n            }\n        case 'R':\n            return {\n                bgc: 'red',\n                color: 'white',\n            }\n        case 'B':\n            return {\n                bgc: 'yellow',\n                color: 'black',\n            }\n        case 'L':\n            return {\n                bgc: 'orange',\n                color: 'black',\n            }\n        case 'D':\n            return {\n                bgc: 'green',\n                color: 'white',\n            }\n        default:\n    }\n\n}\n\n//generate data for buttons and pass down to props. Better than trying to do in here\nconst Controls = props => {\n    centerButtons=[];\n    singleButtons=[];\n    multiButtons=[];\n    singleCols=[];\n    multiCols=[];\n\n    return (\n        <div id=\"divInfo\" style={{position: \"absolute\", zIndex: \"98\"}}>\n        <Draggable\n                handle=\".handle\"\n                defaultPosition={{x:130, y: window.innerHeight-370}}\n                position={null}\n                grid={[50, 50]}\n                scale={1}\n                onStart={props.handleStart}\n                onDrag={props.handleDrag}\n                onStop={props.handleStop}>\n        <div id=\"controlsDiv\">\n        <div className=\"handle\" style={{color:\"grey\"}}>Drag from here</div>\n            {\n                props.size%2 ? \n                <div id=\"centerMoves\" style={{marginRight: \"5px\"}}>\n                    {\n                        props.generatedButtons.center.forEach(element => {\n                            centerButtons.push(\n                                <button className=\"moveBtn\" \n                                        key={key} \n                                        onClick={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                        style={{position:\"relative\", left: \"0px\",backgroundColor: \"magenta\",width:\"45px\"}}\n                                        onMouseEnter={()=>props.mouseEnter(element.clockwise.name,element.clockwise.data)}\n                                        onMouseLeave={()=>props.mouseLeave()}\n                                        >\n                                        \n                                    {element.clockwise.name}\n                                </button>\n                            );\n                            key+=1\n                            centerButtons.push(\n                                <button className=\"moveBtn\" \n                                        key={key} \n                                        onClick={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                        style={{position:\"relative\", left: \"0px\",backgroundColor: \"magenta\",width:\"45px\"}}\n                                        onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                        onMouseLeave={()=>props.mouseLeave()}\n                                        >\n                                    {element.counter.name}\n                                </button>\n                            );\n                            key+=1\n                        })\n                    }\n                    {centerButtons}\n                </div> : \"\"\n            }\n            <div className=\"singleLayerMoves\" style={{marginRight: \"5px\"}}>\n                {\n                    props.generatedButtons.single.forEach(element => {\n                        let colors = namesToColors(element.counter.face);\n                        if(element.counter.face === 'F') singleButtons.push([],[]);\n                        let lengthBtns = singleButtons.length-2;\n                        let lengthBtns1 = singleButtons.length-1;\n                        singleButtons[lengthBtns].push(\n                            <button className=\"moveBtn\" \n                                    key={key} \n                                    onClick={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                    style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                    onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                    onMouseLeave={()=>props.mouseLeave()}\n                                    >\n                                {element.counter.name}\n                            </button>\n                        )\n                        key+=1;\n                        singleButtons[lengthBtns1].push(\n                            <button className=\"moveBtn\" \n                                    key={key} \n                                    onClick={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                    style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                    onMouseEnter={()=>props.mouseEnter(element.clockwise.name,element.clockwise.data)}\n                                    onMouseLeave={()=>props.mouseLeave()}\n                                    >\n                                {element.clockwise.name}\n                            </button>\n                        )\n                        key+=1;\n                    })\n\n                }\n                {\n                    singleButtons.forEach(element =>{\n                        key+=1;\n                        singleCols.push(\n                            <div key={key} className='singleLayerColumns'>\n                                {element}\n                            </div>\n                        )\n                    })\n                }\n                {\n                    singleCols\n                }\n            </div>\n            <div className=\"multiLayerMoves\">\n            {\n                    props.generatedButtons.multi.forEach(element => {\n                        let colors = namesToColors(element.counter.face);\n                        if(element.counter.face === 'F') multiButtons.push([],[]);\n                        let lengthBtns = multiButtons.length-2;\n                        let lengthBtns1 = multiButtons.length-1;\n                        multiButtons[lengthBtns].push(\n                            <button className=\"moveBtn\" \n                                    key={key} \n                                    onClick={() => props.rotateOneFace(element.counter.name,element.counter.data)} \n                                    style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                    onMouseEnter={()=>props.mouseEnter(element.counter.name,element.counter.data)}\n                                    onMouseLeave={()=>props.mouseLeave()}\n                                    >\n                                {element.counter.name}\n                            </button>\n                        )\n                        key+=1;\n                        multiButtons[lengthBtns1].push(\n                            <button className=\"moveBtn\" \n                                    key={key} \n                                    onClick={() => props.rotateOneFace(element.clockwise.name,element.clockwise.data)} \n                                    style={{position:\"relative\", left: \"0px\",backgroundColor: colors.bgc,color: colors.color,width:\"45px\"}}\n                                    onMouseEnter={()=>props.mouseEnter(element.clockwise.name,element.clockwise.data)}\n                                    onMouseLeave={()=>props.mouseLeave()}\n                                    >\n                                {element.clockwise.name}\n                            </button>\n                        )\n                        key+=1;\n                    })\n\n                }\n                {\n                    multiButtons.forEach(element =>{\n                        key+=1;\n                        multiCols.push(\n                            <div key={key} className='multiLayerColumns'>\n                                {element}\n                            </div>\n                        )\n                    })\n                }\n                {\n                    multiCols\n                }\n            </div>\n        </div>\n        </Draggable>\n        </div>\n    )\n}\n\nexport default React.memo(Controls);","import React from \"react\";\nimport Draggable from 'react-draggable';\n\nconst MoveInput = (props) => {\n    const instructTurn = (e) => {\n        if(e.key==='Enter'){\n            props.algorithm(document.getElementById('moveInput').value,'Custom');\n        }\n        e.stopPropagation();\n    };\n\n    return (\n        <div style={{position: \"absolute\", zIndex: \"99\"}}>\n            <Draggable\n                handle=\".handle\"\n                defaultPosition={{x:/*window.innerWidth-220*/0 , y: 150}}\n                position={null}\n                grid={[50, 50]}\n                scale={1}\n                onStart={props.handleStart}\n                onDrag={props.handleDrag}\n                onStop={props.handleStop}>\n                <div>\n                    <div className=\"handle\" style={{color:\"grey\"}}>Drag from here</div>\n                    <div>\n                        <input placeholder=\"type moves here\" id=\"moveInput\" onKeyDown={instructTurn} style={{borderRadius: \"4px\", margin: \"1px\",border: \"1.5px solid #007bff\"}}></input>\n                        <button id=\"moveSubmit\" onClick={() => props.algorithm(document.getElementById('moveInput').value,'Custom')}>Enter</button>\n                    </div>\n                </div>\n            </Draggable>\n        </div>\n    );\n};\n\nexport default MoveInput;","import React from \"react\";\nimport Draggable from 'react-draggable';\n\nconst ColorPicker = (props) => {\n    return (\n        <div style={{position: \"absolute\", zIndex: \"99\"}}>\n            <Draggable\n            handle=\".handle\"\n            defaultPosition={{x:window.innerWidth-211 , y: 150}}\n            position={null}\n            grid={[50, 50]}\n            scale={1}\n            onStart={props.handleStart}\n            onDrag={props.handleDrag}\n            onStop={props.handleStop}>\n                <div>\n                    <div className=\"handle\" style={{color:\"grey\"}}>Drag from here</div>\n                    <div>\n                        <div className=\"cp-container\" style={{width:\"200px\",height:\"100px\"}}>\n\n                            <div style={{backgroundColor:\"darkgrey\"}}><p>Click pieces to assign colors. Click buttons or keyboard to select color.</p></div>\n                            <div style={{backgroundColor:props.colorPicked}}><h3>Current color</h3></div>\n                            <button style={{backgroundColor:'white'}} onClick={()=>props.changeColor('white')}>1 : White</button>\n                            <button style={{backgroundColor:'blue'}} onClick={()=>props.changeColor('blue')}>2 : Blue</button>\n                            <button style={{backgroundColor:'red'}} onClick={()=>props.changeColor('red')}>3 : Red</button>\n                            <button style={{backgroundColor:'yellow'}} onClick={()=>props.changeColor('yellow')}>4 : Yellow</button>\n                            <button style={{backgroundColor:'orange'}} onClick={()=>props.changeColor('orange')}>5 : Orange</button>\n                            <button style={{backgroundColor:'green'}} onClick={()=>props.changeColor('green')}>6 : Green</button>\n                            {props.isValidConfig?<button onClick={()=>props.setColorPickedCube()}>Set [<strong style={{color:'green'}}>Valid</strong>]</button>:<button>Set [<strong style={{color:'red'}}>Invalid</strong>]</button>}\n                            <button onClick={props.endColorPicker}>Quit</button>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        </div>\n        );\n\n};\n\nexport default ColorPicker;","// Functions to generate/manipulate cube\n\nconst cube = {\n    // Generates the inital solved state of rubiksObject\n    generateSolved : function (_x,_y,_z){\n        const tempArr = [];\n        const middles = [];\n        const edges = [];\n        const corners = [];\n        const tempMiddles = [\n          [], // white\n          [], // yellow\n          [], // blue\n          [], // green\n          [], // orange\n          []  // red\n        ];\n        const tempEdges = [\n          [[],[],[],[]], // white edges\n          [[],[],[],[]], // middle edges\n          [[],[],[],[]]\n        ]\n    \n        for(let j = 0; j < _y; j++){      // Move back along the y-axis\n          for(let k = _z-1; k >= 0; k--){ // Move down through the z-axis\n            for(let i = 0; i < _x; i++){  // Traverse across the x-axis\n              let side0 = \"black\";\n              let side1 = \"black\";\n              let side2 = \"black\";\n              let side3 = \"black\";\n              let side4 = \"black\";\n              let side5 = \"black\";\n              let edgeType = null;\n              if(i===_x-1) side2 = \"red\";\n              else if (i===0) side4 =\"orange\";\n              if(j===_y-1) side3 = \"yellow\";\n              else if (j===0) side0 =\"white\";\n              if(k===_z-1) side1 = \"blue\";\n              else if (k===0) side5 =\"green\";\n              let tempCount = 0;\n              if(j===0 || j === _y-1) tempCount++;\n              if(k===0 || k === _z-1) tempCount++;\n              if(i===0 || i === _x-1) tempCount ++;\n              let tempType = \"none\";\n    \n              if(tempCount===1) {\n                tempType = \"middle\";\n                if(j===0) tempMiddles[0].push(tempArr.length);\n                if(j===_y-1) tempMiddles[1].push(tempArr.length);\n                if(k===_z-1) tempMiddles[2].push(tempArr.length);\n                if(i===0) tempMiddles[3].push(tempArr.length);\n                if(k===0) tempMiddles[4].push(tempArr.length);\n                if(i===_x-1) tempMiddles[5].push(tempArr.length);\n              }\n    \n              else if(tempCount===2) {\n                // do stuff in here to populate edges\n                tempType = \"edge\";\n                if(j === 0){\n                  if(k===_z-1){\n                    if(tempEdges[0][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[0][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[0][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[0][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][3].push(tempArr.length);\n                  }\n                } else if(j === _y-1){\n                  if(k===_z-1){\n                    if(tempEdges[1][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[1][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[1][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[1][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][3].push(tempArr.length);\n                  }\n                } else {\n                  if(k===_z-1 && i===0){\n                    if(tempEdges[2][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][0].push(tempArr.length);\n                  }\n                  else if(k===_z-1 && i===_x-1){\n                    if(tempEdges[2][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][1].push(tempArr.length);\n                  }\n                  else if(k===0 && i===_x-1){\n                    if(tempEdges[2][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][2].push(tempArr.length);\n                  }\n                  else if(k===0 && i===0){\n                    if(tempEdges[2][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][3].push(tempArr.length);\n                  }\n                }\n              }\n              else if(tempCount===3) {\n                tempType = \"corner\";\n                corners.push(tempArr.length);\n              }\n    \n              tempArr.push([side0,side1,side2,side3,side4,side5, // piece colors\n                            i,j,k, // Current position x,y,z\n                            i,j,k, // Solved position x,y,z\n                            tempType,\n                            edgeType\n                          ]);\n            }\n          }\n        }\n        \n        for(let i = 0; i < 6; i++){\n          for(let j = 0; j < (_x-2)*(_x-2); j++){\n            middles.push(tempMiddles[i][j]);\n          }\n        }\n\n        for(let i = 0; i < 3; i++){\n          for(let j = 0; j < 4; j++){\n            edges.push(...tempEdges[i][j]);\n          }\n        }\n        console.log(tempArr);\n        return {tempArr,middles,edges,corners};\n    },\n\n    generateBlank : function (_x,_y,_z){\n      const tempArr = [];\n      const middles = [];\n      const edges = [];\n      const corners = [];\n      const tempMiddles = [\n        [], // white\n        [], // yellow\n        [], // blue\n        [], // green\n        [], // orange\n        []  // red\n      ];\n      const tempEdges = [\n        [[],[],[],[]], // white edges\n        [[],[],[],[]], // middle edges\n        [[],[],[],[]]\n      ]\n  \n      for(let j = 0; j < _y; j++){      // Move back along the y-axis\n        for(let k = _z-1; k >= 0; k--){ // Move down through the z-axis\n          for(let i = 0; i < _x; i++){  // Traverse across the x-axis\n            let side0 = \"black\";\n            let side1 = \"black\";\n            let side2 = \"black\";\n            let side3 = \"black\";\n            let side4 = \"black\";\n            let side5 = \"black\";\n            let edgeType = null;\n            let greenSide = null;\n            let blueSide = null;\n              if(i===_x-1) side2 = \"white\";\n              else if (i===0) side4 =\"white\";\n              if(j===_y-1) side3 = \"white\";\n              else if (j===0) side0 =\"white\";\n              if(k===_z-1) side1 = \"white\";\n              else if (k===0) side5 =\"white\";\n              let tempCount = 0;\n              if(j===0 || j === _y-1) tempCount++;\n              if(k===0 || k === _z-1) tempCount++;\n              if(i===0 || i === _x-1) tempCount ++;\n              let tempType = \"none\";\n    \n              if(tempCount===1) {\n                tempType = \"middle\";\n                if(j===0) tempMiddles[0].push(tempArr.length);\n                if(j===_y-1) tempMiddles[1].push(tempArr.length);\n                if(k===_z-1) tempMiddles[2].push(tempArr.length);\n                if(i===0) tempMiddles[3].push(tempArr.length);\n                if(k===0) tempMiddles[4].push(tempArr.length);\n                if(i===_x-1) tempMiddles[5].push(tempArr.length);\n              }\n    \n              else if(tempCount===2) {\n                // do stuff in here to populate edges\n                tempType = \"edge\";\n                if(j === 0){\n                  if(k===_z-1){\n                    if(tempEdges[0][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[0][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[0][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[0][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[0][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[0][3].push(tempArr.length);\n                  }\n                } else if(j === _y-1){\n                  if(k===_z-1){\n                    if(tempEdges[1][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][0].push(tempArr.length);\n                  }\n                  else if(i===_x-1){\n                    if(tempEdges[1][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][1].push(tempArr.length);\n                  }\n                  else if(k===0){\n                    if(tempEdges[1][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][2].push(tempArr.length);\n                  }\n                  else if(i===0){\n                    if(tempEdges[1][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[1][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[1][3].push(tempArr.length);\n                  }\n                } else {\n                  if(k===_z-1 && i===0){\n                    if(tempEdges[2][0].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][0].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][0].push(tempArr.length);\n                  }\n                  else if(k===_z-1 && i===_x-1){\n                    if(tempEdges[2][1].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][1].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][1].push(tempArr.length);\n                  }\n                  else if(k===0 && i===_x-1){\n                    if(tempEdges[2][2].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][2].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][2].push(tempArr.length);\n                  }\n                  else if(k===0 && i===0){\n                    if(tempEdges[2][3].length+1<Math.floor(_x/2)){\n                      edgeType=\"firstHalf\";\n                    }\n                    else if(_x%2&&tempEdges[2][3].length+1===Math.floor(_x/2)){\n                      edgeType=\"center\";\n                    }\n                    else{\n                        edgeType=\"secondHalf\";\n                    }\n                    tempEdges[2][3].push(tempArr.length);\n                  }\n                }\n              }\n              else if(tempCount===3) {\n                tempType = \"corner\";\n                corners.push(tempArr.length);\n              }\n  \n            tempArr.push([side0,side1,side2,side3,side4,side5, // piece colors\n                          i,j,k, // Current position x,y,z\n                          i,j,k, // solved position x,y,z\n                          tempType,\n                          edgeType\n                        ]);\n          }\n        }\n      }\n      console.log(tempArr);\n      return tempArr;\n  },\n\n    generateButtonData : function(size){\n        let numLayers = Math.floor(size/2);\n        let centerLayer = Math.ceil(size/2);\n        const faces = ['F','U','R','B','L','D'];\n        const buttons = {\n          center : [], // Center rotations\n          single : [], // Single layer\n          multi : []  // Multi layer\n        };\n\n        if(size%2)\n          buttons.center.push(\n            {clockwise: {name:\"C1\",data:[0,-1,centerLayer,false]},\n             counter: {name:\"C1'\",data:[0,0,centerLayer,false]}},\n            {clockwise: {name:\"C2\",data:[1,-1,centerLayer,false]},\n            counter: {name:\"C2'\",data:[1,0,centerLayer,false]}},\n            {clockwise: {name:\"C3\",data:[2,-1,centerLayer,false]},\n            counter: {name:\"C3'\",data:[2,0,centerLayer,false]}}\n          )\n\n        for (let i = 0; i < numLayers; i++){\n          for(let j = 0; j < faces.length; j++){\n            let baseNameSingle = ((i<10? \"0\" : \"\") + (i+1) + faces[j]);\n            let baseNameMulti = ((i<10? \"0\" : \"\") + (i+1) + faces[j].toLowerCase());\n\n            buttons.single.push({\n              clockwise: {face:faces[j], name:baseNameSingle, data:[j,-1,i+1,false]},\n              counter: {face:faces[j], name:baseNameSingle+\"'\",data:[j,0,i+1,false]}\n            });\n            if(i>0){\n              buttons.multi.push({\n                clockwise: {face:faces[j],name:baseNameMulti, data:[j,-1,i+1,true]},\n                counter: {face:faces[j],name:baseNameMulti+\"'\",data:[j,0,i+1,true]}\n              });\n            }\n          }\n        }\n\n        return buttons;\n    },\n\n    // For visual cube\n    rotatePoint : function (c1,c2,direction,p1,p2,rotation){\n        let theta = rotation*Math.PI/180;\n        if(direction < 0) theta*=-1; \n        return { p1 : (Math.cos(theta) * (p1-c1) - Math.sin(theta) * (p2-c2) + c1),\n                 p2 : (Math.sin(theta) * (p1-c1) + Math.cos(theta) * (p2-c2) + c2)}\n    },\n    \n    // For memory cube\n    rotatePoint2 : function (c1,c2,direction,p1,p2){\n        let theta = Math.PI/2;\n        if(direction < 0) theta*=-1; \n        return { p1 : (- Math.sin(theta) * (p2-c2) + c1),\n                 p2 :   (Math.sin(theta) * (p1-c1) + c2)}\n    }\n}\n\nexport default cube;","/* \n * \n *      Sasha Peters\n *      Created working function: Saturday, December 14, 2019\n *      \n */\n\nimport whiteSolver from \"./middles/white\"\nimport yellowSolver from \"./middles/yellow\"\nimport blueSolver from \"./middles/blue\"\nimport greenSolver from \"./middles/green\"\nimport orangeSolver from \"./middles/orange\"\n\nfunction solveMiddleLogic(cubeDimensions,rubiksObjectAtIndex,index){\n    \n    let dim = cubeDimensions;\n    let faceColor = Math.floor((index)/((dim-2)*(dim-2)));\n    let moveString = \"\";\n\n    // Coordinates organized\n    let current = {\n        x:rubiksObjectAtIndex[6],\n        y:rubiksObjectAtIndex[7],\n        z:rubiksObjectAtIndex[8]\n    };\n    let solved = {\n        x:rubiksObjectAtIndex[9],\n        y:rubiksObjectAtIndex[10],\n        z:rubiksObjectAtIndex[11]\n    };\n\n    \n\n    if(current.x===solved.x && current.y===solved.y && current.z===solved.z){\n        //console.log(\"SOLVED\");\n    }\n\n    else{\n        switch(faceColor){\n            case 0:\n                // Solved for all sizes\n                moveString = whiteSolver(current,solved,dim,index);\n                break;\n            case 1:\n                // Solved for all sizes\n                moveString = yellowSolver(current,solved,dim,index);\n                break;\n            case 2:\n                // Solved for all sizes\n                moveString = blueSolver(current,solved,dim);\n                break;\n            case 3:\n                // In Progress. Solved for 4x4\n                moveString = orangeSolver(current,solved,dim);\n                break;\n            case 4:\n                // In Progress. Solved for 4x4\n                moveString = greenSolver(current,solved,dim,index);\n                break;\n            default:\n                console.log(\"Should never reach here\");\n        }\n    }\n    return moveString;\n}\n\nexport default solveMiddleLogic;","import solveMiddleLogic from './solveMiddleLogic';\n\n// Lots of console logs while this section is still in development.\n// Might leave logs commented for future debugging if necessary.\n// function move(space,depth,side){\n//   return (space+(depth<10? \"0\":\"\") + depth + side);\n// }\n\nfunction solveMiddles(cube,dim,moveStringToArray,index,middles){\n\n    if(dim===2) {\n        return {solveState : 1};\n    }\n\n    let moveString = \"\";\n    // let whiteMiddleError = false;\n    // let yellowMiddleError = false;\n    // let blueMiddleError = false;\n    // let orangeMiddleError = false;\n\n    let solved = true;\n\n    const obj = {};\n\n    // Solve logic for 3x3\n    if(dim===3){\n      if(cube[4][7] === 0 && cube[10][8] === 2){\n      }\n      else{\n        if(cube[4][8]===2){ //U\n          cube[12][6]===0 ? moveString+=\"02R'\" : moveString+=\"02U'\";\n        }\n        else if(cube[4][6]===0){//L\n          cube[10][8]===2 ? moveString+=\"02U'\" : moveString+=\"02R'\";\n        }\n        else if(cube[4][6]===2){//R\n          cube[10][8]===2 ? moveString+=\"02U\" : moveString+=\"02R'\";\n        }\n        else if(cube[4][8]===0){//D\n          cube[12][6]===0 ? moveString+=\"02R\" : moveString+=\"02U'\";\n        }\n        else if(cube[4][7]===2){//B\n          cube[10][8]===2 ? moveString+=\"02U2\" : moveString+=\"02F'\";\n        }\n        else moveString+=\"02B'\"//F\n      }\n    }\n\n    // Solve logic for 4x4 and greater\n    else if(dim>3){\n\n      // Check if all middles are in place\n      for(let i = 0; i<=index&&i<((dim-2)*(dim-2))*5;i++){\n          if(cube[middles[i]][6]===cube[middles[i]][9]&&\n             cube[middles[i]][7]===cube[middles[i]][10]&&\n             cube[middles[i]][8]===cube[middles[i]][11]){\n             }else {\n              solved=false;\n             }\n      }\n      \n      if(!solved && index<((dim-2)*(dim-2))*5){ \n        if(dim%2 && index === ((((dim-2)*(dim-2))*2))){\n          \n          let oddTopMiddleIndex = ((((dim-2)*(dim-2))*2)+Math.floor((dim-2)*(dim-2)/2));\n\n          //console.log(\"Odd cube top middle index: \" + cube[middles[oddTopMiddleIndex]]);\n          if(cube[middles[oddTopMiddleIndex]][6]===cube[middles[oddTopMiddleIndex]][9] &&\n             cube[middles[oddTopMiddleIndex]][7]===cube[middles[oddTopMiddleIndex]][10] &&\n             cube[middles[oddTopMiddleIndex]][8]===cube[middles[oddTopMiddleIndex]][11]){\n            //console.log(\"Odd cube top middle in position, moving on with solver\");\n          }\n          else{\n            if(cube[middles[oddTopMiddleIndex]][6]===dim-1){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F'\";\n            }\n            else if(cube[middles[oddTopMiddleIndex]][8]===0){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F2\";\n            }\n            else if(cube[middles[oddTopMiddleIndex]][6]===0){\n              moveString += ((Math.ceil(dim/2))<10? \"0\" : \"\") + (Math.ceil(dim/2)) + \"F\";\n            }\n            //console.log(moveString);\n          }\n        }\n        //console.log(`Index: ${index}, Piece: ${middles[index]}`);\n        \n        moveString += ((moveString.length) ? \" \":\"\") + solveMiddleLogic(dim,cube[middles[index]],index);\n        //console.log(moveString + \"\\n-------------------------------\");\n      }\n    }\n\n    \n\n    if(dim<4){\n      const moveArray = moveStringToArray(moveString);\n      moveString.trim().length ? obj.moveSet = moveArray : obj.solveState = 1;\n    }\n    else{\n      if(index<((dim-2)*(dim-2))*5){\n\n        const moveArray = moveStringToArray(moveString);\n        moveString.trim().length ? obj.moveSet = moveArray : obj.rubiksIndex = index+1;\n\n      }\n\n      else{\n        //console.log(\"Ready for edge solver {solveState:0.1}\");\n        //console.log(moveString + \"\\n-------------------------------\\n\");\n        \n        if(dim===4){\n          obj.solveState = .1; obj.rubiksIndex = 0; obj.currentFunc = \"Solving\";\n          //obj.solveState = -1; obj.rubiksIndex = 0; obj.currentFunc = \"None\";\n        } else {\n          obj.solveState = .1; obj.rubiksIndex = 0; obj.currentFunc = \"Solving\";\n        }\n      }\n    }\n    return obj;\n}\n\nexport default solveMiddles;","import frontEdges from \"./edges/solveFrontEdgeSegments\";\nimport backEdges from \"./edges/solveBackEdgeSegments\";\nimport middleEdges from \"./edges/solveMiddleEdgeSegements\";\n\nfunction side(rubiksObject,color){\n    return rubiksObject.indexOf(color);\n}\n\nfunction solveEdgeLogic(cubeDimensions,rubiksObjectAtIndex,index,cube,edges){\n\n    const dim = cubeDimensions;\n    const edgesPerSection = 4;\n    const edgeLength = dim-2\n    const section = Math.floor(index/(edgeLength*edgesPerSection));\n    const whiteSide = side(rubiksObjectAtIndex,'white');\n    const yellowSide = side(rubiksObjectAtIndex,'yellow');\n    const blueSide = side(rubiksObjectAtIndex,'blue');\n    const greenSide = side(rubiksObjectAtIndex,'green');\n\n    let moveString = \"\";\n\n    // Coordinates organized\n    let current = {\n        x:rubiksObjectAtIndex[6],\n        y:rubiksObjectAtIndex[7],\n        z:rubiksObjectAtIndex[8]\n    };\n    let solved = {\n        x:rubiksObjectAtIndex[9],\n        y:rubiksObjectAtIndex[10],\n        z:rubiksObjectAtIndex[11]\n    };\n\n    if(current.x===solved.x && current.y===solved.y && current.z===solved.z){\n        if( (whiteSide === 0 && section === 0) ||\n            (yellowSide === 3 && section === 1)||\n            section===2){\n            //console.log(\"SOLVED\");\n            return \"\";\n        }      \n    }\n    switch(section){\n        case 0: \n            // Finished for now\n            moveString = frontEdges(current,solved,dim,whiteSide);\n            break;\n        case 1:\n            // Finished for now\n            moveString = backEdges(current,solved,dim,yellowSide);\n            break;\n        case 2:\n            // Not started\n            moveString = middleEdges(current,solved,dim,blueSide,greenSide);\n            break;\n        default:\n            console.log(\"Should never reach here\");\n    }\n    //console.log(\"Section: \", section);\n    // if(section === 0) console.log(\"White side: \",whiteSide);\n    // else if(section === 1) console.log(\"Yellow side: \",yellowSide);\n    // else if(blueSide > -1) console.log(\"Blue side: \", blueSide);\n    // else if(greenSide > -1) console.log(\"Green side: \", greenSide);\n    //console.log(\"Current: \",current,\"\\nSolved: \",solved);\n\n    return moveString;\n}\n\nexport default solveEdgeLogic;","import solveEdgeLogic from './solveEdgeLogic';\n\nfunction solveEdges(cube,dim,moveStringToArray,edges,index){\n    const numCubeEdges = 12;\n    const innerEdgeLength = dim-2;\n    const numEdges = innerEdgeLength * numCubeEdges;\n    let moveString = \"\";\n    const obj = {};\n\n    if (index < numEdges){\n        //console.log(`Index: ${index}, Piece: ${edges[index]}`);\n        moveString += ((moveString.length) ? \" \":\"\") + solveEdgeLogic(dim,cube[edges[index]],index,cube,edges,);\n        moveString.trim().length ? obj.moveSet = moveStringToArray(moveString) : obj.rubiksIndex = index+1;\n        //console.log(moveString + \"\\n-------------------------------\");\n    }\n\n    else if(dim < 5) {\n        //console.log(\"Ready to initiate 3x3 solver\");\n        obj.solveState = 1;\n        obj.rubiksIndex = 0;\n        obj.currentFunc = \"Solving\";\n    }\n    else {\n        obj.solveState = -1;\n        obj.rubiksIndex = 0;\n        obj.currentFunc = \"None\";\n    }\n\n    return obj;\n}\n\nexport default solveEdges;","import solveWhiteCross from \"./edges/solveWhiteCross\"\nimport solveWhiteCorners from \"./corners/solveWhiteCorners\"\nimport solveMiddleEdges from \"./edges/solveMiddleEdges\"\nimport solveYellowCross from \"./edges/solveYellowCross\"\nimport alignYellowCross from \"./edges/alignYellowCross\"\nimport solveYellowCorners from \"./corners/solveYellowCorners\"\nimport alignYellowCorners from \"./corners/alignYellowCorners\"\nimport solveMiddles from \"./solveMiddles\"\nimport solveEdges from \"./solveEdges\"\n\nconst CONSTANTS = {\n    SOLVE_MIDDLES: 0,\n    SOLVE_EDGES: 0.1,\n    SOLVE_WHITE_CROSS: 1,\n    SOLVE_WHITE_CORNERS: 2,\n    SOLVE_MIDDLE_EDGES: 3,\n    SOLVE_YELLOW_CROSS: 4,\n    ALIGN_YELLOW_CROSS: 5,\n    ALIGN_YELLOW_CORNERS: 6,\n    SOLVE_YELLOW_CORNERS: 7\n}\n\nfunction solver(solveState,rubiksObject,cubeDimension,moveStringToArray,solveMoves,rubiksIndex,middles,edges,corners){\n    console.log(solveState);\n    switch(solveState){\n        case CONSTANTS.SOLVE_MIDDLES:\n            return solveMiddles(rubiksObject,cubeDimension,moveStringToArray,rubiksIndex,middles);\n        case CONSTANTS.SOLVE_EDGES:\n            return solveEdges(rubiksObject,cubeDimension,moveStringToArray,edges,rubiksIndex);\n        case CONSTANTS.SOLVE_WHITE_CROSS:\n            return solveWhiteCross(rubiksObject,cubeDimension,moveStringToArray,edges);\n        case CONSTANTS.SOLVE_WHITE_CORNERS:\n            return solveWhiteCorners(rubiksObject,cubeDimension,moveStringToArray,corners);\n        case CONSTANTS.SOLVE_MIDDLE_EDGES:\n            return solveMiddleEdges(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.SOLVE_YELLOW_CROSS:\n            return solveYellowCross(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.ALIGN_YELLOW_CROSS:\n            return alignYellowCross(rubiksObject,moveStringToArray,edges,cubeDimension);\n        case CONSTANTS.ALIGN_YELLOW_CORNERS:\n            return alignYellowCorners(rubiksObject,cubeDimension,moveStringToArray,corners);\n        case CONSTANTS.SOLVE_YELLOW_CORNERS:\n            return solveYellowCorners(rubiksObject,cubeDimension,moveStringToArray,solveMoves,corners);\n        default:\n            console.log(\"invalid solve state\");\n    }\n}\n\nexport default solver;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Patterns from \"./components/Patterns\"\nimport Speeds from \"./components/Speeds\"\nimport Controls from \"./components/Controls\"\nimport MoveInput from \"./components/MoveInput\"\n//import Core from \"./components/Core\";\nimport ColorPicker from \"./components/ColorPicker\";\nimport * as THREE from \"three\";\nimport Stats from \"stats.js\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap';\nimport cube from './cubeFunctions/cube';\nimport solver from './solvers/solver';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\n// TODO:\n/*\n * 1. Start moving functions to other files STARTED\n * \n * 2. Color picker\n * \n * 3. UI Rework\n * \n * 4. Add changes to rotateFace and rotatePiece. Code can be greatly condensed\n *    by using a function with paramters to minimize repetative code. ATTEMPTED\n * \n * 5. Continue working on solvers. STARTED\n */\n\n\nclass App extends Component {\n  state = {\n    cubes : [],           // Contains visual cube\n    rubiksObject : [],    // Contains memory cube\n    blackObject: [],\n    speed : 7.5,          // Control individual piece rotation speed (don't change)\n    rotationSpeed : 350,  // Controls visual rotation speed\n    start : 7.5,          // Start value for a rotation or set of rotations\n    end : 0,              // End value for a roation or set of rotations\n    turnDirection : 0,    // Dictates whether the rotation is clockwise or counterclockwise\n    face : 0,             // The face being turned\n    cameraX : 5,          // Camera position x\n    cameraY : -5,         // Camera position y\n    cameraZ : 2,          // Camera position z\n    currentFunc : \"None\", // Variable used to display current function\n    moveLog : \"\",         // Keeps a log of all moves\n    moveSet : [],         // Algorithms queue moves through this variable\n    prevSet : [],\n    angle : 3.9,          // Camera angle\n    cubeDimension : null, // Cube dimensions. Ex: 3 => 3x3x3 cube\n    cubeDepth : 1,        // Used to determine rotation depth on cubes greater than 3\n    currentSpeed:\"Medium\",// Displays which speed is selected\n    moves : 0,            // Used by scramble functions\n    reload : false,       // Lets animate know when to reload the cube (after every move)\n    solveState : -1,      // Dictates progression of solve function\n    solveMoves : \"\",      // Keeps track of moves used during solve\n    facePosX : null,\n    facePosY : null,\n    facePosZ : null,\n    faceSide : null,\n    colorPicked: 'blue',\n    mouseFace : null,\n    mouseDown : false,\n    mousePos : null,\n    undoIndex : 0,        // Index to keep track of where undo/redo is\n    blockMoveLog : false, // Blocks adding move when undoing/redoing a move\n    previousPiece : null, // Keeps track of hovered face to not redraw\n    rubiksIndex : 0,      // Index to keep track of middles while solving\n    middles : [],         // Contains all middle segments\n    corners : [],         // Contains all corner segments         \n    showStats: false,     // Setting for stats\n    showMoveInput: false,  // Setting for custom move input\n    showControls: false,   // Setting for move controls\n    showHints: true,\n    showGuideArrows: true,\n    activeDragsInput: 0,  // Keeps track of draggable input\n    deltaPositionInput: {\n      x: 100, y: 100\n    },\n    controlledPositionInput: {\n      x: 0, y: 0\n    },\n    activeDragsControls: 0,// Keeps track of draggable buttons\n    deltaPositionControls: {\n      x: 100, y: 100\n    },\n    controlledPositionControls: {\n      x: 0, y: 0\n    },\n    isMulti: false,\n    isVisible: false,\n    isValidConfig:false,\n    hoverData : [],\n    showSolveController : false,\n    autoPlay : false,\n    playOne : false,\n    generateAllMoves: false,\n    isLocal : null,\n  };\n\n  // rotate colors on face (memory cube)\n  rotateFace = (cubeFace,direction,cubeDepth,isMulti,cD,object) => {\n    let cubeDimension = cD;\n    let centerPoint = cD/2-.5;\n    let rubiksObject = [...object];\n    let degrees = 90;\n    // const mapped = [\n    //   {side: 7, side1 : 6, side2 : 8, swap : [1,2,5,4]},\n    //   {side: 8, side1 : 6, side2 : 7, swap : [3,2,0,4]},\n    //   {side: 6, side1 : 7, side2 : 8, swap : [3,5,0,1]},\n    //   {side: 7, side1 : 6, side2 : 8, swap : [1,4,5,2]},\n    //   {side: 6, side1 : 7, side2 : 8, swap : [3,1,0,5]},\n    //   {side: 8, side1 : 6, side2 : 7, swap : [3,4,0,2]}\n    // ];\n\n    if(direction < 0)  degrees *=-1;\n\n    // Side 0 (white center piece)\n    if (cubeFace === 0){ \n        for(let i = 0; i < rubiksObject.length; i++){\n\n            // white side is y===0. add multi at all these\n            if ((isMulti || rubiksObject[i][7] > cubeDepth-2) &&\n                rubiksObject[i][7] < cubeDepth){\n\n                // Rotate rubiksObject pieces to new location generated by rotatePoint2\n                let newPoint = cube.rotatePoint2(centerPoint,\n                                                 centerPoint,\n                                                 degrees,\n                                                 rubiksObject[i][6],\n                                                 rubiksObject[i][8]);\n                rubiksObject[i][6] = newPoint.p1;\n                rubiksObject[i][8] = newPoint.p2;\n\n                // Unfortunately chunky\n                // Swaps colors around on the face to match rotations\n                if(direction === 0){\n                    let tempFace = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][2];\n                    rubiksObject[i][2] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][4];\n                    rubiksObject[i][4] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][4];\n                    rubiksObject[i][4] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][2];\n                    rubiksObject[i][2] = tempFace;\n                }\n            }\n        }\n    }\n\n    // Side 1 (blue center piece)\n    if (cubeFace === 1){\n        for(let i = 0; i < rubiksObject.length; i++){\n            if ((isMulti || rubiksObject[i][8] < cubeDimension+1-cubeDepth) &&\n                rubiksObject[i][8]>cubeDimension-1-cubeDepth){\n                let newPoint = cube.rotatePoint2(centerPoint,\n                                                 centerPoint,\n                                                 degrees,\n                                                 rubiksObject[i][6],\n                                                 rubiksObject[i][7]);\n                rubiksObject[i][6] = newPoint.p1;\n                rubiksObject[i][7] = newPoint.p2;\n                if(direction === 0){\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][2];\n                    rubiksObject[i][2] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][4];\n                    rubiksObject[i][4] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][4];\n                    rubiksObject[i][4] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][2];\n                    rubiksObject[i][2] = tempFace;\n                }\n            }\n        }\n    }\n    // Side 2 (red center piece)\n    if (cubeFace === 2){\n        for(let i = 0; i < rubiksObject.length; i++){\n            if ((isMulti || rubiksObject[i][6] < cubeDimension+1-cubeDepth) &&\n                rubiksObject[i][6]>cubeDimension-1-cubeDepth){\n                let newPoint = cube.rotatePoint2(centerPoint,\n                                                 centerPoint,\n                                                 degrees,\n                                                 rubiksObject[i][7],\n                                                 rubiksObject[i][8]);\n                rubiksObject[i][7] = newPoint.p1;\n                rubiksObject[i][8] = newPoint.p2;\n                if(direction === 0){\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][1];\n                    rubiksObject[i][1] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][5];\n                    rubiksObject[i][5] = tempFace;\n                }\n            }\n        }\n    }\n    // Side 3 (yellow center piece)\n    if (cubeFace === 3){\n        for(let i = 0; i < rubiksObject.length; i++){\n            if ((isMulti || rubiksObject[i][7] < cubeDimension+1-cubeDepth) && rubiksObject[i][7]>cubeDimension-1-cubeDepth){\n                let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][6],rubiksObject[i][8]);\n                rubiksObject[i][6] = newPoint.p1;\n                rubiksObject[i][8] = newPoint.p2;\n                if(direction === -1){\n                    let tempFace = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][4];\n                    rubiksObject[i][4] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][2];\n                    rubiksObject[i][2] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][2];\n                    rubiksObject[i][2] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][4];\n                    rubiksObject[i][4] = tempFace;\n                }\n            }\n        }\n    }\n    // Side 4 (orange center piece)\n    if (cubeFace === 4){\n        for(let i = 0; i < rubiksObject.length; i++){\n            if ((isMulti || rubiksObject[i][6] > cubeDepth-2) && rubiksObject[i][6] < cubeDepth){\n                let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][7],rubiksObject[i][8]);\n                rubiksObject[i][7] = newPoint.p1;\n                rubiksObject[i][8] = newPoint.p2;\n                if(direction === -1){\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][1];\n                    rubiksObject[i][1] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][5];\n                    rubiksObject[i][5] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][5];\n                    rubiksObject[i][5] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][1];\n                    rubiksObject[i][1] = tempFace;\n                }\n            }\n        } \n    }\n    // Side 5 (green center piece)\n    if (cubeFace === 5){\n        for(let i = 0; i < rubiksObject.length; i++){\n            if ((isMulti || rubiksObject[i][8] > cubeDepth-2) && rubiksObject[i][8] < cubeDepth){\n                let newPoint = cube.rotatePoint2(centerPoint,centerPoint,degrees,rubiksObject[i][6],rubiksObject[i][7]);\n                rubiksObject[i][6] = newPoint.p1;\n                rubiksObject[i][7] = newPoint.p2;\n                if(direction === -1){\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][4];\n                    rubiksObject[i][4] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][2];\n                    rubiksObject[i][2] = tempFace;\n                } else {\n                    let tempFace = rubiksObject[i][3];\n                    rubiksObject[i][3] = rubiksObject[i][2];\n                    rubiksObject[i][2] = rubiksObject[i][0];\n                    rubiksObject[i][0] = rubiksObject[i][4];\n                    rubiksObject[i][4] = tempFace;\n                }\n            }\n        } \n    }\n\n    //add the move updates to state\n    // this.setState({rubiksObject : rubiksObject}, () =>{\n    // });\n    return rubiksObject;\n  };\n\n  // rotate pieces attached to face (visual cube)\n  /**\n   * \n   * Possible Optimization!\n   * \n   * Instead of turning each piece individually,\n   * group the pieces to be turned and then turn the group.\n   * - Pros\n   *    - Less Code\n   *    - Easier on the renderer\n   * \n   * - Cons\n   *    - Not sure where to attempt implementation\n   * \n   * Development Stage: Trial\n   * \n   * - Resources\n   *    - https://jsfiddle.net/of1vfhzz/1/\n   *    - https://stackoverflow.com/questions/37779104/how-can-i-rotate-around-the-center-of-a-group-in-three-js\n   */\n  rotatePieces = (rotate,tempCubes) => {\n    this.setState({reload : true});\n\n    // Trial variable\n    // let tempGroup = new THREE.Group();\n\n    // state variables asigned for shorter names\n    let centerPoint = this.state.cubeDimension/2-.5;\n    let cubes = this.state.cubes;\n    let turnDirection = this.state.turnDirection;\n    let speed = this.state.speed;\n    let start = this.state.start;\n    let face = this.state.face;\n    let cubeDepth = this.state.cubeDepth;\n    let isMulti = this.state.isMulti;\n\n    this.setState({start : start+speed});\n\n    //Rotate white center piece Face\n    if(face === 0){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n\n        //implement isMulti for all of these comparisons\n        if((isMulti || cubes[i].position.y > cubeDepth-2) && cubes[i].position.y < cubeDepth){\n          \n          // Turn piece based on rotation direction\n          turnDirection<0 ? cubes[i].rotation.y += .1745*speed/10 : cubes[i].rotation.y -= .1745*speed/10;\n\n          // Calculate circular movement\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,cubes[i].position.x,cubes[i].position.z,speed);\n\n          // corrects rounding errors\n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          \n          // set new locations for face 0\n          cubes[i].position.x = newPoint.p1;\n          cubes[i].position.z = newPoint.p2;\n        }\n      }     \n    }\n    // blue\n    if(face === 1){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n        if((isMulti || cubes[i].position.z < this.state.cubeDimension + 1 - cubeDepth) && cubes[i].position.z > this.state.cubeDimension - 1 - cubeDepth){\n          turnDirection<0 ? cubes[i].rotation.z -= .1745*speed/10 : cubes[i].rotation.z += .1745*speed/10;\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,cubes[i].position.x,cubes[i].position.y,10*speed/10);\n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          cubes[i].position.x = newPoint.p1;\n          cubes[i].position.y = newPoint.p2;\n        }\n      }\n    }\n    // red\n    if(face === 2){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n        if((isMulti || tempCubes[i].position.x < this.state.cubeDimension + 1 - cubeDepth) && cubes[i].position.x > this.state.cubeDimension - 1 - cubeDepth){\n          turnDirection<0 ? tempCubes[i].rotation.x -= .1745*speed/10 : tempCubes[i].rotation.x += .1745*speed/10;\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.y,tempCubes[i].position.z,10*speed/10);\n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          tempCubes[i].position.y = newPoint.p1;\n          tempCubes[i].position.z = newPoint.p2;\n        }\n      }\n    }\n    // yellow\n    if(face === 3){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n        if((isMulti || tempCubes[i].position.y < this.state.cubeDimension + 1 - cubeDepth) && cubes[i].position.y > this.state.cubeDimension - 1 - cubeDepth){\n          turnDirection<0 ? tempCubes[i].rotation.y += .1745*speed/10 : tempCubes[i].rotation.y -= .1745*speed/10;\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.x,tempCubes[i].position.z,10*speed/10);\n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          tempCubes[i].position.x = newPoint.p1;\n          tempCubes[i].position.z = newPoint.p2;\n        }\n      }\n    }\n    // orange\n    if(face === 4){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n        if((isMulti || tempCubes[i].position.x > cubeDepth-2) && cubes[i].position.x < cubeDepth){\n          turnDirection<0 ? tempCubes[i].rotation.x -= .1745*speed/10 : tempCubes[i].rotation.x += .1745*speed/10;\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.y,tempCubes[i].position.z,10*speed/10);              \n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          tempCubes[i].position.y = newPoint.p1;\n          tempCubes[i].position.z = newPoint.p2;\n        }\n      }\n    }\n    // green\n    if(face === 5){\n      for(let i = 0; i<this.state.rubiksObject.length;i++){\n        if((isMulti || tempCubes[i].position.z > cubeDepth-2) && cubes[i].position.z < cubeDepth){\n          turnDirection<0 ? tempCubes[i].rotation.z -= .1745*speed/10 : tempCubes[i].rotation.z += .1745*speed/10;\n          let newPoint = rotate(centerPoint,centerPoint,turnDirection,tempCubes[i].position.x,tempCubes[i].position.y,10*speed/10);\n          if(start % 90 === 0){\n            newPoint.p1 = Math.round(newPoint.p1);\n            newPoint.p2 = Math.round(newPoint.p2);\n          }\n          tempCubes[i].position.x = newPoint.p1;\n          tempCubes[i].position.y = newPoint.p2;\n        }\n      }\n    } \n  }\n\n  // Bind keys to functions\n  keyBinds = key => {\n    switch (key){\n\n      case 'R':\n        this.rotateOneFace(key+\"'\",[2,0,1]);\n        break;\n      case 'r':\n        this.rotateOneFace(key.toUpperCase(),[2,-1,1]);\n        break;\n\n      case 'L':\n        this.rotateOneFace(key+\"'\",[4,0,1]);\n        break;\n      case 'l':\n        this.rotateOneFace(key.toUpperCase(),[4,-1,1]);\n        break;\n\n      case 'F':\n        this.rotateOneFace(key+\"'\",[0,0,1]);\n        break;\n      case 'f':\n        this.rotateOneFace(key.toUpperCase(),[0,-1,1]);\n        break;\n\n      case 'U':\n        this.rotateOneFace(key+\"'\",[1,0,1]);\n        break;\n      case 'u':\n        this.rotateOneFace(key.toUpperCase(),[1,-1,1]);\n        break;\n\n      case 'D':\n        this.rotateOneFace(key+\"'\",[5,0,1]);\n        break;\n      case 'd':\n        this.rotateOneFace(key.toUpperCase(),[5,-1,1]);\n        break;\n\n      case 'B':\n        this.rotateOneFace(key+\"'\",[3,0,1]);\n        break;\n      case 'b':\n        this.rotateOneFace(key.toUpperCase(),[3,-1,1]);\n        break;\n\n      case '1':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('white');\n        }\n        break;\n      case '2':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('blue');\n        }\n        break;\n      case '3':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('red');\n        }\n        break;\n      case '4':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('yellow');\n        }\n        break;\n      case '5':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('orange');\n        }\n        break;\n      case '6':\n        if(this.state.currentFunc==='Color Picker'){\n          this.changeColor('green');\n        }\n        break;\n\n      default:\n    }\n  }\n\n  // Handles key press event\n  keyHandling = e => {\n    if(e.keyCode <= 36 || e.keyCode >= 41) this.keyBinds(e.key);\n  }\n\n  onMouseDown( event ) {\n    if(!this.state.mouseDown){\n      if(this.state.currentFunc===\"Color Picker\"&&this.state.previousPiece){\n        let toFace = [2,4,3,0,1,5];\n        this.changeFaceColor({x:this.state.facePosX,y:this.state.facePosY,z:this.state.facePosZ},toFace[this.state.faceSide],this.state.colorPicked)\n      }\n      this.setState({mouseDown : true});  \n    }\n  }\n\n  onMouseUp( event ) {\n    this.setState({mouseDown : false});  \n  }\n\n  onSliderChange = (value) => {\n    switch(value){\n      case 0:\n        this.changeSpeed(1.5,1050,\"Slowest\");\n        break;\n      case 10:\n        this.changeSpeed(3,750,\"Slower\")\n        break;\n      case 20:\n        this.changeSpeed(5,500,\"Slow\")\n        break;\n      case 30:\n        this.changeSpeed(7.5,350,\"Medium\")\n        break;\n      case 40:\n        this.changeSpeed(10,250,\"Fast\")\n        break;\n      case 50:\n        this.changeSpeed(15,175,\"Faster\")\n        break;\n      case 60:\n        this.changeSpeed(30,100,\"Fastest\")\n        break;\n      case 70:\n        this.changeSpeed(90,20,\"Zoomin\")\n        break;\n      default:\n        console.log(\"unexpected behavior\");\n    }\n  }\n\n  // Functions to change speed\n  changeSpeed = (_speed,_rotationSpeed,_name) => {\n    if(this.state.currentFunc !== \"None\") return;\n    this.setState({currentSpeed: _name,speed: _speed, start: _speed, end: 0, rotationSpeed: _rotationSpeed});\n  }\n\n  changeColor = (color) => {\n    this.setState({colorPicked:color});\n  }\n\n  changeFaceColor = (pos,side,color) => {\n    let tempObj = [...this.state.rubiksObject]\n    for(let i = 0; i < tempObj.length; i++){\n      let tempCube = [...tempObj[i]];\n      if(tempCube[6]===pos.x && tempCube[7]===pos.y && tempCube[8]===pos.z){\n        tempCube[side]=color;\n      }\n      tempObj[i] = tempCube;\n    }\n    this.setState({rubiksObject:tempObj,isValidConfig:false},()=>{\n      this.reloadTurnedPieces('cp');\n      let obj = this.checkColors();\n      if(obj.error) this.setState({isValidConfig:false});\n      else if(obj.success) this.setState({isValidConfig:true});\n    });\n  }\n\n  setColorPickedCube = () => {\n    let rubiks = [...this.state.rubiksObject];\n    let generated = cube.generateSolved(this.state.cubeDimension,this.state.cubeDimension,this.state.cubeDimension);\n    let newGenerated = [];\n    let checked = [];\n    let otherChecked = [];\n\n    generated.tempArr.forEach(([...piece],pieceIndex) =>{\n      newGenerated.push([]);\n      rubiks.forEach(([...rubik],i) => {\n        let validPiece = 0;\n        piece.slice(0,6).sort().forEach((face,index) =>{\n          if(rubik.slice(0,6).sort()[index]===face) {validPiece++;}\n        });\n        \n        if(validPiece===6&&!checked.includes(pieceIndex)&&!otherChecked.includes(i)){\n          let validEdgePlacement = false;\n          if(piece.includes(\"edge\")&&!piece.includes(\"center\")){\n            if(piece[13]===rubik[13]) validEdgePlacement = true;\n          }\n          else{\n            validEdgePlacement = true;\n          }\n          if(validEdgePlacement){\n            checked.push(pieceIndex);\n            otherChecked.push(i);\n            newGenerated[pieceIndex]=[\n              ...rubik.slice(0,9),\n              ...piece.slice(9,14)\n            ];\n          }\n        }\n      }) \n    });\n\n    this.setState({rubiksObject:newGenerated,currentFunc : \"None\"},()=>{\n      console.log(newGenerated);\n      this.reloadTurnedPieces('check');\n    });\n  }\n\n  checkOccurences = (a1, a2) => {\n    let success = true;\n    let failedColors = [];\n    for(var i = 0; i < a1.length; i++) {\n      var count = 0;\n      for(var z = 0; z < a2.length; z++) {\n        if (a2[z] === a1[i]) count++;\n      }\n      if(count>1) {\n        success = false;\n        if(!failedColors.includes(a1[i])) failedColors.push(a1[i])\n      }\n\n    }\n    return {success,failedColors}\n  }\n\n  checkColors = () => {\n    let rubiksLength = this.state.rubiksObject.length;\n\n    let whiteCount = 0,blueCount = 0,redCount = 0,yellowCount = 0,orangeCount = 0,greenCount = 0;\n    let duplicateFace = false;\n    let duplicateColors = []\n    let matchedCount = 0;\n    let solveable = false;\n    let obj = {};\n    let validAmount = this.state.cubeDimension*this.state.cubeDimension;\n    let rubiks = [...this.state.rubiksObject];\n    let generated = cube.generateSolved(this.state.cubeDimension,this.state.cubeDimension,this.state.cubeDimension);\n    let newGenerated = [];\n\n    for(let i = 0; i < rubiks.length; i++){\n      let rubik = [...rubiks[i]];\n      const colors = ['white','blue','red','yellow','orange','green'];\n      if(rubik.includes('white')) whiteCount++;\n      if(rubik.includes('blue')) blueCount++;\n      if(rubik.includes('red')) redCount++;\n      if(rubik.includes('yellow')) yellowCount++;\n      if(rubik.includes('orange')) orangeCount++;\n      if(rubik.includes('green')) greenCount++;\n\n      let res = this.checkOccurences(colors,rubik);\n      if(!res.success){\n        duplicateFace = true;\n        res.failedColors.forEach(color => {\n          if(!duplicateColors.includes(color)) {\n            duplicateColors.push(color);\n          }\n        })\n      }\n    }\n\n    let checked = [];\n    let otherChecked = [];\n    generated.tempArr.forEach(([...piece],pieceIndex) =>{\n      newGenerated.push([]);\n      rubiks.forEach(([...rubik],i) => {\n        let validPiece = 0;\n        piece.slice(0,6).sort().forEach((face,index) =>{\n          if(rubik.slice(0,6).sort()[index]===face) {validPiece++;}\n        });\n        if(validPiece===6&&!checked.includes(pieceIndex)&&!otherChecked.includes(i)){\n          let validEdgePlacement = false;\n          if(piece.includes(\"edge\")&&!piece.includes(\"center\")){\n            if(piece[13]===rubik[13]) validEdgePlacement = true;\n          }\n          else{\n            validEdgePlacement = true;\n          }\n\n          if(validEdgePlacement){\n            matchedCount++;\n            checked.push(pieceIndex);\n            otherChecked.push(i);\n            newGenerated[pieceIndex]=[\n              ...rubik.slice(0,9),\n              ...piece.slice(9,14)\n            ];\n          }\n        }\n      }) \n    });\n\n    \n\n    if(whiteCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid white count [${whiteCount}] should be [${validAmount}]`);\n    }\n    if(blueCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid blue count [${blueCount}] should be [${validAmount}]`);\n    }\n    if(redCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid red count [${redCount}] should be [${validAmount}]`);\n    }\n    if(yellowCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid yellow count [${yellowCount}] should be [${validAmount}]`);\n    }\n    if(orangeCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid orange count [${orangeCount}] should be [${validAmount}]`);\n    }\n    if(greenCount!==validAmount){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`Invalid green count [${greenCount}] should be [${validAmount}]`);\n    }\n\n    if(duplicateFace){\n      duplicateColors.forEach(color => {\n        obj.error.push(`More than one occurence of [${color}] found on a piece.`);\n      });\n    }\n\n    if(matchedCount!==rubiksLength){\n      if(!obj.error) obj.error = [];\n      obj.error.push(`[${matchedCount}] out of [${rubiksLength-1}] matched. Missing [${(rubiksLength-1)-matchedCount}]`);\n    }\n\n    if(!obj.error){\n      console.log(generated);\n      console.log(newGenerated);\n      let solveData = this.generateAllSolveMoves(this.state,newGenerated);\n      solveable = solveData.solveable;\n      if(!solveable)\n      obj.error=[`This configuration of the cube is not solveable. Check that you've entered all pieces correctly.`];\n    }\n\n    console.log(obj.error);\n\n    if(!obj.error) {obj.success = true;obj.newGenerated = newGenerated}\n    return obj;\n  }\n\n  // Allows the user to undo a move\n  undo = () => {\n    let undoIndex = this.state.undoIndex;\n    let moveString = this.state.moveLog;\n    const moveArray = this.moveStringToArray(moveString);\n    if(moveString === \"\") return;\n\n    else if(this.state.currentFunc !== \"None\") return;\n\n    else if(moveArray.length-1-undoIndex >= 0)\n      this.setState({blockMoveLog : true,\n                     currentFunc : \"Undo\",\n                     moveSet : [moveArray[moveArray.length-1-undoIndex]],\n                     undoIndex : undoIndex + 1});\n  }\n\n  // Allows the user to redo a move\n  redo = () => {\n    if(this.state.currentFunc !== \"None\") return;\n    let undoIndex = this.state.undoIndex;\n    let moveString = this.state.moveLog;\n    if(moveString === \"\") return;\n    \n    const moveArray = this.moveStringToArray(moveString);\n    \n    let backwardsMove = moveArray[moveArray.length-undoIndex];\n    try{\n      backwardsMove.includes(\"'\") ? backwardsMove = backwardsMove.substring(0,3) : backwardsMove += \"'\";\n    }catch(err){\n      return;\n    }\n\n    if(undoIndex > 0)\n      this.setState({blockMoveLog : true,\n                     currentFunc : \"Redo\",\n                     moveSet : [backwardsMove],\n                     undoIndex : undoIndex - 1});\n  }\n\n  // Control when single buttons can be clicked\n  rotateOneFace = (e,vals) => {\n    if (vals.length < 4) vals.push(false);\n\n    if(this.state.currentFunc === \"None\") {\n\n      let cD = this.state.cubeDimension;\n      let rubiksObject = this.state.rubiksObject;\n      let blockMoveLog = this.state.blockMoveLog;\n      let moveLog = this.state.moveLog;\n      let solveMoves = this.state.solveMoves;\n      let solveState = this.state.solveState;\n      let end = this.state.end;\n      let obj = this.rotateCubeFace(vals[0],vals[1],vals[2],vals[3],blockMoveLog,moveLog,solveMoves,end,solveState);\n\n      obj.currentFunc = e;\n      obj.rubiksObject = this.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n\n      this.setState(obj);\n    }\n  }\n\n  // Controls camera movements\n  // *** Needs to be reworked ***\n  rotateCamera = (key) => {\n    let y = this.state.cameraY;\n    //let x = this.state.cameraX;\n    //let z = this.state.cameraZ;\n    //let formula = this.state.cubeDimension+2+(y+1)/20;\n    if(key === 37){ // left\n      this.setState({angle: this.state.angle+.075}); \n    }\n    if(key === 38){ // up\n      if(y < this.state.cubeDimension+2) this.setState({cameraY: y + .5});\n    }\n    if(key === 39){ // right\n      this.setState({angle: this.state.angle-.075});\n    }\n    if(key === 40){ // down\n      \n      if(y > -(this.state.cubeDimension+2)) this.setState({cameraY: y - .5});\n    }\n  }\n\n  // Changes values in state to trigger face rotation\n  rotateCubeFace = (face,direction,cubeDepth,isMulti,blockMoveLog,moveLog,solveMoves,end,solveState) => {\n    let obj = {};\n    if(!blockMoveLog){\n      \n      let tempMove = \"\";\n      cubeDepth<10 ? tempMove+=\"0\"+cubeDepth : tempMove += cubeDepth;\n      if(face === 0) !isMulti ? tempMove += \"F\" : tempMove += \"f\";\n      else if(face === 1) !isMulti ? tempMove += \"U\" : tempMove += \"u\";\n      else if(face === 2) !isMulti ? tempMove += \"R\" : tempMove += \"r\";\n      else if(face === 3) !isMulti ? tempMove += \"B\" : tempMove += \"b\";\n      else if(face === 4) !isMulti ? tempMove += \"L\" : tempMove += \"l\";\n      else if(face === 5) !isMulti ? tempMove += \"D\" : tempMove += \"d\";\n      if(direction === -1) tempMove += \"'\";\n\n      moveLog.length > 0 ?\n        obj.moveLog = (moveLog + \" \" + tempMove) :\n        obj.moveLog = (moveLog + tempMove);\n      \n      // Keeps tracks of solver's moves\n      if(solveState > -1) \n        obj.solveMoves = (solveMoves.length ? solveMoves + \" \" + tempMove : solveMoves + tempMove);\n    }\n\n    // Faces on opposite side of cube rotate backwards\n    if(face>2 && direction === -1) direction = 0;\n\n    else if (face>2 && direction === 0) direction = -1;\n\n    obj.blockMoveLog = false;\n    obj.face = face; // used\n    obj.turnDirection = direction; // used\n    obj.end = end + 90; \n    obj.cubeDepth = cubeDepth; // used\n    obj.isMulti = isMulti; // used\n    \n\n    return obj;\n  }\n\n  // Takes prebuilt algorithms and converts to moves\n  // allow for C,c\n  algorithm = (moveString,moveName) => {\n    if(this.state.currentFunc !== \"None\") return;\n    const moveArray = this.moveStringToArray(moveString);\n    //console.log(moveArray);\n    this.setState({currentFunc : moveName, moveSet : moveArray});\n  }\n\n  // Refreshes page to reset cube\n  reset = () => {\n    let cD = this.state.cubeDimension;\n    let generated = cube.generateSolved(cD,cD,cD);\n    let rubiksObject = generated.tempArr;\n    this.setState({rubiksObject,moveSet: [],currentFunc : \"None\",solveState : -1,autoPlay : false, playOne : false, isVisible : false, hoverData : [], solveMoves : \"\", prevSet : []},()=>{\n      this.reloadTurnedPieces('all');\n    });\n    //window.location.reload();\n  }\n\n  // Generates a random move\n  scramble = () => {\n    let maxDepth = Math.ceil((this.state.cubeDimension/2));\n    let randFace = Math.floor((Math.random() * 6));\n    let randTurn = Math.floor((Math.random() * 2)-1);\n    let randIsMulti = Math.floor((Math.random() * 2));\n    let randDepth = 1;\n    let cD = this.state.cubeDimension;\n    let rubiksObject = this.state.rubiksObject;\n    let blockMoveLog = this.state.blockMoveLog;\n    let moveLog = this.state.moveLog;\n    let solveMoves = this.state.solveMoves;\n    let solveState = this.state.solveState;\n    let end = this.state.end;\n\n    if(cD>2) \n      randDepth = Math.floor((Math.random() * maxDepth)) + 1;\n\n    if(randDepth === Math.ceil(cD/2) && cD%2)\n      randIsMulti=0;\n\n    let obj = this.rotateCubeFace(randFace, randTurn,randDepth,randIsMulti,blockMoveLog,moveLog,solveMoves,end,solveState);\n    obj.moves = this.state.moves+1;\n    obj.rubiksObject = this.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n\n    this.setState(obj);\n  }\n\n  // Changes state active function to begin scrambling\n  beginScramble = () => {\n    if(this.state.currentFunc === \"None\") this.setState({currentFunc : \"Scrambling\"});\n  }\n\n  // Starts the solve process\n  beginSolve = () => {\n    if(this.state.currentFunc !== \"None\") return;\n    this.setState({currentFunc : \"Solving\",solveState : 0,autoPlay : false, playOne : false, solveOnce : true});\n  }\n\n  stopSolve = () => {\n    this.setState({currentFunc : \"None\",solveState : -1,autoPlay : false, playOne : false, isVisible : false, hoverData : [], solveMoves : \"\", prevSet : [], moveSet : []});\n  }\n\n  beginColorPicker = () => {\n    let cD = this.state.cubeDimension;\n    if(this.state.currentFunc !== \"None\") return;\n    const blank = cube.generateBlank(cD,cD,cD);\n    this.setState({currentFunc : \"Color Picker\",rubiksObject: blank},()=>{\n      this.reloadTurnedPieces('cp');\n    });\n  }\n\n  endColorPicker = () => {\n    this.reset();\n    this.setState({currentFunc : \"None\"});\n  }\n\n  rewindSolve = () => {\n    if(this.state.playOne) return;\n    let tempPrev = this.state.prevSet;\n    let tempMoveSet = this.state.moveSet;\n    let lastEl = tempPrev[tempPrev.length-1];\n    let popped = tempPrev.pop();\n    popped[popped.length-1]===\"'\" ? popped=popped.slice(0,3) : popped+=\"'\";\n    let newMoveSet = [popped,lastEl,...tempMoveSet];\n    this.setState({\n      playOne:true,\n      prevSet:tempPrev,\n      moveSet:newMoveSet\n    })\n  }\n\n  handleDragInput = (e, ui) => {\n    const {x, y} = this.state.deltaPositionInput;\n    this.setState({\n      deltaPositionInput: {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY,\n      }\n    });\n  };\n\n  onStartInput = () => {\n    this.setState({activeDragsInput: this.state.activeDragsInput+1});\n  };\n\n  onStopInput = () => {\n    this.setState({activeDragsInput: this.state.activeDragsInput-1});\n  };\n\n  handleDragControls = (e, ui) => {\n    const {x, y} = this.state.deltaPositionControls;\n    this.setState({\n      deltaPositionControls: {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY,\n      }\n    });\n  };\n\n  onStartControls = () => {\n    this.setState({activeDragsControls: this.state.activeDragsControls+1});\n  };\n\n  onStopControls = () => {\n    this.setState({activeDragsControls: this.state.activeDragsControls-1});\n  };\n\n  convertMoveToData = (move) => {\n    if(move.length < 2) return false;\n    let data = [];\n    let face = ['F','U','R','B','L','D']\n    data.push(face.indexOf(move[2].toUpperCase()));\n    move.length < 4 ? data.push(-1) : data.push(0);\n    move[0]==='0' ? data.push(parseInt(move[1])) : data.push(parseInt(move.substring(0, 2)))\n    move[2].toUpperCase() === move[2] ? data.push(false) : data.push(true);\n    return data;\n  }\n\n  convertDataToMove = (data) => {\n    \n  }\n\n  mouseOver = (name,data) => {\n    if(this.state.showHints)\n      this.setState({\n        isVisible: true,\n        hoverData: data\n      });\n  }\n\n  mouseLeave = () => {\n    this.setState({\n      isVisible: false,\n      hoverData: []\n    });\n  }\n\n  // Converts move string to move array\n  // handle move short hand characters. ex: fx => 01Fx 02Fx; x = \"\" or \"'\" or \"2\"\n  moveStringToArray = str => {\n    let tempArray = str.split(\" \");\n    let moveArray = [];\n\n    // Run through split string and create duplicates where needed\n    // Handle other short hands\n    for(let i = 0; i < tempArray.length;i++){\n      if(tempArray[i].length === 4 && tempArray[i].slice(3,4)===\"2\") {\n        let tempMove = tempArray[i].slice(0,3);\n        moveArray.push(tempMove);\n        moveArray.push(tempMove);\n      }\n      else {\n        moveArray.push(tempArray[i]);\n      }\n    }\n    return moveArray;\n  }\n\n  // Generalized move function. Takes in array of moves and parse the moves\n  parseMoveArray = (moveArray) =>{\n    //if(typeof moveArray === 'string') moveArray = [moveArray];\n    let shifted = moveArray.shift();\n\n    let tempFace = 0;\n    let tempDirection = -1;\n    let tempDepth = 1;\n    let tempIsMulti = false;\n\n    if(shifted){\n      if(shifted.length === 4) tempDirection=0;\n      tempDepth = parseInt(shifted.slice(0,2));\n\n      if(shifted.slice(2,3) === shifted.slice(2,3).toLowerCase()){\n        tempIsMulti = true;\n      }\n\n      if(shifted.slice(2,3).toUpperCase() === \"U\") tempFace = 1;\n      else if(shifted.slice(2,3).toUpperCase() === \"F\") tempFace = 0;\n      else if(shifted.slice(2,3).toUpperCase() === \"B\") tempFace = 3;\n      else if(shifted.slice(2,3).toUpperCase() === \"R\") tempFace = 2;\n      else if(shifted.slice(2,3).toUpperCase() === \"L\") tempFace = 4;\n      else if(shifted.slice(2,3).toUpperCase() === \"D\") tempFace = 5;\n\n      return [tempFace,tempDirection,tempDepth,tempIsMulti];\n    }\n  }\n\n  /* Each piece that's rotated has it's rotation disrupted on other planes.\n   *\n   * This function solves that issue by setting all piece rotation back to zero\n   * and then placing colors to look as though the piece were still rotated.\n   * \n   * Some optimizations have been added. Undersides and insides of some pieces\n   * appear white instead of black initially but does not disrupt the rest of\n   * the cube. Likely won't be changed since that optimization greatly improves\n   * run time.\n   */\n  reloadTurnedPieces = (pos) => {\n    let cubes = [...this.state.cubes];\n    \n    for(let i = 0; i<this.state.rubiksObject.length;i++){\n      \n      let tempCube = {...cubes[i]};\n      let rotation = tempCube.rotation;\n\n\n      if(pos === tempCube.position){\n        tempCube.opacity=1;\n        cubes[i] = tempCube;\n      }\n\n      else if((rotation.x !== 0 || rotation.y !== 0 ||rotation.z !== 0) || \n           (pos==='all'||pos==='cp'||pos==='check')){\n        if(pos==='all'||pos==='cp') {\n          tempCube.position.x=this.state.rubiksObject[i][9];\n          tempCube.position.y=this.state.rubiksObject[i][10];\n          tempCube.position.z=this.state.rubiksObject[i][11];\n        }\n        if(pos==='check') {\n          tempCube.position.x=this.state.rubiksObject[i][6];\n          tempCube.position.y=this.state.rubiksObject[i][7];\n          tempCube.position.z=this.state.rubiksObject[i][8];\n        }\n        tempCube.material[0].color = new THREE.Color(this.state.rubiksObject[i][2]);\n        tempCube.material[1].color = new THREE.Color(this.state.rubiksObject[i][4]);\n        tempCube.material[2].color = new THREE.Color(this.state.rubiksObject[i][3]);\n        tempCube.material[3].color = new THREE.Color(this.state.rubiksObject[i][0]);\n        tempCube.material[4].color = new THREE.Color(this.state.rubiksObject[i][1]);\n        tempCube.material[5].color = new THREE.Color(this.state.rubiksObject[i][5]);\n        \n        tempCube.rotation.x = 0; tempCube.rotation.y = 0; tempCube.rotation.z = 0;\n        cubes[i] = tempCube;\n        \n      }\n    }\n\n    this.setState({cubes,reload : false});\n  }\n\n  // function to solves edges on cubes greater than 3x3x3\n  // move to other file\n  solveMultipleEdges = () =>{\n    // code here\n  }\n\n  // Changes the settings by passing setting to change and new val for the setting\n  changeSettings (settingToChange,newVals) {\n    switch(settingToChange){\n      case 'displayStats':\n        this.state.showStats ? document.body.children[9].style.display = \"none\" : document.body.children[9].style.display = \"\";\n        this.setState({showStats : !this.state.showStats});\n        break;\n      case 'displayMoveInput':\n        this.setState({showMoveInput:!this.state.showMoveInput});\n        break;\n      case 'displayControls':\n        this.setState({showControls:!this.state.showControls});\n        break;\n      case 'displayHints':\n        this.setState({showHints:!this.state.showHints});\n        break;\n      default:\n        console.log(\"Invalid Setting\");\n    }\n  }\n  \n  // Remove event listener on compenent unmount\t\n  componentWillUnmount() {    \n    window.removeEventListener(\"keydown\", this.keyHandling);\n  }\n\n  // Gets the url to be parsed\n  getSizeFromUrl() {\n    let limit = 50;\n    let cD;\n    \n    let parts = window.location.href.split('/');\n    let checkID = parts[parts.length-1][0]+parts[parts.length-1][1]+parts[parts.length-1][2];\n\n    if(this.state.isLocal===null){\n      if(parts[2].substr(0,9)==='localhost'){\n        this.setState({isLocal:true});\n      }\n      else {\n        this.setState({isLocal:false});\n      }\n    }\n\n    if(checkID === 'id='){\n      cD = parseInt(parts[parts.length-1].substr(3));\n    }\n\n    if (cD <= limit && cD >= 2) return cD; else return 3;\n  }\n\n  calculateTurnAtFace(coord1,compare1,coord2,compare2,piece1,piece2,dir1,dir2){\n    if(Math.abs(coord1)>=Math.abs(coord2)&&(Math.abs(coord1)>.1)) \n      return {calculated : compare1?dir1:(dir1+\"'\"),depth : piece2}\n      \n    if(Math.abs(coord2)>Math.abs(coord1)&&(Math.abs(coord2)>.1)) {\n      return {calculated : compare2?dir2:(dir2+\"'\"),depth : piece1}\n    }\n    return null;\n  }\n\n  calculateTurn(current,previous,piece,pieceFace,cD){\n\n    let calculated = null;\n    let depth = null;\n    let turn = null;\n\n    // difference in initial mouse down location and current mouse down\n    const dif = { \n      x: (previous.x-current.x), \n      y: (previous.y-current.y), \n      z: (previous.z-current.z)\n    }\n\n    if(current.x===previous.x && current.y === previous.y && current.z===previous.z){\n      return null;\n    }\n\n    //determines the move based on mouse difference from click to new position\n    switch(pieceFace){\n      case 0:\n        turn = this.calculateTurnAtFace(dif.z,dif.z<0,dif.x,dif.x>=0,cD-piece.z,cD-piece.x,\"R\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 1:\n        turn = this.calculateTurnAtFace(dif.x,dif.x<=0,dif.y,dif.y<0,cD-piece.x,piece.y+1,\"F\",\"R\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 2:\n        turn = this.calculateTurnAtFace(dif.z,dif.z>0,dif.y,dif.y>0,cD-piece.z,piece.y+1,\"F\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 3:\n        turn = this.calculateTurnAtFace(dif.z,dif.z>0,dif.x,dif.x<=0,cD-piece.z,cD-piece.x,\"R\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 4:\n        turn = this.calculateTurnAtFace(dif.z,dif.z<0,dif.y,dif.y<0,cD-piece.z,piece.y+1,\"F\",\"U\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      case 5:\n        turn = this.calculateTurnAtFace(dif.x,dif.x>=0,dif.y,dif.y>0,cD-piece.x,piece.y+1,\"F\",\"R\");\n        calculated = turn.calculated; depth = turn.depth;\n        break;\n      default:\n    }\n\n    //console.log(\"{ turn: \" + calculated + \" } , { depth: \" + depth + \" }\");\n    return ((depth<10? \"0\" : \"\") + depth+calculated);\n  }\n\n  // Proto function for feature to be built later\n  calculateTheta(){\n\n  }\n\n  generateAllSolveMoves = (state,rubiksObject) =>{\n    let beforeObject = rubiksObject.map(e=>[...e]);\n    console.log(beforeObject);\n    let tempState = {...state}, solvedSet = \"\";\n    let currentIndex = null;\n    let previousIndex = null;\n    let indexOccurence = 0;\n    let error = false;\n    let counter = 0;\n    if(tempState.currentFunc === 'Color Picker'){\n      tempState.solveState = 0;\n      tempState.currentFunc = \"Solving\";\n      tempState.rubiksObject = rubiksObject.map(e=>[...e]);\n    }\n    while(tempState.currentFunc===\"Solving\"){\n      \n      if(!tempState.moveSet || !tempState.moveSet.length) {\n        currentIndex=tempState.rubiksIndex;\n        if(currentIndex===previousIndex) indexOccurence = indexOccurence+1;\n        else indexOccurence = 0;\n        \n        let moves = solver(tempState.solveState,tempState.rubiksObject,tempState.cubeDimension,this.moveStringToArray,\n          tempState.solveMoves,tempState.rubiksIndex,tempState.middles,tempState.edges,tempState.corners);\n        if(moves.moveSet){\n          let temp = [];\n          for(let i = 0; i<moves.moveSet.length; i++){\n            \n            if(moves.moveSet[i]===''||moves.moveSet[i]===' '||moves.moveSet[i][0]===\"N\"||moves.moveSet[i]===\"'\");\n            else temp.push(moves.moveSet[i]);\n          }\n          moves.moveSet = temp;\n        }\n        if((indexOccurence>10 && tempState.solveState<1)||counter>10000) {\n          error = true;\n          //console.log(JSON.stringify({beforeObject}));\n          moves.currentFunc=\"None\";\n        }\n        if(moves.currentFunc && moves.currentFunc===\"None\") solvedSet = tempState.solveMoves;\n        counter++;\n        tempState = {...tempState,...moves};\n        previousIndex=currentIndex;\n      }\n      else{\n        let cD = tempState.cubeDimension;\n        let blockMoveLog = tempState.blockMoveLog;\n        let moveLog = tempState.moveLog;\n        let solveMoves = tempState.solveMoves;\n        let rubiksObject = tempState.rubiksObject;\n        let end = tempState.end;\n        let solveState = tempState.solveState;\n        let moveData = this.parseMoveArray(tempState.moveSet); // generates data for next move\n        let obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n        obj.rubiksObject = this.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,rubiksObject);\n        tempState = {...tempState,...obj};\n      }\n    }\n    let splitSet = solvedSet.split(\" \");\n    if(splitSet[0][0]===\"N\"||splitSet[0][0]===\"'\") splitSet.shift();\n    let moveSet = []\n    splitSet.forEach(e => e[e.length-1]===\"'\"? moveSet.push(e.replace(\"'\",\"\")):moveSet.push(e+\"'\"));\n    let extraMoves = 0;\n\n    for(let i = 0; i < moveSet.length-2; i++){\n      if(moveSet[i].substring(0,3)===moveSet[i+1].substring(0,3) && moveSet[i].length!==moveSet[i+1].length){\n        moveSet[i]=\"\";\n        moveSet[i+1]=\"\";\n        extraMoves+=2;\n      }\n    }\n\n    for(let i = 0; i < moveSet.length-3; i++){\n      if(moveSet[i]===moveSet[i+1] && moveSet[i+1]===moveSet[i+2]){\n        if(moveSet[i].length===3){moveSet[i]+=\"'\"}\n        else{moveSet[i]=moveSet[i].substring(0,3)}\n        moveSet[i+1]=\"\";\n        moveSet[i+2]=\"\";\n        extraMoves+=2;\n      }\n    }\n\n    let temp = [];\n    for(let i = 0; i<moveSet.length; i++){\n      \n      if(moveSet[i]===''||moveSet[i]===' '||moveSet[i][0]===\"N\"||moveSet[i]===\"'\"){}\n      else {temp.push(moveSet[i]);}\n    }\n    moveSet = temp;\n    \n    console.log(\"Pruned moves: \",extraMoves);\n    console.log(\"Number of moves: \\n\",moveSet.length);\n    if(error) {\n      console.log(\"Stopped due to probable infinite loop\");\n    }\n    return {moveSet,rubiksObject : beforeObject,solveable:!error};\n  }\n\n  // Initialization and animation functions\n  componentDidMount() {\n\n    let cD = this.getSizeFromUrl();\n    let generated = cube.generateSolved(cD,cD,cD);\n    let rubiksObject = generated.tempArr;\n    let tempCubes = [];\n    let stats = new Stats();\n    const groups = [[],[],[],[],[],[]];\n    let previousMousePos = null;\n    let piecePos = null;\n    let intersected = null;\n\n    // === THREE.JS VARIABLES ===\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, .1, 1000 );\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    let raycaster = new THREE.Raycaster();\n    let mouse = new THREE.Vector2();\n    let cubeGeometry = new THREE.BoxGeometry( 1, 1, 1 );\n    let geometry = new THREE.PlaneGeometry(1,1);\n    //const loader = new THREE.TextureLoader().load('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSp2vqlj5dzmGwQfEBy7yNWfDvDVm6mgsA4768bcpsJDmdp9t0g7w&s');\n    const loader = new THREE.TextureLoader().load('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQW92XE-j1aJzRMI9kvvMZIf2VikZzzdEI87zl4rWgHMJBNJ9iw7A&s');\n    //const loader1 = new THREE.TextureLoader().load('https://cdn0.iconfinder.com/data/icons/arrows-11/100/arrow-1-512.png');\n    const loader1 = new THREE.TextureLoader().load('https://cdn2.iconfinder.com/data/icons/communication-language/100/Up_Arrow-01-512.png');\n    let material = new THREE.MeshBasicMaterial( {map:loader1,transparent: true,color: 'black', opacity:'.8',side: THREE.DoubleSide} );\n    let tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );\n\n    let windowHeight = window.innerHeight;\n\n    function onMouseMove( event ) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n      mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;   \n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      \n      // adjust the FOV\n      camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );\n      \n      camera.updateProjectionMatrix();\n      camera.lookAt( scene.position );\n\n      renderer.setSize( window.innerWidth, window.innerHeight-10 );\n      renderer.render( scene, camera );\n    }\n\n    // Bind event listeners to window\n    window.addEventListener(\"keydown\", this.keyHandling);\n    window.addEventListener(\"mousemove\", onMouseMove, false );\n    window.addEventListener(\"mousedown\", this.onMouseDown.bind(this), false );\n    window.addEventListener(\"mouseup\", this.onMouseUp.bind(this), false );\n    window.addEventListener(\"resize\", onWindowResize, false );\n    \n    // Set background color and size\n    renderer.setClearColor(new THREE.Color(\"black\"),0);\n    renderer.domElement.className = \"canvas\";\n    renderer.setSize( window.innerWidth, window.innerHeight);\n    document.body.children[5].appendChild( renderer.domElement );\n\n    stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n    document.body.appendChild( stats.dom);\n    document.body.children[9].style.display = \"none\"\n\n    // Prevents bluring\n    loader.anisotropy = renderer.capabilities.getMaxAnisotropy();\n    loader1.anisotropy = renderer.capabilities.getMaxAnisotropy();\n\n    // generate cubes with face colors based off memory cube\n    for(let i = 0; i < rubiksObject.length; i++){\n\n      // Store x,y,z of memory cube in easier to read variables\n      let cubeX = rubiksObject[i][6];\n      let cubeY = rubiksObject[i][7];\n      let cubeZ = rubiksObject[i][8];\n\n      // Map textures to each face to look nice and then color over\n      const cubeMaterials = [\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][2], side: THREE.FrontSide}),\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][4], side: THREE.FrontSide}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][3], side: THREE.FrontSide}),\n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1,}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][1], side: THREE.FrontSide}), \n        new THREE.MeshBasicMaterial({ map: loader ,transparent: true,opacity:1, color:rubiksObject[i][5], side: THREE.FrontSide}), \n      ];\n    \n      // Add the new cube to temp cubes\n      tempCubes[i] = new THREE.Mesh(cubeGeometry, cubeMaterials);\n      //group.add( tempCubes[i] );\n      // position piece based off memory cube\n      tempCubes[i].translateX(cubeX);\n      tempCubes[i].translateY(cubeY);\n      tempCubes[i].translateZ(cubeZ); \n    }\n\n    // Translate cube so center of cube is 0,0,0\n    scene.translateX(.5-cD/2);\n    scene.translateY(.5-cD/2);\n    scene.translateZ(.5-cD/2);\n\n    // Allows for drag to rotate camera\n    const controls = new OrbitControls( camera , renderer.domElement);\n    controls.enableDamping = true;   //damping \n    controls.dampingFactor = 0.15;   //damping inertia\n    controls.enableZoom = true;      //Zooming\n    controls.autoRotate = false;     //Enable auto rotation\n    controls.minDistance = (2+cD);\n    controls.maxDistance = (2+cD)+20;\n    controls.keys = {\n      LEFT: null, //left arrow\n      UP: null, // up arrow\n      RIGHT: null, // right arrow\n      BOTTOM: null // down arrow\n    };\n\n    controls.addEventListener(\"change\", () => {\n      if (renderer) renderer.render(scene, camera);\n    });\n\n    // generate side 4 and 2 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)+.51);\n            tempPlane.translateY((cD-1)-j);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)+.51);\n            tempPlaneOther.translateY((cD-1)-j);\n            tempPlaneOther.rotateZ(Math.PI);\n          }\n          else if(i===1){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY((cD-1)+.51);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY((cD-1)+.51);\n            tempPlaneOther.rotateX(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ(-.51);\n            tempPlane.translateY((cD-1)-j);\n            tempPlane.rotateX(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ(-.51);\n            tempPlaneOther.translateY((cD-1)-j);\n          }\n          else if(i===3){\n            tempPlane.translateX(cD-1-k);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(-.51);\n            tempPlane.rotateX(-Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n\n            tempPlaneOther.translateX(cD-1-k);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(-.51);\n            tempPlaneOther.rotateX(-Math.PI/2);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      groups[2].push(tempGroup);\n      groups[5].push(tempGroupOther);\n    }\n\n    // generate side 0 and 3 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)+.51);\n            tempPlane.translateY(k);\n            tempPlane.rotateZ(-Math.PI/2);\n            \n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)+.51);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateZ(Math.PI/2);\n          }\n          else if(i===1){\n            tempPlane.translateX((cD-1)+.51);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)+.51);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ(-.51);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(Math.PI);\n            tempPlane.rotateZ(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ(-.51);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateZ(-Math.PI/2);\n          }\n          else if(i===3){\n            tempPlane.translateX(-.51);\n            tempPlane.translateZ((cD-1)-j);\n            tempPlane.translateY(k);\n            tempPlane.rotateX(-Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(-Math.PI/2);\n\n            tempPlaneOther.translateX(-.51);\n            tempPlaneOther.translateZ((cD-1)-j);\n            tempPlaneOther.translateY(k);\n            tempPlaneOther.rotateX(-Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n            //tempPlaneOther.rotateZ(Math.PI);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      \n      groups[0].push(tempGroup);     //Clockwise for white, counter for yellow\n      groups[3].push(tempGroupOther);//Counter for white, clockwise for yellow\n    }\n\n    // generate side 1 and 5 move hints\n    for(let k = 0; k < cD; k++){\n      let tempGroup = new THREE.Group();\n      let tempGroupOther = new THREE.Group();\n      for(let i = 0; i < 4; i++){\n        for(let j = 0; j<cD;j++){\n          let tempPlane = new THREE.Mesh( geometry, material );\n          let tempPlaneOther = new THREE.Mesh( geometry, material );\n          if(i===0){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)+.51);\n            tempPlane.rotateZ(-Math.PI/2);\n            tempPlane.rotateY(Math.PI/2);\n            \n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)+.51);\n            tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateZ(Math.PI/2);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===1){\n            tempPlane.translateX((cD-1)+.51);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)-j);\n            //tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)+.51);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)-j);\n            //tempPlaneOther.rotateX(Math.PI);\n            tempPlaneOther.rotateY(Math.PI/2);\n          }\n          else if(i===2){\n            tempPlane.translateX((cD-1)-j);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY(-.51);\n            tempPlane.rotateX(Math.PI/2);\n            tempPlane.rotateZ(Math.PI/2);\n\n            tempPlaneOther.translateX((cD-1)-j);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY(-.51);\n            tempPlaneOther.rotateX(Math.PI/2);\n            tempPlaneOther.rotateZ(-Math.PI/2);\n          }\n          else if(i===3){\n            tempPlane.translateX(-.51);\n            tempPlane.translateZ((cD-1)-k);\n            tempPlane.translateY((cD-1)-j);\n            tempPlane.rotateX(Math.PI);\n            tempPlane.rotateZ(Math.PI);\n            tempPlane.rotateY(-Math.PI/2);\n\n            tempPlaneOther.translateX(-.51);\n            tempPlaneOther.translateZ((cD-1)-k);\n            tempPlaneOther.translateY((cD-1)-j);\n            tempPlaneOther.rotateX(-Math.PI);\n            tempPlaneOther.rotateY(Math.PI/2);\n            //tempPlaneOther.rotateZ(Math.PI);\n          }\n          tempGroup.add(tempPlane)\n          tempGroupOther.add(tempPlaneOther)\n        }\n      }\n      tempGroup.visible = false;\n      tempGroupOther.visible = false;\n      \n      groups[1].push(tempGroup);     //Clockwise for white, counter for yellow\n      groups[4].push(tempGroupOther);//Counter for white, clockwise for yellow\n    }\n\n    groups.forEach(group => scene.add(...group));\n    // scene.add(...groups.flat(2)); //issues with new edge\n\n    // add cubes to state and then render\n    this.setState({\n      cubes : tempCubes,\n      cubeDimension : cD,\n      cameraZ : -(2+cD),\n      cameraX : (2+cD),\n      cameraY : -(2+cD),\n      rubiksObject,\n      middles: generated.middles,\n      edges: generated.edges,\n      corners: generated.corners,\n      currentFunc: 'Reset',\n      generatedButtons: cube.generateButtonData(this.getSizeFromUrl())\n    }, () => {\n      // Callback required to wait for setState to finish\n      for(let i = 0; i < rubiksObject.length; i++){\n        // Logic to only render outer pieces since inside pieces aren't ever used\n        if((this.state.cubes[i].position.x === 0 || this.state.cubes[i].position.x === this.state.cubeDimension-1) ||\n            (this.state.cubes[i].position.y === 0 || this.state.cubes[i].position.y === this.state.cubeDimension-1)||\n            (this.state.cubes[i].position.z === 0 || this.state.cubes[i].position.z === this.state.cubeDimension-1)){\n          scene.add( this.state.cubes[i] );\n        } \n      }\n      camera.position.z = this.state.cameraZ;// * Math.sin( this.state.angle );\n      camera.position.y = this.state.cameraY;\n      camera.position.x = this.state.cameraX;// * Math.cos( this.state.angle );\n\n      renderer.render( scene, camera );\n      animate();\n    });\n\n    // Function runs continuously to animate cube\n    let animate = () => {\n\n      // clear visible move hints\n      for(let i = 0; i < groups.length;i++)\n        groups[i].forEach(group => group.visible = false)\n\n      controls.enabled = true;\n      stats.begin();\n      requestAnimationFrame( animate );\n\n      // Mouse stuff here\n      // Consider moving into another function to unclutter animate\n      // Very expensive operation\n      if(this.state.currentFunc === \"Color Picker\" || this.state.currentFunc === \"None\") {\n\n        //check here that data isn't the same as previous so not running this every time\n        // Data on move button triggers visual move hints\n        if(this.state.isVisible){\n          let [hFace,hDir,hDepth,hMulti] = this.state.hoverData;\n          if(hFace<3){\n            if(hDir === -1){\n              if(!hMulti){\n                groups[hFace][hDepth-1].visible=true;\n              }\n              else\n                for(let i = 0; i <= hDepth-1; i++){\n                  groups[hFace][i].visible=true;\n                }\n            }\n            else {\n              if(!hMulti){\n                groups[hFace+3][hDepth-1].visible=true;\n              }\n              else\n              for(let i = 0; i <= hDepth-1; i++){\n                groups[hFace+3][i].visible=true;\n              }\n            }\n          }\n          else{\n            if(hFace===3) hFace=0;\n            if(hFace===4) hFace=2;\n            if(hFace===5) hFace=1;\n\n            if(hDir === -1){\n              if(!hMulti){\n                groups[hFace+3][(groups[hFace+3].length-1)-(hDepth-1)].visible=true;\n              }\n              else\n                for(let i = groups[hFace+3].length-1; i >= (groups[hFace+3].length-1)-(hDepth-1); i--){\n                  groups[hFace+3][i].visible=true;\n                }\n            }\n            else {\n              if(!hMulti){\n                groups[hFace][(groups[hFace].length-1)-(hDepth-1)].visible=true;\n              }\n              else\n                for(let i = groups[hFace].length-1; i >= (groups[hFace+3].length-1)-(hDepth-1); i--){\n                  groups[hFace][i].visible=true;\n                }\n            }\n          }\n        }\n\n        let previousPiece = this.state.previousPiece;\n\n        // Projects mouse onto scene to find intersected objects\n        raycaster.setFromCamera( mouse, camera );\n\n        // calculate objects intersecting the picking ray\n        let intersects = raycaster.intersectObjects( scene.children );\n        if (intersects[0] && intersects[0].object.material.length && !this.state.mouseDown){\n          previousMousePos = null;\n          piecePos = null;\n          intersected = null;\n          controls.enabled = false;\n          // Get faces to line up properly\n          let faceInteresected = intersects[0].faceIndex;\n          let tempIndex = -1;\n          \n          // Assign the intersected face index to be recolored on hover\n          \n          for(let i = 0; i < 6; i++){\n            if(faceInteresected===i*2 || faceInteresected=== i*2+1) {\n              tempIndex = i;\n              this.setState({mouseFace : i});\n              break;\n            }\n          }\n\n          // Recolors last hovered piece. rgb values of cyan\n          if(intersects[0].object.material[tempIndex].opacity!==.8/*parseFloat(intersects[0].object.material[tempIndex].color.r) !== 0.6784313725490196 &&\n             parseFloat(intersects[0].object.material[tempIndex].color.g) !== 0.8470588235294118 &&\n             parseFloat(intersects[0].object.material[tempIndex].color.b) !== 0.9019607843137255*/){\n               \n            if(previousPiece!==null) {\n              let previousPiece = this.state.previousPiece;\n              previousPiece.opacity=1;\n              //this.reloadTurnedPieces(previousPiece);\n              this.setState({previousPiece:null});\n            }\n          }\n          \n          // Recolor face that mouse is over\n          if(intersects[0].object.material[tempIndex] && tempIndex > -1)\n            if(intersects[0].object.material[tempIndex].color){\n              // store the hovered face for use later\n              this.setState({facePosX : intersects[0].object.position.x,\n                            facePosY : intersects[0].object.position.y,\n                            facePosZ : intersects[0].object.position.z,\n                            faceSide : tempIndex });\n              intersects[0].object.material[tempIndex].opacity=.8;\n              //console.log(intersects[0].object.material[tempIndex].opacity);\n              // store the hovered coordinates so that if a different\n              // piece is hovered, the previous gets colored back.\n              this.setState({previousPiece : intersects[0].object.material[tempIndex]});\n            }\n        }\n\n        // 1. Work on what values get stored for mouse and the object hovered \n        // 2. Will be important for determing turn directions based on drag\n        // 3. Once available turn directions have been determined, calculate change\n        //    in mouse movement to determine which face gets turned and direction\n        else if(this.state.mouseDown){\n          if(this.state.mouseFace === null){\n            // dragging mouse on canvas should rotate cube\n          } \n\n          else{\n            try{\n              let toFace = [2,4,3,0,1,5];\n              \n              if(previousMousePos === null) {\n                previousMousePos = intersects[0].point;\n                piecePos = intersects[0].object.position;\n                intersected = Math.floor(intersects[0].faceIndex/2);\n              }\n              else{\n                  let calculated = this.calculateTurn(intersects[0].point,previousMousePos,piecePos,toFace[intersected],cD);\n                  if(calculated!==null&&!calculated.includes(\"null\")){\n                    //console.log(calculated)\n                    this.setState({mouseDown: false},()=>{\n                      this.algorithm(calculated,\"Drag Turn\");\n                    });\n                  }\n                \n              }\n            }catch(e){\n              //console.error(\"Error prevented\");\n            }\n            // ** account for mouse not being over the cube after selected piece **\n            //\n            // Code here to figure out which faces can be turned from selected face\n            // Also code here to figure which direction to turn face based on mouse movement\n          }\n        }\n\n        // \n        else if(this.state.mouseFace !== null){\n          if(previousPiece!==null) {\n            previousPiece.opacity=1;\n            //this.reloadTurnedPieces(previousPiece);\n            this.setState({previousPiece:null});\n          }\n\n          previousMousePos = null;\n          piecePos = null;\n          intersected = null;\n          this.setState({mouseFace : null});\n        }\n      }\n      \n      // Animate queued rotation\n      if(this.state.start<=this.state.end){\n        this.rotatePieces(cube.rotatePoint,tempCubes);\n      }\n\n      // Handles move queueing based on function\n      else {\n        if(this.state.reload) this.reloadTurnedPieces(this.state.face);\n        if(this.state.currentFunc !== \"None\"){\n\n          // Doesn't work with !==\n          if(this.state.currentFunc === \"Undo\" ||\n             this.state.currentFunc === \"Redo\"){}\n\n          // Keeps undo/redo updated with other moves\n          // find the error in this logic\n          else {\n            let moveLog = this.state.moveLog;\n            let index = this.state.undoIndex;\n\n            if(index > 0){\n              let moveArray = this.moveStringToArray(moveLog);\n\n              if(this.state.currentFunc[0]==='0' || this.state.currentFunc[0]==='1' ||\n                 this.state.currentFunc[1]==='1' || this.state.currentFunc[1]==='2' || this.state.currentFunc[1]==='3'){\n                let tempVal = moveArray[moveArray.length-1];\n                for(let i = 0; i <= index; i++){\n                  moveArray.pop();\n                }\n                moveArray.push(tempVal);\n              }\n\n              else{\n                for(let i = 0; i < index; i++){\n                  moveArray.pop();\n                }\n              }\n\n              moveLog = moveArray.join(\" \");\n              this.setState({undoIndex:0,moveLog});\n            }\n          }\n\n          // Moves based on active function\n          if (this.state.currentFunc===\"Scrambling\")\n            this.state.moves < 25 ?\n              this.scramble() :\n              this.setState({currentFunc : \"None\",moves : 0});\n\n          else if (this.state.currentFunc===\"Solving\"){\n            // Place holder for full solve testing\n            if(this.state.solveOnce){\n              this.setState({solveOnce:false},()=>{\n                let a = performance.now();\n                this.setState(this.generateAllSolveMoves(this.state,this.state.rubiksObject));\n                let b = performance.now();\n                console.log('It took ' + ((b - a)/1000).toFixed(3) + ' seconds to solve.');\n              });\n\n            }\n            // If there are no moves queued, check to see if more moves can be queued\n            else if(!this.state.moveSet.length){\n              this.stopSolve();\n            }\n            // If playone or autoplay is true, progress accordingly\n            else if(this.state.playOne||this.state.autoPlay){\n              let cD = this.state.cubeDimension;\n              let tempRubiks = this.state.rubiksObject;\n              let blockMoveLog = this.state.blockMoveLog;\n              let moveLog = this.state.moveLog;\n              let solveMoves = this.state.solveMoves;\n              let moveSet = this.state.moveSet;\n              let end = this.state.end;\n              let solveState = this.state.solveState;\n              let obj = {};\n\n              if(this.state.autoPlay) {\n                obj.prevSet = this.state.prevSet;\n                obj.prevSet.push(moveSet[0]);\n              }\n\n              // generates data for next move\n              let moveData = this.parseMoveArray(moveSet);\n\n              // takes next move data and queues changes to be made to state\n              \n              if(moveData){\n                obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n              }\n\n              // Turn off play one so only runs once\n              if(this.state.playOne) obj.playOne = false;\n\n              // hides move the hint during the move\n              this.mouseLeave();\n              \n              // store the object here\n              if(moveData)\n                obj.rubiksObject = this.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,tempRubiks);\n\n              //console.log(obj);\n              this.setState(obj);\n            }\n            // Show hint over next move\n            else if(this.state.moveSet.length){\n              let data = this.convertMoveToData(this.state.moveSet[0]);\n              if(data){\n                this.mouseOver(this.state.moveSet[0],data);\n              }\n            }\n          }\n\n          else if(this.state.currentFunc===\"Color Picker\"){\n            // Code here for color picker interface\n          }\n          else if(this.state.currentFunc==='Reset'){\n            this.reset();\n          }\n          else {\n            if(this.state.moveSet.length){\n              let cD = this.state.cubeDimension;\n              let tempRubiks = this.state.rubiksObject;\n              let blockMoveLog = this.state.blockMoveLog;\n              let moveLog = this.state.moveLog;\n              let solveMoves = this.state.solveMoves;\n              let solveState = this.state.solveState;\n              let end = this.state.end;\n              let moveData = this.parseMoveArray(this.state.moveSet);\n\n              if(moveData){\n                let obj = this.rotateCubeFace(...moveData,blockMoveLog,moveLog,solveMoves,end,solveState);\n    \n                obj.rubiksObject = this.rotateFace(obj.face,obj.turnDirection,obj.cubeDepth,obj.isMulti,cD,tempRubiks);\n\n                this.setState(obj);\n              }\n\n            } \n            else{\n              this.setState({currentFunc:\"None\"}); \n            }\n          }\n        }\n      }\n      \n      controls.update();\n      renderer.render( scene, camera );\n      stats.end();     \n    };\n  }\n\n  // Renders html to the index.html page\n  render() {\n    let solveBtn = (this.state.cubeDimension < 51) ? <button onClick={this.beginSolve} style={{position:\"fixed\", bottom: \"60px\", right: \"10px\",backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>SOLVE</button> : \"\";\n    let solveInterface = <div style={{position:\"fixed\", borderRadius: \".25rem\",bottom: \"60px\", right: \"10px\",backgroundColor: \"#343a40\", border: \"1px solid #007bff\",color:\"lightgray\"}}>\n        {!this.state.autoPlay? <button onClick={() => this.setState({autoPlay:true})} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Auto Play</button> : \n        <button onClick={() => this.setState({autoPlay:false})} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Pause</button>} <br></br>\n        {!this.state.autoPlay? <button onClick={() => this.setState({playOne:true,prevSet:[...this.state.prevSet,this.state.moveSet[0]]})} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Play \"{this.state.moveSet[0]}\"</button > : <button disabled style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Play \"{this.state.moveSet[0]}\"</button> }<br></br>\n        {!this.state.autoPlay && this.state.prevSet.length? <button onClick={() => this.rewindSolve()} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Rewind \"{this.state.prevSet[this.state.prevSet.length-1]}\"</button > : <button disabled style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>Rewind \"No move\"</button> }<br></br>\n        <button onClick={this.stopSolve} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>STOP SOLVE</button>\n    </div>;\n    // let stopSolveBtn = <button onClick={this.stopSolve} style={{backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>STOP SOLVE</button>;\n    return (\n      <div className=\"App\" >\n        \n        <Navbar\n          title=\"Rubik's Cube\"\n          changeSettings={this.changeSettings.bind(this)}\n          isLocal={this.state.isLocal}\n          state={this.state}\n        />\n\n        <p style={{position:\"fixed\", top: \"75px\", left: \"10px\",color: \"white\"}}>Speed: {this.state.currentSpeed}</p>\n        <p style={{position:\"fixed\", top: \"75px\", right: \"10px\",color: \"white\"}}>{this.state.currentFunc === \"None\" ? \"\" : this.state.currentFunc}</p>\n        <div style={{position:\"fixed\", top: \"75px\", left: \"50%\", marginLeft: \"-50px\",color: \"white\"}}>\n          <button className=\"redoUndo\" onClick={() => this.undo()}>Undo</button>\n          <button className=\"redoUndo\" onClick={() => this.redo()}>Redo</button>\n        </div>\n\n        <Speeds //Top left with slider\n          onSliderChange={this.onSliderChange}\n          isDisabled={this.state.currentFunc===\"None\" ? false:true}\n        />\n\n        { this.state.showMoveInput? \n          <MoveInput\n            algorithm = {this.algorithm}\n            handleDrag = {this.handleDragInput}\n            onStart = {this.onStartInput}\n            onStop = {this.onStopInput}\n          /> : \"\"\n        }\n\n        { this.state.currentFunc===\"Color Picker\"? \n          <ColorPicker\n            handleDrag = {this.handleDragInput}\n            onStart = {this.onStartInput}\n            onStop = {this.onStopInput}\n            endColorPicker={this.endColorPicker}\n            colorPicked={this.state.colorPicked}\n            changeColor={this.changeColor}\n            isValidConfig={this.state.isValidConfig}\n            setColorPickedCube={this.setColorPickedCube}\n          /> : \"\"\n        }\n      \n        <Patterns\n          algorithm={this.algorithm}\n          size={this.getSizeFromUrl()}\n        />\n\n        { this.state.generatedButtons && this.state.showControls? \n          <Controls\n          disableHover={this.state.showGuideArrows}\n          generatedButtons={this.state.generatedButtons}\n          size={this.getSizeFromUrl()}\n          rotateOneFace={this.rotateOneFace}\n          handleDrag = {this.handleDragControls}\n          onStart = {this.onStartControls}\n          onStop = {this.onStopControls}\n          mouseEnter= {this.mouseOver}\n          mouseLeave= {this.mouseLeave}\n        /> : \"\"}\n  \n        {/* Create a component for these that works similarly to patterns to auto populate functions */}\n        {/* Bottom Right */} \n        {this.state.solveState < 0 &&this.state.cubeDimension<5?<button onClick={this.beginColorPicker} style={{position:\"fixed\", bottom: \"90px\", right: \"10px\",backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>COLOR PICKER</button>:\"\"}\n        {this.state.moveSet[0]===\"'\"?this.stopSolve():\"\"}\n        {this.state.solveState < 0 ? solveBtn : solveInterface}\n        <button onClick={this.beginScramble} style={{position:\"fixed\", bottom: \"30px\", right: \"10px\",backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>SCRAMBLE</button>\n        <button onClick={()=>this.setState({currentFunc:\"Reset\"})} style={{position:\"fixed\", bottom: \"0px\", right: \"10px\",backgroundColor: \"Transparent\", border: \"none\",color:\"lightgray\"}}>RESET</button>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}